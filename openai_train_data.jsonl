{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Physical-Feedthrough Nets in Voltage Areas"}, {"role": "assistant", "content": "A net is considered to be native to a voltage area if one or more segments of that net are in a logical hierarchy of that voltage area.\n If a net must physically route over a nonnative voltage area, then it is a physical feedthrough net of that voltage area, as shown in the following figure.\n 127 Setting Up Multivoltage Designs Feedback Figure 18 Physical-Feedthrough Nets of Voltage Areas VA0 (PD0 ) VA1 (PD1) N1 Top (PD0) Block1 (PD1) N1 Physical view Logical view By default, physical-feedthrough nets are allowed in voltage areas.\n To prevent physical-feedthrough nets in a voltage area, define a voltage area rule using the create_voltage_area_rule -allow_pass_through false command, as shown in the following example: fc_shell> create_voltage_area_rule -allow_pass_through false \\ -name VA1_rule -voltage_areas VA1 With this rule, the N1 net detours around the VA1 voltage area, as shown in Figure 19 Figure 19 Physical-Feedthrough Nets Disabled for a Voltage Area VA0 N1 VA1 By default, optimization does not insert buffers on physical-feedthrough nets of voltage areas.\n Inserting a buffer on a physical-feedthrough net can cause a mismatch between the 128 Setting Up Multivoltage Designs Feedback logical and physical view of the buffer.\n The tool resolves such mismatches by supporting the following types of optimization for such nets: Physical-feedthrough buffering During physical-feedthrough buffering the tool performs the following: 1.\n Inserts buffers in the logical hierarchy of its drivers or loads and applies the power domain of the nonnative voltage area on the buffer using power-domain-on-instance (PDOI) constraints 2.\n Places the buffers within the nonnative voltage area To allow physical-feedthrough buffering, use the create_voltage_area_rule -allow_physical_feedthrough true command, as shown in the following example: fc_shell> create_voltage_area_rule \\ -allow_physical_feedthrough true \\ -name VA1_rule -voltage_areas VA1 Logical-feedthrough buffering During logical-feedthrough the tool performs the following: 1.\n Adds buffers in the logical hierarchy corresponding to the nonnative voltage area 2.\n Places the buffers within the nonnative voltage area To allow logical-feedthrough buffering, use the create_voltage_area_rule -allow_logical_feedthrough true command.\n To specify logical hierarchies in which feedthrough buffers are allowed or not allowed, use the -include_logical_feedthrough_hierarchy or -exclude_logical_feedthrough_hierarchy option, respectively.\n The following example enables logical-feedthrough buffering for the VA1 voltage area and limits the feedthrough buffers to only the U1 and U2 hierarchical cells: fc_shell> create_voltage_area_rule \\ -allow_logical_feedthrough true \\ -include_logical_feedthrough_hierarchy {U1 U2}\\ -name VA1_rule -voltage_areas VA1 The following example enables logical-feedthrough buffering for the VA2 voltage area and excludes the U3 hierarchical cell from feedthrough buffering: fc_shell> create_voltage_area_rule \\ -allow_logical_feedthrough true \\ -exclude_logical_feedthrough_hierarchy {U3}\\ -name VA2_rule -voltage_areas VA2 129 Setting Up Multivoltage Designs Feedback Note: To add a logical-feedthrough buffer to a lower-level block, the tool has to add new boundary ports to that block.\n Therefore, freezing the boundary of a block by using the set_freeze_ports command prevents the tool from adding a logical-feedthrough buffer to that block.\n Figure 20 Difference in the Logical View After Physical- and Logical-Feedthrough Buffering To create a default rule that applies to all voltage areas that do not have a specific rule, use the create_voltage_area_rule command with the -default_rule option, as shown in the following example: fc_shell> create_voltage_area_rule -default_rule \\ -allow_physical_feedthrough true If a voltage area does not have a specific rule, and there is no default rule, feedthrough buffering for that voltage area is controlled by the opt.common.allow_physical_feedthrough application option setting.\n To report voltage area rules, use the report_voltage_area_rules command.\n To remove voltage area rules, use the remove_voltage_area_rules command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tool"}, {"role": "assistant", "content": "You can end the session and exit the Fusion Compiler tool at any time.\n To exit the tool, use the exit or quit command.\n Note: When you exit the tool from the command line, the tool exits without saving the open blocks."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running the signoff_fix_drc Command"}, {"role": "assistant", "content": "By default, the signoff_fix_drc command performs the following tasks: 1.\n Runs the signoff_check_drc command to generate the initial signoff DRC results, as described in Checking for DRC Violations If you have already run the signoff_check_drc command, you can use the existing signoff DRC results instead of rerunning signoff design rule checking.\n To reuse the existing results, specify the directory that contains the results by setting the signoff.fix_drc.init_drc_error_db application option.\n You can specify either a relative path or an absolute path.\n If you specify a relative path, it is relative to the current working directory.\n For example, to use the results from the default signoff_check_drc run directory, use the following commands: fc_shell> set_app_options \\ -name signoff.fix_drc.init_drc_error_db \\ -value signoff_check_drc_run fc_shell> signoff_fix_drc Note: To use existing signoff DRC results as input to the signoff_fix_drc command, you must use the signoff DRC application options described in Generating Input for the Automatic Fixing Flow 2.\n Runs two repair loops to fix the DRC violations In each repair loop, the signoff_fix_drc command performs the following tasks; a.\n Tries to fix the DRC violations detected in the previous IC Validator signoff DRC run, as described in Fixing DRC Violations b.\n Runs IC Validator signoff design rule checking on the modified block, as described in Checking for DRC Violations To change the number of repair loops, use the -max_number_repair_loop option; you can specify an integer between 1 and 10.\n If no signoff DRC violations remain after a loop, the tool does not perform additional repair loops.\n As the repair loop number increases, so does the physical scope of the rerouting performed by that repair loop.\n To change the scope, increase the number of the initial repair loop by using the -start_repair_loop option.\n Note that increasing the initial loop number might cause a greater disturbance to the block, which would require additional design rule checking and fixing by Zroute.\n 687 Performing Signoff Design Rule Checking Feedback 3.\n Writes a summary report of the results For information about the summary report, see Summary Report for Automatic Design Rule Fixing Fixing DRC Violations In each repair loop, the signoff_fix_drc command tries to fix the DRC violations detected in the previous signoff DRC run.\n For the first loop, the tool uses the IC Validator data in the directory specified by the signoff.fix_drc.init_drc_error_db application option (or the signoff_drc_run_init directory if you do not use this option).\n For successive loops, the tool uses the IC Validator DRC data from the previous loop, which is stored in the directory specified by the signoff.fix_drc.run_dir application option (or the signoff_fix_drc_run directory if you do not use this option).\n When fixing DRC violations, the signoff_fix_drc command has the following default behavior: Tries to fix all design rule violations detected in the previous signoff DRC run except those design rules that have more than 1000 violations Performs DRC fixing on data nets for the whole block To modify the regions for design rule fixing, use one or both of the following options: -coordinates This option restricts design rule fixing to the specified regions.\n -excluded_coordinates This option prevents design rule fixing in the specified regions.\n If you specify this option with the -coordinates option, the command does not fix design rules in the overlapping regions.\n To specify the coordinates, use the following format: {{x } {x }...\n {x }} Note that there must be a space between each set of coordinates.\n 688 Performing Signoff Design Rule Checking Feedback To prevent fixes that might impact timing-critical nets, use one or both of the following options: -nets This option explicitly specifies the critical nets.\n -timing_preserve_setup_slack_threshold This option enables the tool to automatically determine the critical nets based on a setup slack threshold.\n The unit for the slack threshold setting is the library time unit.\n Performs five iterations of detail routing after DRC fixing to fix any DRC violations introduced during DRC fixing Saves the modified block in a design view named block _ADR_# To change the default behavior, use the following options: signoff.fix_drc.max_errors_per_rule This application option specifies the error threshold for ignoring a design rule.\n signoff.fix_drc.fix_detail_route_drc This application option controls the scope of DRC fixing.\n To reduce runtime by performing DRC fixing only in areas near the signoff DRC violations, set this application option to local signoff.fix_drc.target_clock_nets This application option controls whether DRC fixing targets data nets or clock nets.\n To target clock nets, set this application option to true signoff.fix_drc.max_detail_route_iterations This application option specifies the number of detail routing iterations; you can specify an integer between 0 and 1000.\n Checking for DRC Violations When performing signoff design rule checking, the signoff_fix_drc command has the following default behavior: Reads the design view for the top-level block and library cell instances, and the pin information from the frame view for the macro cell and I/O pad cell instances For information about changing the view used for specific cells, see Reading Blocks for Signoff Design Rule Checking After the initial run, performs design rule checking only on those portions of the design affected by design rule fixing 689 Performing Signoff Design Rule Checking Feedback To perform signoff design rule checking on the entire block for the last repair loop, set the signoff.fix_drc.last_run_full_chip application option to true.\n Setting this option to true increases accuracy but also increases runtime.\n To perform signoff design rule checking on the entire block for all repair loops, set the signoff.fix_drc.check_drc application option to global.\n Setting this option to global increases accuracy but can greatly increase runtime.\n Does not check for violations in child blocks Excludes rules that are not suitable for automatic design rule fixing To explicitly specify the design rules checked by the IC Validator tool, set the -select_rules rules and -unselect_rules rules application options.\n Stores the IC Validator results in the signoff_fix_drc_run directory To use a different run directory, set the signoff.fix_drc.run_dir application option.\n Note: The IC Validator results for the initial signoff DRC run are stored in the signoff_drc_run_init directory.\n In addition, you can specify options to add to the IC Validator command line by setting the signoff.fix_drc.user_defined_options application option.\n See Also Performing Signoff Design Rule Checking 690 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Slack"}, {"role": "assistant", "content": "You can improve the total negative slack of a block by using path groups to focus the tool on fixing more violating paths during optimization.\n However,using this technique can increase the runtime and degrade the area and power QoR.\n To enable enhanced delay optimization techniques that improve total negative slack, set the compile.flow.enhanced_delay_opto_for_pg application option to.\n This feature has better runtime and better area and power QoR, as compared to the extensive use of path groups to improve total negative slack."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mapping ECO Cells to Specific Spare Cells"}, {"role": "assistant", "content": "To map an ECO cell to a specific spare cell, use the map_freeze_silicon command.\n Specify the ECO cell name and the corresponding spare cell name by using the -eco_cell and -spare_cell options.\n The following example maps the ECO cell named ECO1 to the spare cell named spare_1: fc_shell> map_freeze_silicon -eco_cell ECO1 -spare_cell spare_1 You can specify the ECO cell to spare cell mapping by using a map file and specifying this map file name by using the -map_file option with the map_freeze_silicon command.\n The map file has the following format: ECO_cell_1 spare_cell_1 ECO_cell_2 spare_cell_2...\n...\n 978 Updating Supply Nets for ECO Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Block-Level Power Intent"}, {"role": "assistant", "content": "You must provide power intent of the subblock for the top-level design implementation when running hierarchical synthesis.\n To do so, you can provide full block-level UPF for the tool to automatically extract power intent interface.\n The following figure shows a subblock named U1, and the top-level power intent script loads the block-level power intent by using the load_upf command.\n Note: The block-level power intent specification is required only for hierarchical synthesis using ETMs.\n In the abstract flow, the UPF constraints are handled automatically by the tool.\n 830 Overview of Abstract Views Feedback U1 as an ETM in the PD_Top design Top-Level power intent create_power_domain PD_TOP -include_scope create_supply_net VDD_AO...\n load_upf block.upf -scope U1...\n connect_supply_net VDD_AO -port U1/VDD_AO Block-level power intent: block.upf create_power_domain PD_BLK -include_scope create_power_switch sw1 -domain PD_BLK \\ -input_supply_port {in VDD_AO} \\ -output_supply_port {out VDD_SW}...\n...\n add_port_state sw1/out -state {ON 1.08} -state {OFF off}...\n create_pst pst -supplies {VDD_SW...}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preparing to Run IC Validator In-Design Commands"}, {"role": "assistant", "content": "The following topics describe the tasks you must perform before you run the IC Validator In-Design commands: Setting Up the IC Validator Environment Enabling IC Validator Multicore Processing Defining the Layer Mapping for IC Validator In-Design Commands"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Locations for Unmapped Cells"}, {"role": "assistant", "content": "You can specify fixed locations for unmapped leaf cells, so the tool does not move these cells during compile.\n To do so, specify the location coordinates for leaf cells by using the set_cell_location command.\n To prevent the tool from moving a cell during compile, specify a fixed location for the cell by using the -fixed option with the set_cell_location command to set the physical_status attribute to fixed on the cell.\n To change the location of a cell marked with fixed placement status, specify the -ignore_fixed option with the command.\n The specified coordinates indicate the lower-left corner of the cell boundary.\n After you run the set_cell_location command, the unmapped cell gets the specified location in memory, but the location is not reflected in the layout view before compile.\n To view the placement of the cell, run the compile_fusion command.\n This example sets the lower-left corner of the out1_reg cell to (20 10) and sets the fixed physical placement status to prevent the tool from moving the cell during compile.\n 150 Specifying Physical Constraints for Placement and Legalization Feedback fc_shell> set_cell_location -coordinates { 20 10 } out1_reg -fixed"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing Voltage Drop Analysis Results"}, {"role": "assistant", "content": "When analysis is complete, the tool saves the analysis results and logs in the working directory.\n For more information about the working directories, see Specifying RedHawk and RedHawk-SC Working Directories The analyze_rail command generates the following files to invoke the RedHawk tool for running rail analysis: The RedHawk run script (analyze_rail.tcl) The RedHawk GSR configuration file (*.gsr) The analyze_rail command generates the following file to invoke the RedHawk-SC tool for running rail analysis: The RedHawk-SC Python script (analyze_rail.py) The RedHawk or RedHawk-SC tool generates the following files in the in- design.redhawk/ design_name.result (or in-design.redhawk_sc/ design_name.result in RedHawk-SC flow) directory when rail analysis is complete: The RedHawk analysis log (analyze_rail.log.*) Timing window file (*.sta) Signal SPEF files (*.spef) DEF/LEF files (*.def, *.lef) for the full-chip analysis When voltage drop analysis is complete, the tool saves the analysis results (*.result) in the design_name directory under the working directory.\n The rail analysis results are used to display maps and query attributes to determine the problem areas with large voltage drops.\n 902 Performing PG Electromigration Analysis Feedback To reload the rail results for displaying maps in the GUI, use the open_rail_result command.\n For example, fc_shell> open_rail_result REDHAWK_RESULT For more information about displaying maps, see Displaying Maps in the GUI To write out the rail analysis results, use the report_rail_result command.\n You must specify the result type with the -type option.\n For example, to write out the voltage drop values for the current block, set the -type option with the voltage_drop_or_rise argument.\n For more information, see Writing Analysis and Checking Reports To query the results stored in the current rail results cache, use the get_attribute commands.\n For more information, see Querying Attributes Note: RedHawk Fusion does not support results that are generated by the RedHawk tool outside of the Fusion Compiler environment.\n The RedHawk dump icc2_result command works only within the Fusion Compiler session."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Don't Touch Settings"}, {"role": "assistant", "content": "To set a don't touch setting on a clock tree, use the set_dont_touch_network command.\n fc_shell> set_dont_touch_network -clock_only [get_pins pin_name The -clock_only option sets the don't touch setting only on the clock network.\n If you do not specify the -clock_only option, the don't touch setting is set on both the data path and the clock path.\n 349 Defining the Clock Trees Feedback To remove the don't touch setting from a clock tree, use the -clear option with the set_dont_touch_network command.\n fc_shell> set_dont_touch_network -clock_only [get_pins pin_name ] -clear You can also set don't touch settings on specific objects in the clock network by using the set_dont_touch command.\n The following commands set a don't touch setting on a cell and a net: fc_shell> set_dont_touch [get_cells cell_name ] true fc_shell> set_dont_touch [get_nets -segments net_name ] true To report all the don't touch settings set on the current block, use the report_dont_touch command.\n fc_shell> report_dont_touch -all Note: If a cell has a placement status of fixed, it is treated like a don't touch cell during clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Configuring Multithreading"}, {"role": "assistant", "content": "Multithreading performs tasks in parallel by using multiple cores on the same machine, using a single process memory image.\n When using multithreading, each parallel task is called a thread.\n For the best performance during multithreading, you should limit the number of threads to the number of available cores, which is the number of CPUs in the machine times the number of cores per CPU.\n The following commands support multithreading configured by the set_host_options command: place_opt clock_opt 64 Enabling Multicore Processing Feedback check_legality, when advanced legalization is enabled by setting the place.legalize.enable_advanced_legalizer application option to true insert_via_ladders route_auto route_global route_track route_detail, and route_eco Note: When you run routing with a single thread, the result is deterministic; if you start with the same block, you always get the same result.\n However, if you use multiple threads, the routing results are not deterministic; the final routing is slightly different between runs due to the varying division of tasks between threads.\n Global routing supports a deterministic mode for multicore routing.\n To enable this mode, set the route.global.deterministic application option to on route_opt signoff_check_drc signoff_fix_drc signoff_create_metal_fill signoff_fix_isolated_via write_def By default, all commands use a single thread.\n To enable multithreading for those commands that support it, set the -max_cores option of the set_host_options command to a value greater than one and less than or equal to the number of cores available on your machine, which is the number of CPUs in the machine times the number of cores per CPU.\n The number of cores specified by the -max_cores option applies to all commands that support multithreading.\n When you enable multithreading, multithreaded commands create and use the specified number of threads, even if the number is more than the number of available cores.\n You must set an appropriate number of threads, so that the command does not try to use more resources than it has.\n Overthreading can reduce performance because the extra threads compete for resources.\n For best performance, do not run more than one thread per available core.\n For example, if your machine has two CPUs and each CPU has three cores, specify six as the maximum number of threads: fc_shell> set_host_options -max_cores 6 65 Enabling Multicore Processing Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading Designs Using the VCS Command-line Options"}, {"role": "assistant", "content": "The analyze command with the VCS command-line options provides compatibility with VCS simulation scripts and makes reading large designs easier.\n When you use the VCS command-line options, the tool automatically resolves references for instantiated designs by searching the referenced designs in the specified libraries and then loading these referenced designs.\n To read designs containing many HDL source files and libraries, specify the -vcs option with the analyze command.\n You must enclose the VCS command-line options in double quotation marks.\n For example, analyze -vcs \"-verilog -y mylibdir1 +libext+.v -v myfile1 \\ +incdir+myincludedir1 -f mycmdfile2\" top.v elaborate ${DESIGN_NAME} set_top_module ${DESIGN_NAME} To read SystemVerilog files with a specified file extension and Verilog files in one analyze command, use the -vcs \"+systemverilogext+ext\" option.\n When you do so, the files must not contain any Verilog 2001 styles.\n For example, the following command analyzes SystemVerilog files with the.sv file extension and Verilog files: analyze -format verilog -vcs \"-f F +systemverilogext+.sv elaborate ${DESIGN_NAME} set_top_module ${DESIGN_NAME}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Simple Vias"}, {"role": "assistant", "content": "To define a simple via or via array, use the following create_via_def syntax: create_via_def -cut_layer layer -cut_size { width height -upper_enclosure { width height -lower_enclosure { width height [-min_rows number_of_rows [-min_columns number_of_columns [-min_cut_spacing distance [-cut_pattern cut_pattern [-is_default] [-force] via_def_name You do not need to specify the enclosure layers; the tool determines them from the technology file by getting the metal layers adjacent to the specified via layer.\n 444 Defining Vias Feedback By default, when you define a simple via, it is a single-cut via.\n To define a via array, specify the minimum number of rows and columns for the array ( -min_rows and -min_columns options), as well as the minimum cut spacing ( -min_cut_spacing option).\n By default, the cut pattern is a full array of cuts.\n To modify the cut pattern, use the -cut_pattern option.\n To overwrite an existing via definition, use the -force option; otherwise, the command fails if the specified via definition already exists.\n For example, to create a single-cut via definition named design_via1_HV for the VIA12 via layer, use the following command: fc_shell> create_via_def design_via1_HV \\ -cut_layer VIA12 -cut_size {0.05 0.05} \\ -lower_enclosure {0.02 0.0} -upper_enclosure {0.0 0.2} \\ To create a via definition with an alternating 2x2 cut pattern in which the lower-left cut is omitted, use the following command: fc_shell> create_via_def design_via12 -cut_pattern \"01 10\" To report information about the user-defined via definitions, use the report_via_defs command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Sequential Clock Gating Options"}, {"role": "assistant", "content": "Sequential clock gates inserted by the tool honor the settings in the set_clock_gating_style command, which applies to all clock gates.\n However, the following commands are specific to fanin-based sequential clock gates: The set_fanin_sequential_clock_gating_options command This command specifies the minimum bitwidth and maximum fanout that a fanin-based sequential clock gate is allowed to gate.\n The default minimum bitwidth is 3 and the default maximum fanout is unlimited.\n You can specify a list of designs, power domains, and hierarchical instances to which the settings apply.\n The report_fanin_sequential_clock_gating_options command This command lists the settings for design objects.\n The set_fanin_sequential_clock_gating_objects command This command allows you to specify registers, hierarchical cells, power domains, or modules to be included in or excluded from fanin-based sequential clock gate insertion.\n The report_fanin_sequential_clock_gating_objects command This command lists the settings explicitly set with the set_fanin_sequential_clock_gating_objects command.\n Regardless of any settings made with the set_fanin_sequential_clock_gating_options and set_fanin_sequential_clock_gating_objects commands, the following conditions prevent fanin-based sequential clock-gate insertion: A register has asynchronous state changes.\n A register contains objects other than edge-triggered flip-flops in its transitive fanin.\n Disallowed objects include ports, latches, and registers with asynchronous state changes.\n The enable signal extracted from registers in the transitive fanin depends on their output pins.\n The toggle rate of a register's clock signal is so low that clock gating provides no benefit.\n 319 Fanin-Based Sequential Clock Gating Feedback Registers in the transitive fanin are controlled by a different base clock or triggered by the opposite clock edge.\n At least one of the registers in the transitve fanin is always enabled.\n The next state function of the register under analysis or of the registers in its transitive fanin depends on logic that contains a dont_care condition in the RTL.\n The register under analysis is multibit and its slices do not share the same enable signal."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running IC Validator Using Hybrid Multicore Processing"}, {"role": "assistant", "content": "If you are using LSF, you can specify both specific hosts and an LSF configuration for adding additional hosts as they become available.\n To use this method, Specify the configuration for the specific hosts as described in Running IC Validator on Specific Hosts Specify the LSF configuration as described in Running IC Validator Using a Job Scheduler, but use the -add_hosts option in addition to the other command options.\n This configuration represents both optional resources and maximum resources \u2013 the resources can be given to the IC Validator tool at the beginning, middle, or end of the run, or not given at all.\n For example, to use four cores on the current host and potentially acquire up to four more hosts from LSF, use the following commands: fc_shell> set_host_options -target ICV -max_cores 4 fc_shell> set_host_options -target ICV -add_hosts \\ -submit_protocol lsf -num_processes 4"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Clock Trees in the GUI"}, {"role": "assistant", "content": "The Fusion Compiler GUI provides the Clock Tree Visual Mode to help you visualize and analyze the clock trees in your design.\n In this mode, you can overlay the clock tree information to the layout view, or view the clock tree structure in the schematic view.\n For more information about analyzing clock tree information in the GUI, see the Using Map and Visual Modes topic in the Fusion Compiler Graphical User Interface User Guide 437 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Applying Mega-Switch Command Settings"}, {"role": "assistant", "content": "You can use mega-switch commands to apply setting for different stages of the tool flow that are applicable for specific situations with the use of a single command.\n Applying Required Settings for Advanced Technology Nodes Applying Required Settings for High Performance Cores Applying Required Settings for Improving Specific QoR Metrics"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Remaining Mask Design Rule Violations"}, {"role": "assistant", "content": "Some mask design rules are not handled during filler cell insertion because they have a low probability of occurrence and they require extensive computation time if handled during insertion.\n After filler cell insertion, use the replace_fillers_by_rules command to fix these design rule violations.\n You must specify the rule to fix by using the -replacement_rule option.\n Table 41 lists the design rules supported by this command and the keywords used to specify these rules.\n Table 41 Design Rules Supported by the replace_fillers_by_rules Command Design rule Description -replacement_rule keyword End orientation This rule allows the leftmost or rightmost filler cell to be flipped to a different orientation.\n For more information, see End Orientation Rule end_orientation Half row adjacency for half-height filler cells This rule restricts the placement of half-height filler cells.\n For more information, see Half Row Adjacency Rule half_row_adjacency 643 Inserting Filler Cells Feedback Table 41 Design Rules Supported by the replace_fillers_by_rules Command (Continued) Design rule Description -replacement_rule keyword Illegal abutment This rule prevents a filler cell from abutting certain other filler cells.\n For more information, see Illegal Abutment Rule illegal_abutment Maximum horizontal length This rule restricts the horizontal length of a continuous row of filler cells.\n For more information, see Maximum Horizontal Length Rule od_horiztonal_distance Maximum horizontal edge length This rule restricts the horizontal length of a sequence of abutted objects on a specific layer.\n For more information, see Maximum Horizontal Edge Length Rule horizontal_edges_distance Maximum stacking for small filler cells This rule restricts the horizontal length of a sequence of abutted objects on a specific layer.\n For more information, see Maximum Stacking for Small Filler Cells Rule small_filler_stacking Maximum vertical edge length This rule restricts the vertical length of a column of stacked filler cells.\n For more information, see Maximum Vertical Edge Length Rule max_vertical_constraint Tap cell spacing This rule restricts the distance between a tap cell's oxide diffusion (OD) layer and the neighboring OD layers.\n For more information, see Tap Cell Spacing Rule od_tap_distance N/A Randomly replace filler cells with custom filler cells.\n For more information, see Random Filler Cell Replacement random End Orientation Rule The end orientation rule searches for a continuous horizontal sequence of cells and modifies the orientation of the leftmost or rightmost filler cells if they are in the specified list of target filler cells.\n To select this rule, use the -replacement_rule end_orientation option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The target filler cells To specify the target filler cells, use the -target_fillers option.\n 644 Inserting Filler Cells Feedback The orientation modification To change the orientation for the leftmost filler cells, use the -left_end option.\n To change the orientation for the rightmost filler cells, use the -right_end option.\n To change the orientation for both the leftmost and rightmost filler cells, use both options.\n The valid values for these options are inverse, which flips the cell from its existing orientation R0_or_MX, which changes an MY orientation to R0 or an R180 orientation to MX MY_or_R180, which changes an R0 orientation to MY or an MX orientation to R180 To report the cells whose orientation would be changed, without actually changing the orientations, use the -check_only option.\n This option is valid only for the end orientation rule.\n Half Row Adjacency Rule The half row adjacency rule searches for half-height filler cells and replaces them based on the types of their neighboring standard cells.\n The standard cells are classified as one of the following types: Inbound The top or bottom boundary of an inbound standard cell is at the half-height location of the cell rows.\n When a half-height filler cell abuts an inbound cell, the abutting side of the half-height filler cell must have inbound-cell interaction polygons (ICIP).\n Regular The top and bottom boundaries of a regular standard cell are at the full-height location of the cell rows.\n When a half-height filler cell abuts a regular cell, the abutting side of the half-height filler cell must not have inbound-cell interaction polygons (ICIP).\n The replacement filler cells have the same height, width, and threshold voltage as the original filler cells.\n The cell libraries include both p-type and n-type replacement filler cells with inbound-cell interaction polygons (ICIP).\n For p-type half-height filler cells, the inbound- cell interaction polygons (ICIP) are at the bottom corners.\n For n-type half-height filler cells, the inbound-cell interaction polygons (ICIP) are at the top corners.\n Figure 128 shows the replacement of the half-height filler cells using the half row adjacency rule.\n 645 Inserting Filler Cells Feedback Figure 128 Half-Height Filler Cell Replacement With Half Row Adjacency Rule Regular height Inbound height Inbound height FILL2_P FILL4_N Regular height Inbound height Inbound height FILL2_PR FILL4_NR Inbound-cell interaction polygons To select this rule, use the -replacement_rule half_row_adjacency option with the replace_fillers_by_rules command.\n The following table lists the options used to specify the replacement half-height filler cells.\n Each list can contain only one cell of each size.\n Table 42 Half-Height Replacement Filler Cells Abutting inbound standard cells Option to specify replacement filler cells None -p_none -n_none Left-only -p_left -n_left Right-only -p_right -n_right Left and right -p_left_right -n_left_right Top or bottom (applies only to 2X filler cells) -p_left_center_right -n_left_center_right 646 Inserting Filler Cells Feedback Illegal Abutment Rule The illegal abutment rule restricts the filler cells that can abut certain other filler cells.\n To select this rule, use the -replacement_rule illegal_abutment option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The filler cells considered for the check and their replacements The filler cells considered for the check are called target cells.\n To specify the target filler cells and their replacements, use the following syntax with the -replace_abutment option: { { target_cell refill_cell }...\n } To ignore filler cells that have a physical_status attribute of fixed or locked, use the -skip_fixed_cells option with the replace_fillers_by_rules command.\n The filler cells that cannot abut the target filler cells These filler cells are called illegal cells.\n To specify the illegal cells, use the -illegal_abutment option.\n Note that the target filler cells specified in the -replace_abutment option are also considered illegal cells.\n For example, the following command fixes illegal abutment violations where the FILL1a and FILL1b filler cells cannot abut the FILLx and FILLy cells: fc_shell> replace_fillers_by_rules -replacement_rule illegal_abutment \\ -replace_abutment { {FILL1a CFILL1a} {FILL1b CFILL1b} } \\ -illegal_abutment {FILLx FILLy} Figure 129 shows the original row, which violates this rule, and the resulting row, which uses the replacement filler cells to fix the violations.\n The target filler cells are shown in red, while the replacement filler cells are shown in green.\n Figure 129 Fixing an Illegal Abutment Violation 647 Inserting Filler Cells Feedback Maximum Horizontal Edge Length Rule The maximum horizontal edge length rule restricts the horizontal length of a sequence of abutted objects on a specific layer.\n To select this rule, use the -replacement_rule horizontal_edges_distance option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The maximum horizontal length To specify the maximum length, use the -max_constraint_length option.\n The layer to check To specify the layer, use the -layer option.\n The cells considered for the check and the filler cells that can be used to replace the violating filler cells The filler cells considered for the check are called constrained cells.\n The filler cells considered to replace violating cells are called unconstrained cells To specify multiple constrained cell groups and their replacement cells, use the following syntax with the -refill_table option: { {{ refill_cell constrained_cells }}...\n } You can use this syntax to fix violations for threshold-voltage-based filler cells.\n To specify a single constrained cell group, use the -constraint_fillers option.\n To specify the replacement cells, use the -non_constraint_fillers option.\n Note: If you use both methods, the command uses only the information specified in the -refill_table option.\n For example, the following command identifies and fixes maximum horizontal edge length violations where the horizontal length on the M2 layer exceeds 30 um: fc_shell> replace_fillers_by_rules \\ -replacement_rule horizontal_edges_distance \\ -max_constraint_length 30 -layer M2 \\ -ref"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Gas Stations"}, {"role": "assistant", "content": "Gas stations are small voltage areas that are created for the purpose of minimizing the use of dual-rail buffers on physical feedthrough paths.\n Only single-rail repeaters are allowed in gas stations, and only optimization steps can add cells to gas stations.\n You create gas stations by using the create_voltage_area command during the design planning stage.\n The tool recognizes gas stations automatically and uses them by trading off the cost of a routing detour with the cost of using a dual-rail cell.\n Use the -nwell and -pwell options of the create_voltage_area command to specify n-well and p-well supply nets for a voltage area.\n Defining well supplies for gas station voltage areas provides flexibility for using gas stations for different design styles.\n If you do not use these options for a voltage area, the well bias values are assumed to be the same as the domain supply values.\n The report_voltage_areas command lists the n-well and p-well supply nets regardless of whether they are explicitly set."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting the Clock Tree Settings"}, {"role": "assistant", "content": "To report the settings that are used by clock tree synthesis, use the report_clock_settings command.\n By default, the commands reports the clock tree configuration, including the design rule constraints, target skew, and target latency; the clock tree references; the clock cell spacing rules; and the nondefault routing rules for all clocks in the current block.\n To report the settings for specific clocks, use the -clock option to specify the clocks of interest.\n To report specific information, use the -type option with the appropriate keyword.\n To report the clock tree design rule constraints, target skew, and target latency, use -type configurations To report the clock tree references, use -type references To report the clock cell spacing rules, use -type spacing_rules To report the nondefault routing rule used for the clock nets, use -type routing_rules"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Interclock Delay Balancing Constraints Automatically"}, {"role": "assistant", "content": "The Fusion Compiler tool can automatically generate the interclock delay balancing constraints based on the timing relationships between the clocks.\n To automatically generate the interclock delay balancing constraints, use the following command: fc_shell> derive_clock_balance_constraints This command identifies clocks that have interclock timing paths and places them in the same balance group.\n After running this command, use the report_clock_balance_groups command to report the generated interclock delay balancing constraints, as described in Reporting Clock Balance Groups.\n If necessary, you can modify the clock balance groups as described in Defining the Interclock Delay Balancing Constraints By default, the tool considers all timing paths when identifying the timing relationships between the clocks.\n To consider only those timing paths with slack less than a specified value, use the -slack_less_than option with the derive_clock_balance_constraints command.\n For example, to generate interclock balancing constraints only for paths with slack less than -0.2 ns, use the following command: fc_shell> derive_clock_balance_constraints -slack_less_than -0.2 Assume you run this command on a block for which clock A has a timing relationship only with clock B and the worst negative slack (WNS) of this group of timing paths is -0.1 ns and clock C has a timing relationship only to clock D and the WNS of this group of timing paths is -0.3 ns.\n The command considers only those timing paths with slack less than -0.2 ns, so it defines a single balance group that contains clocks C and D.\n Clocks A and B are not constrained because the timing paths between them have slack greater than -0.2 ns."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers on Routed Nets"}, {"role": "assistant", "content": "To add buffers or pairs of inverters on a fully routed net, use the add_buffer_on_route command as described in the following topics: Specifying the Net Names, Buffers Types, and Their Locations Controlling How Buffers are Added Specifying Settings for Multivoltage Designs Specifying Settings for the Freeze Silicon ECO Flow"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Routing Guides to Prioritize Routing Regions"}, {"role": "assistant", "content": "You can use a routing guide to prioritize regions within the routing guide boundary for routing.\n The regions are called access preference areas.\n You prioritize the access preference areas by assigning strengths to them.\n Access preference areas with higher strengths are preferred for routing.\n You can define access preference areas for both wires and vias.\n When you define a via access-preference area, you are defining a preference 477 Routing Constraints Feedback area for the via surrounds on the specified metal layer for vias coming from both above and below that metal layer.\n To create this type of routing guide, use the -access_preference option with the create_routing_guide command.\n Use the following syntax to specify the access preference areas and their strengths: layer [{wire_access_preference wire_rect wire_strength }] [{via_access_preference via_rect via_strength }]...} You can define multiple access preference areas.\n To define the relative preference of the access preference areas, use strength values between 0 and 1.\n If access preference areas overlap, the stronger access preference area takes precedence over the weaker access preference area.\n To require routing in a specific access preference area, use a strength value of 1.\n When you define access preference areas with a strength of 1, all access preference areas with a strength less than 1 are ignored and Zroute treats the access preference routing guide as a hard constraint.\n The following example creates an access preference routing guide whose boundary is a rectangle with its lower-left corner at (0, 0) and its upper-right corner at (300, 300).\n It contains one wire access-preference area with coordinates of (0, 0) and (2, 1) and two via access-preference areas, one with coordinates of (0, 0) and (5, 5) and one with coordinates of (40, 40) and (45, 45).\n The wire access-preference area is slightly preferred over areas outside of the access preference area because it has a strength of 0.2.\n The via access-preference area with coordinates at (40, 40) and (45, 45) is ignored, because routing is required in the via access-preference area with coordinates at (0, 0) and (5, 5), which has a strength of 1.\n fc_shell> create_routing_guide -boundary {{0 0} {300 300}} \\ -access_preference {M1 {wire_access_preference {{0 0} {2 1}} 0.2} {via_access_preference {{0 0} {5 5}} 1.0} {via_access_preference {{40 40} {45 45}} 0.5}} To report information about the access preference routing guides defined for your block, use the report_routing_guides command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tap Attributes"}, {"role": "assistant", "content": "During validation checking, the tool marks each inserted tap object with the is_valid_location attribute to indicate its validity.\n When validation checking is enabled, the attribute value is true for the valid taps and false for the invalid taps.\n When the -nocheck option is used, the attribute value is unknown for all taps.\n The tool updates the tap attributes in subsequent voltage drop and minimum path resistance analyses.\n Each tap belonging to the PG nets is checked against the extracted shape.\n When the analysis is complete, the tool updates the tap validity status based on the rail analysis results.\n The following example first lists the attributes of tap objects that are added to the block in this command run, and then checks if the Tap_1437 tap passes the validation checking.\n fc_shell> list_attributes -application -class tap...\n Properties: A - Application-defined U - User-defined I - Importable from design/library (for user-defined) S - Settable B - Subscripted Attribute Name Object Type Properties Constraints 888 Specifying Ideal Voltage Sources as Taps Feedback context tap string A integrity, rail, session full_name tap string A is_valid_location tap boolean A layer_name tap string A layer_number tap int A net tap string A object_class tap string A parasitics tap string A position tap coord A static_current tap double A type tap string A absolute_coord, auto_pg, cell_coord, cell_pg, lib_cell_coord, lib_cell_pg, signal, terminal, top_pg fc_shell> get_attribute [get_taps Tap_1437] is_valid_location true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Verification Checkpoints During Compilation"}, {"role": "assistant", "content": "You can generate intermediate verification checkpoints during the compile_fusion command, which you can use in the Formality tool to provide a netlist snapshot of the synthesis design state and verify the intermediate netlists.\n Verification checkpointing allows the Fusion Compiler and Formality tools to synchronize on an intermediate netlist and in turn results in higher completion rates and better QoR.\n To enable verification checkpointing, use the set_verification_checkpoints command as shown in the following example: fc_shell> set_verification_checkpoints Enabling checkpoint \"ckpt_logic_opt\" Enabling checkpoint \"ckpt_pre_map\" When you enable this feature, by default, the compile_fusion command generates verification checkpoints before mapping and during logic optimization, and the corresponding verification-checkpoint stages are named ckpt_pre_map and ckpt_logic_opt.\n You can enable verification checkpointing at only one stage as shown in the following example: fc_shell> set_verification_checkpoints {ckpt_logic_opt} Disabling checkpoint \"ckpt_pre_map\" Enabling checkpoint \"ckpt_logic_opt\" At each verification checkpoint, the tool automatically generates a checkpoint netlist and the guide_checkpoint command in the.svf file that is used by the Formality tool during verification."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Incremental Metal Fill Insertion"}, {"role": "assistant", "content": "If you have already used the signoff_create_metal_fill command to performed metal fill insertion on a block, you can use incremental metal fill insertion to perform the following tasks: Insert additional metal and via fill to specific layers or regions, as described in Adding to Existing Metal and Via Fill Replacing existing metal and via fill in specific locations, as described in Replacing Existing Metal and Via Fill Replacing existing metal and via fill in modified regions, as described in Performing Metal Fill Insertion Only in Modified Regions Adding to Existing Metal and Via Fill To insert metal and via fill without first removing the existing metal fill, use the -mode add option with the signoff_create_metal_fill command.\n When you use this mode, you can control where the metal fill insertion occurs by using one or more of the following options: -select_layers, which restricts the layers on which to perform metal fill insertion, as described in Specifying the Layers for Metal Fill Insertion -coordinates or -excluded_coordinates, which restrict the regions on which to perform metal fill insertion, as described in Specifying the Regions for Metal Fill Insertion When you use these options with the -mode add option, the tool does not fix density errors regardless of the setting of the signoff.create_metal_fill.fix_density_errors application option.\n See Also Pattern-Based Metal Fill Insertion Track-Based Metal Fill Insertion Replacing Existing Metal and Via Fill To remove and insert metal and via fill only for the specified locations, use the -mode replace option with the signoff_create_metal_fill command.\n You would typically 729 Inserting Metal Fill With IC Validator In-Design Feedback use this mode after ECO changes.\n When you use this mode, you must also specify one or more of the following options: -select_layers, which restricts the layers on which to perform metal fill insertion For example, to remove all metal fill on the M1 and M3 layers and refill those two layers without affecting the metal fill on other layers, use the following command: fc_shell> signoff_create_metal_fill -mode replace \\ -select_layers {M1 M3} For more information about this option, see Specifying the Layers for Metal Fill Insertion -coordinates or -excluded_coordinates, which restrict the regions on which to perform metal fill insertion For more information about these options, see Specifying the Regions for Metal Fill Insertion -nets or -timing_preserve_setup_slack_threshold, which restricts the nets on which to perform metal fill insertion For more information about these options, see Timing-Driven Metal Fill Insertion See Also Pattern-Based Metal Fill Insertion Track-Based Metal Fill Insertion Timing-Driven Metal Fill Insertion Performing Metal Fill Insertion Only in Modified Regions If you have previously run the signoff_create_metal_fill command on a block, you can use the -auto_eco true option to restrict the metal fill insertion to those regions of the block that have been modified since the last run.\n Note: You can use this option only if the percentage of change to the block since the previous signoff_create_metal_fill run is less than the change threshold.\n The default change threshold is 20 percent; to modify the change threshold, set the signoff.create_metal_fill.auto_eco_threshold_value application option.\n When you use the -auto_eco true option, the tool automatically determines the modified regions and layers, and then removes the existing metal fill and redoes metal fill insertion only in those locations; all other existing metal fill is retained.\n 730 Inserting Metal Fill With IC Validator In-Design Feedback By default, the tool compares the current block to the version used for the previous signoff_create_metal_fill run.\n To compare the current block to a different block, use the -pre_eco_design option to specify the comparison block.\n Note: A change on a metal layer triggers metal fill removal and insertion on the adjacent via layers to ensure that no floating or hanging vias remain when the metal shapes are removed from the ECO area.\n If a cell instance changes, the tool takes a conservative approach and considers changes on all layers.\n For example, to remove the metal fill from the regions modified since the last time you ran the signoff_create_metal_fill command and then fill only those regions using the pattern-based mode, use the following command: fc_shell> signoff_create_metal_fill -auto_eco true You can use the -select_layers option to specify the layers on which to perform metal fill insertion; however, the tool performs metal fill insertion on a specified layer only if it is one of the automatically detected changed layers.\n You cannot use the -coordinates or -excluded_coordinates options to restrict the metal fill insertion regions.\n When you use the -auto_eco true option, You cannot use the -mode -all_runset_layers, and -report_density options The tool does not insert dense fill on the double-patterning layers regardless of the setting of the -fill_all_tracks option The tool does not fix density errors regardless of the setting of the signoff.create_metal_fill.fix_density_errors application option See Also Pattern-Based Metal Fill Insertion Track-Based Metal Fill Insertion Timing-Driven Metal Fill Insertion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Options for Fixing Isolated Vias"}, {"role": "assistant", "content": "Before you run the signoff_fix_isolated_via command, configure the run by setting the application options shown in Table 51.\n To set the application options, use the set_app_options command.\n To see the current settings, use the report_app_options command.\n 742 Automatically Fixing Isolated Vias Feedback Table 51 Application Options for Signoff Isolated Via Fixing Application option Default Description signoff.\n fix_isolated_via.\n isolated_via_max_range (required) N/A Specifies the distance in microns within which a neighboring via must exist on each via layer.\n If a neighboring via is not found within this distance, a via is considered an isolated via and the command tries to add a fixing via within the specified distance.\n signoff.\n fix_isolated_via.\n avoid_net_types {clock pg} Specifies the types of nets to avoid when fixing isolated vias.\n Specify a list that contains one or more of the following values: clock pg, and none signoff.\n fix_isolated_via.\n run_dir signoff_fix_isolated_via_run Specifies the run directory, which contains the files generated by the signoff_fix_isolated_via command.\n You can specify either a relative path, in which case the directory is created under the current working directory, or an absolute path.\n signoff.\n fix_isolated_via.\n user_defined_options (none) Specifies additional options for the IC Validator command line.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Clock Gating Transformations"}, {"role": "assistant", "content": "By default, clock gating optimization occurs automatically when you synthesize fhs design.\n You can, however, define settings to allow or prevent clock gating optimization on specific objects.\n The tool makes no distinction among clock gates.\n Every clock gate is subject to optimization, whether it is a preexisting or tool-inserted clock gate.\n The simplest way to restrict clock gating optimization is by using the set_dont_touch and set_size_only commands.\n These commands restrict all clock gating optimization by preventing removal, merging, and splitting of all clock gates.\n For a more refined approach, use the set_clock_gate_transformations command.\n With this command, you can set specific constraints on each integrated clock gate and control which operations can be performed on the clock gate.\n The set_clock_gate_transformations command provides the following options: -split_fanout Setting this option to false prevents fanout splitting even if the fanout is larger than the maximum allowed.\n This setting also prevents any splitting performed by placement- aware clock gating.\n -merge_equivalents Setting this option to true allows a clock gate to be merged with an equivalent clock gate.\n -collapse_levels Setting this option to false prevents redundant clock gates from being collapsed -ungate_fanout Setting this option to true specifies that the clock gate fanout remain ungated -reset Resets all clock gate settings for the whole design If the size_only or dont_touch attributes are set on a clock-gating instance or clock- gating library cell, these attributes take precedence over any of the constraints specified by the set_clock_gate_transformations command.\n 314 Setting Routing Rules for Clock Gates Feedback Example Using Clock Gating Transformations For the example in Figure 60, suppose you set the following restrictions: set_clock_gating_options -minimum_bitwidth 6 set_clock_gate_transformations [get_cells uicg_b*] true \\ -ungate_fanout false set_clock_gate_transformations [get_cells uicg_c*] false Figure 60 Example of Clock Gating Restrictions During optimization, the tool removes the uicg_a clock gate because of a minimum bitwidth violation (minimum bitwidth is 6).\n The uicg_b1 and uicg_b2 clock gates are merged (assuming they have an equivalent enable signal).\n Even though the minimum bitwidth is not met, ungating is not allowed, so the registers remain gated.\n The uicg_c1 and uicg_c2 clock gates do not allow any transformations, therefore no optimizations are performed for these clock gates."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tracing Minimum Path Resistance Using the Mouse Tool"}, {"role": "assistant", "content": "Use the minimum path resistance (MPR) mouse tool to interactively trace the path with the least resistance from the specified power or ground net to the boundary nodes in the design.\n To trace the calculated minimum path resistance with the MPR interactive tracing tool, 1.\n In the GUI, choose Task > Rail and then select Analysis Tools from the task list to open the Task Assistant window (see Figure 208 ).\n 2.\n In the Task Assistant - Rail window that opens, click MPR Mouse Tool.\n 3.\n Specify the nets to analyze.\n Click OK.\n 911 Performing Minimum Path Resistance Analysis Feedback The MPR interactive mouse tool, which is shown in Figure 209, provides the following features: Zoom in and out to review the traces Provide two operation modes: the Add mode to trace multiple paths in the map, and the Replace mode to trace one path at a time in the map Use the standard query tool to show tracing information Select a region to trace multiple cells at a time Document the interactive actions by scripts Figure 208 Invoking the MPR Mouse Tool 912 Performing Minimum Path Resistance Analysis Feedback Figure 209 Tracing the Path With the Least Resistance Click to hide all objects from showing in the map Then select Cell 913 Performing Effective Resistance Analysis Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using the create_cell_array Command"}, {"role": "assistant", "content": "ad_tap_cel_aray comandcomandsad_tap_cel_aray To add a tap cell array with specific placement, use the create_cell_array command.\n You must specify the name of the library cell to use for tap cell insertion ( -lib_cell option), and the x- and y-pitches.\n For example, fc_shell> create_cell_array -lib_cell myreflib/mytapcell \\ -x_pitch 10 -y_pitch 10 By default, the create_cell_array command inserts a tap cell in each location in the specified grid for the entire block.\n The tool starts inserting the tap cells at the bottom-left of the core area and uses the specified x- and y-pitches to determine the location of the subsequent tap cells.\n The inserted tap cells are snapped to the site rows and placed in the default orientation for the site row.\n If a location is occupied by a fixed cell, hard macro, soft macro, or power-switch cell, the command does not insert a tap cell at that location.\n You can modify the following aspects of the default behavior: The region in which to insert tap cells Use the -voltage area option to restrict the tap cell insertion to the specified voltage areas.\n Use the -boundary option to restrict the tap cell insertion to the specified region.\n If you use both options, the command inserts tap cells only in the overlapping region.\n The offset from the insertion region boundary Use the -x_offset option to shift the pattern startpoint to the right by the specified distance in microns.\n Use the -y_offset option to shift the pattern startpoint up by the specified distance in microns.\n 586 Inserting Tap Cells Feedback The insertion pattern Use the -checkerboard option to insert a tap cell in every other location in the specified grid.\n To place a tap cell in the lower-left corner, use the -checkerboard even option.\n To keep the lower-left corner empty, use the -checkerboard odd option.\n In some design methodologies, you must insert a tap cell in empty spaces in the checkerboard pattern that are above or below specific cells, such as critical area breaker cells or boundary cells.\n To enable the insertion of these extra tap cells, use the -preserve_boundary_row_lib_cells option to specify the affected library cells.\n The snapping behavior To disable snapping of the inserted tap cells to the site rows, set the -snap_to_site_row false option.\n When you set this option to false, the tool uses R0 as the default orientation for the inserted cells.\n The orientation of the inserted tap cell instances To specify the orientation of the inserted tap cells, use the -orient option to specify one of the following orientation values: R0 R90 R180 R270 MX MY MXR90, or MYR90 The naming convention used to identify the inserted tap cell instances By default, the tool uses the following naming convention for inserted tap cells: headerfooter__ library_cell_name _R _C number To identify the tap cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the tool uses the following naming convention: prefix __ library_cell_name _R _C number 587 Inserting Tap Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Limiting the Latency Adjustment Values"}, {"role": "assistant", "content": "You can limit the latency adjustment values for concurrent clock and data optimization performed during the place_opt clock_opt, and route_opt commands as follows: Limit the amount that the clock latencies are advanced by using the ccd.max_prepone application option.\n Limit the amount that the clock latencies are delayed by using the ccd.max_postpone application option.\n There is no default for these application options.\n Specify these values in the library timing units.\n The following example sets a limit of 0.2 for advancing and 0.1 for delaying clock latencies: fc_shell> set_app_options -list {ccd.max_prepone 0.2} fc_shell> set_app_options -list {ccd.max_postpone 0.1}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Accessing Libraries"}, {"role": "assistant", "content": "Before enabling the THO settings, you must ensure that: All the subblock libraries are opened in mode.\n You must open the parent library using the -ref_libs_for_edit option with the open_lib command.\n The design view of the blocks is editable.\n 862 Transparent Hierarchy Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Macro Models"}, {"role": "assistant", "content": "To consider current and power distribution inside the memory blocks when analyzing hierarchical designs, use the exec_gds2rh command to generate RedHawk macro models for memory blocks.\n The command invokes the RedHawk gds2rh utility under the hood and extracts power grids and current sources from the memory blocks with varying levels of abstraction\u2015from fully detailed models for accurate block-level analysis to abstract models for full-chip dynamic analysis.\n Note: To create RedHawk macro models using the RedHawk gds2rh utility, you must specify the path to the RedHawk executable with the rail.redhawk_path application option before running the exec_gds2rh command.\n The generated macro models are saved in the current working directory or the one you specify in the configuration file.\n To run rail analysis with the generated macro models, set the rail.macro_models -value { cell1 path1 application option before running the analyze_rail command.\n For more information about how to run the RedHawk gds2rh utility, see the RedHawk User Manual Required Configuration File To generate a RedHawk macro model using the gds2rh utility, you must provide a configuration file that includes the following information: GDS II files Top design name Layer mapping file Power and ground net names 920 Working With Macro Models Feedback Specify one configuration file per memory.\n Make sure the configuration file contains the correct syntax for macro model generation.\n Otherwise, the tool issues an error message and terminates the model generation process.\n The following is an example of the configuration file: LEF_FILE {./lef/saed32sram.lef GDS_FILE./gds/SRAMLP2RW128x16.gds GDS_MAP_FILE./redhawk.gdslayermap OUTPUT_DIRECTORY SRAMLP2RW128x16_output USE_LEF_PINS_FOR_TRACING 1 VDD_NETS { VDD GND_NETS { VSS TOP_CELL SRAMLP2RW128x16 Examples The following example generates RedHawk macro models for the SRAMLP2RW128x16, SRAMLP2RW32x4, SRAMLP2RW64x32 and SRAMLP2RW64x8 memories: ## Specify the path to the RedHawk executable ## set_app_options -name rail.redhawk_path -value $env(REDHAWK_IMAGE)/bin ## Specify one configuration file per memory ## exec_gds2rh -config_file SRAMLP2RW128x16.config exec_gds2rh -config_file SRAMLP2RW32x4.config exec_gds2rh -config_file SRAMLP2RW64x32.config exec_gds2rh -config_file SRAMLP2RW64x8.config The following example runs top-level rail analysis with the macro models that are generated in the previous example: ## Run rail analysis at top level ## open_lib open_block top link_block ## Specify rail analysis setting ## create_taps set_app_options -name rail.tech_file -value test.tech set_app_options -name rail.lib_files -value test.lib ## Set macro model file ## set_app_options -name rail.macro_models \\ 921 Working With Macro Models Feedback -value { SRAMLP2RW128x16./data_ SRAMLP2RW128x16 SRAMLP2RW32x4./data_SRAMLP2RW32x4 SRAMLP2RW64x32./data_SRAMLP2RW64x32 SRAMLP2RW64x8./data_ SRAMLP2RW64x8 ## Run rail analysis ## analyze_rail -voltage_drop static -all_nets ## Check rail results ## open_rail_result gui_start"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Relative Placement Groups"}, {"role": "assistant", "content": "The following sections explain methods for analyzing your relative placement groups: Checking Relative Placement Groups Before Placement Analyzing the Placeability of a Relative Placement Group Reporting Relative Placement Constraint Violations Querying Relative Placement Groups Analyzing Relative Placement in the GUI"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I RedHawk Fusion and RedHawk-SC Fusion Data Flow"}, {"role": "assistant", "content": "The RedHawk/RedHawk-SC Fusion feature allows you to perform rail analysis during the implementation stage.\n With the required input files, the Fusion Compiler tool creates the RedHawk run script and the Global System Requirements (GSR) configuration file for invoking the RedHawk tool (or the RedHawk-SC Python script for invoking the RedHawk-SC tool) to run PG net extraction, power analysis, voltage drop analysis, and PG electromigration analysis.\n When analysis is complete, the Fusion Compiler tool generates analysis reports and maps using the results calculated by the RedHawk or RedHawk-SC tool.\n You can then check for hotspots graphically in the Fusion Compiler GUI.\n Error data and ASCII reports are also available to check for locations where limits are violated.\n Figure 199 illustrates the data flow when using RedHawk Fusion or RedHawk-SC Fusion to perform rail analysis in the Fusion Compiler environment.\n 872 An Overview for RedHawk Fusion and RedHawk-SC Fusion Feedback Figure 199 RedHawk Fusion and RedHawk-SC Fusion Data Flow"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating a Congestion Report"}, {"role": "assistant", "content": "To generate a congestion report, run the report_congestion command.\n fc_shell> report_congestion By default, the report_congestion command uses the congestion map stored with the block to report an overflow summary for the entire block.\n If a congestion map is not stored with the design, the command generates a congestion map by running global routing in congestion-map-only mode.\n Note: By default, only the hard congestion data is saved in the design library.\n To also save the soft congestion data, set the route.global.export_soft_congestion_maps application option to true before performing global routing.\n The command calculates the overflow as the sum of the overflow for each layer, ignoring any underflow.\n Example 26 shows the default report, which includes only the hard congestion data.\n Example 26 Default Global Route Congestion Report **************************************** Report : congestion Design : 564 Analyzing the Routing Results Feedback Version: Date : **************************************** Layer | overflow | # GRCs has Name | total | max | overflow (%) | max overflow Both Dirs | 39 | 8 | 14 ( 0.26%) | 1 H routing | 6 | 2 | 4 ( 0.07%) | 2 V routing | 33 | 8 | 10 ( 0.18%) | 1 In the default congestion report, \"H routing\" refers to results for horizontal routes only and \"V routing\" refers to results for vertical routes only.\n The total overflow value is the total number of wires in the block that do not have a corresponding track available.\n The max overflow value is the highest number of overutilized wires in a single global routing cell.\n The GRCs overflow value is the total number of overcongested global routing cells in the design.\n The GRCs max overflow value is the number of global routing cells that have the maximum overflow.\n Note: The overflow and global routing cell numbers reported by the report_congestion command might look slightly more optimistic than those reported by the route_global command because the tool rounds down the congestion information before saving it with the design.\n Use the following options to modify the default behavior: -rerun_global_router Use this option to rerun the global routing even if the block already has a congestion map.\n -boundary coordinates Use this option to restrict the reporting to a specific region of the block.\n -layers layers Use this option to restrict the reporting to specific layers.\n -mode global_route_cell_edge_based Use this option to report overflow information for each global routing cell.\n -include_soft_congestion_maps 565 Analyzing the Routing Results Feedback Use this option to output soft congestion reports, if they exist.\n A soft congestion report includes the demand from the soft nondefault spacing rules, as well as tool-generated soft rules.\n The command outputs a soft congestion report for each spacing weight level of the soft nondefault spacing rules used in the block.\n Each soft congestion report contains the sum of the hard and soft congestion with a weight level of at least the current soft level.\n See Also Global Routing Defining Minimum Wire Spacing Rules Generating a Congestion Map"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting the Rerouting Mode"}, {"role": "assistant", "content": "By default, Zroute can reroute nets as needed.\n You can prevent rerouting or limit rerouting to minor changes by setting the physical_status attribute on the nets.\n To freeze the net and prevent rerouting, set the attribute to locked To limit rerouting to minor changes, set the attribute to minor_change To allow Zroute to reroute the nets as needed, set the attribute to unrestricted For example, to prevent rerouting of the net1 net, which uses the default routing rule, use the following command: fc_shell> set_attribute -objects [get_nets net1] \\ -name physical_status -value locked"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Routing Rules for Clock Gates"}, {"role": "assistant", "content": "When you set constraints for physical implementation, you can set nondefault routing rules to define stricter (wider) wire width and spacing requirements for specific nets to improve timing and reduce crosstalk.\n To specify nondefault routing rules, use the create_routing_rule and set_routing_rule commands.\n 315 Clock Gating and Multibit Registers Feedback However, the set_routing_rule command does not allow annotation on the output nets of tool-inserted clock gates, because these nets do not exist until after the execution of the compile_fusion command.\n To specify nondefault routing rules that are applied automatically on nets connected to the output pins of tool-inserted clock gates, use the set_clock_gate_routing_rule command.\n These rules are applied on clock gates after the compile_fusion command.\n For example, create_routing_rule cg_rule...\n set_clock_gate_routing_rule -rule cg_rule...\n compile_fusion...\n report_routing_rules"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Concurrent Clock and Data Timing"}, {"role": "assistant", "content": "You analyze the timing effects of concurrent clock and data optimization by using the report_ccd_timing command.\n By default, it reports the setup and hold slack of the worst capture (D-slack) and launch (Q-slack) paths of the five most critical endpoint registers in the block, as shown in the following example report: fc_shell> report_ccd_timing...\n...\n Setup Hold D-slack Q-slack D-slack Q-slack Pin -0.567710 -0.173974 0.524202 0.167434 sink2/CP -0.175268 0.125309 0.168582 0.077625 sink3e/CP -0.173974 0.126836 0.167434 0.076277 sink3a/CP -0.033271 -0.175268 0.068856 0.168582 sink3d/CP 0.017364 -0.033271 -0.022138 0.068856 sink3c/CP 383 Implementing Clock Trees and Performing Post-CTS Optimization Feedback To control the type of report generated, use the -type option as follows: To report information for the paths in the fanin or fanout of the most critical endpoints, use the -type fanin or -type fanout option.\n To report information for the previous, current, and next path stages of the most critical endpoints, use the -type stage option.\n To report information for all the previous, current, and next path stages of the most critical endpoints, use the -type chain option.\n Figure 82 shows the previous, current, and next stages for an endpoint register.\n Figure 82 Previous, Current, and Next Path Stages By default, the command reports setup slacks at D and Q pins of registers.\n To report the hold slacks at these pins, use the -hold option.\n By default, the command analyzes timing paths across all active scenarios and reports the worst D and Q slacks across scenarios.\n To analyze and report the slack for specific scenarios use the -scenarios option.\n To report the information for specific path endpoints, specify the corresponding clock pins by using the -pins option.\n You can analyze the effects latency adjustments performed during concurrent clock and data optimization by increasing or decreasing the clock arrival of a specific endpoint using the -prepone or -postpone option with the -pins option as shown in the following example: fc_shell> report_ccd_timing -pins Reg11/clk -postpone 0.02 You can also see the effects of changing specific cell and net delay values by using the -annotate_cell_delay and -annotate_net_delay options, as shown in the following example: fc_shell> report_ccd_timing -annotate_cell_delay {{U1/a U1/y 0.2}} \\ -pin I2/d -type stage The delay values you specify with these options are used only for analyzing and reporting the concurrent clock and data timing.\n They are not saved and used during subsequent concurrent clock and data optimization.\n 384 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Boundary Cell Insertion Requirements"}, {"role": "assistant", "content": "To specify the boundary cell insertion requirements, use the set_boundary_cell_rules command.\n You use this command to specify the following requirements: The library cells to use for the boundary cells, as described in Specifying the Library Cells for Boundary Cell Insertion The rules used to place the boundary cells, as described in Specifying Boundary Cell Placement Rules The naming convention used for the inserted cells, as described in Specifying the Naming Convention for Boundary Cells The creation of routing guides to honor the metal cut allowed and forbidden preferred grid extension rules, as described in Creating Routing Guides During Boundary Cell Insertion 593 Performing Boundary Cell Insertion Feedback Note: This feature is supported only by the compile_boundary_cells command; it is not supported by the compile_targeted_boundary_cells command.\n The creation of placement blockages to honor the minimum jog and minimum separation rules, as described in Creating Placement Blockages During Boundary Cell Insertion Note: This feature is supported only by the compile_boundary_cells command; it is not supported by the compile_targeted_boundary_cells command.\n Note: The settings specified by the set_boundary_cell_rules command are saved in the design library.\n See Also Reporting the Boundary Cell Insertion Requirements"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running the Hierarchical Synthesis Flow Using ETMs"}, {"role": "assistant", "content": "To run hierarchical synthesis flow, follow the steps described in Figure 190.\n In contrast to the feasibility flow, the hierarchical synthesis flow uses the following block-level information generated post place and route: Floorplanning information to generate the ETM in step 3 Power intent and test model (CTL) information for top-level synthesis in step 5 827 Performing Hierarchical Synthesis Using ETMs Feedback Figure 190 Hierarchical Synthesis Flow 1.\n Synthesize the block in the front-end tool compile_fusion RTL Block UPF (back end) Block CTL (back end) UPF SDC, floorplan Design (ndm) 3.\n Create an ETM in the back-end tool extract_model Block_ETM (ndm) 4.\n Synthesize the top-level design in the front-end tool compile_fusion RTL Top-level UPF SDC, floorplan SDC Netlist UPF '' CTL Design (frame) 2.\n Implement the block design in the back-end tool SPEF (back end or StarRC) 828 Performing Prechecks for Hierarchical Synthesis Flows Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Track-Based Metal Fill Insertion"}, {"role": "assistant", "content": "Track-based metal fill insertion inserts metal and via fill by using a runset derived from the attributes and rules in the technology file to create fill shapes aligned to tracks.\n It does not use the runset specified by the signoff.create_metal_fill.runset application option.\n Track-based metal fill insertion offers the following benefits as compared to pattern-based metal fill insertion: Higher density Better control of density Well-balanced mask distribution for double-patterning layers To perform track-based metal fill insertion, set the -track_fill option of the signoff_create_metal_fill command to a value other than off.\n Track-based metal fill insertion supports three modes: Sparse This is the default mode.\n In this mode, track-based metal fill insertion skips one track between signal shapes and fill shapes.\n Dense To enable this mode, use the -fill_all_tracks true option.\n In this mode, track- based metal fill insertion does not skip tracks between signal shapes and fill shapes.\n Note: If your block uses double-patterning technology, using this option increases runtime if the block is not precolored.\n Mixed To use sparse mode for some layers and dense mode for other layers, you must set the appropriate parameters in a parameter file, as described in Using an IC Validator Parameter File During track-based metal fill insertion, the signoff_create_metal_fill command performs the following tasks: 1.\n Loads the block into the IC Validator tool, as described in Reading Blocks for Signoff Metal Fill Insertion 2.\n Removes existing metal and via fill By default, the command removes the metal and via fill from the entire block.\n For information about performing incremental metal fill insertion, see Incremental Metal Fill Insertion 716 Inserting Metal Fill With IC Validator In-Design Feedback 3.\n Inserts metal and via fill in the empty regions By default, the command uses the design rules defined in the technology file to insert fill shapes on-track on all metal and via layers for the entire block.\n The fill shapes have a length of 5 microns and a width equal to the defaultWidth attribute defined for the layer in the technology file.\n You can modify the default behavior by using Application options set before running the signoff_create_metal_fill command: signoff.create_metal_fill.apply_nondefault_rules To enable the use of nondefault spacing rules in addition to the spacing rules defined in the technology file, set this application option to true Command options used with the signoff_create_metal_fill command: -track_fill foundry_node To enable foundry-specific design rules, use the appropriate foundry keyword with the -track_fill option.\n To see the list of supported keywords, use the following command: fc_shell> signoff_create_metal_fill -track_fill list -select_layers To restrict the layers on which to insert metal fill, use this option, as described in Specifying the Layers for Metal Fill Insertion -coordinates and -excluded_coordinates To restrict the regions on which to insert metal fill, use these options, as described in Specifying the Regions for Metal Fill Insertion Parameters set in the IC Validator parameter file: _fill_width _min_fill_length, and _max_fill_length To change the size of the fill shapes, set these parameters, as described in Using an IC Validator Parameter File 4.\n Removes floating via fill from the specified via layers and from the via layers associated with the specified metal layers Floating via fill is via fill that does not have both an upper and lower metal enclosure.\n 717 Inserting Metal Fill With IC Validator In-Design Feedback 5.\n (Optional) Trims the metal fill for each layer to try to meet the maximum density threshold defined by the signoff.create_metal_fill.max_density_threshold application option The metal fill is trimmed only for those layers specified in the application option.\n If you do not set this option, the metal fill is not trimmed.\n 6.\n Saves the fill data in the design view By default, The IC Validator tool assigns a data type of 0 to the fill shapes To use different data type values, set the _fill_datatype and via _fill_datatype parameters in the IC Validator parameter file.\n The IC Validator tool does not set mask constraints on the fill shapes If your block uses double-patterning technology, use the -output_colored_fill true option to set mask constraints on the fill shapes.\n If your block uses double-patterning technology, use the -output_colored_fill option to set mask constraints on the fill shapes.\n When you use this option, the IC Validator tool assigns a data type of 235 for fill shapes with mask_one mask constraint and 236 for fill shapes with a mask_two mask constraint.\n To assign different data types for the colored fill, set the following parameters in the IC Validator parameter file: _fill_datatype_color1 via _fill_datatype_color1 _fill_datatype_color2, and via _fill_datatype_color2 The IC Validator tool does not write exclude layers If your foundry uses exclude layers, define the data types for the exclude layers by setting the _exclude_layer_datatype parameters in the IC Validator parameter file.\n The IC Validator tool outputs the exclude layers that have defined data types.\n For information about using an IC Validator parameter file, see Using an IC Validator Parameter File 7.\n Writes the result files to the run directory In addition to the standard output files generated by signoff metal fill insertion, when you perform track-based metal fill insertion, you can output detailed density and density gradient reports by using the -report_density option.\n When you enable this option, the signoff_create_metal_fill command writes the following report files: prefix _color_balance_and_density_report.txt prefix _fill_density_gradient_report.txt 718 Inserting Metal Fill With IC Validator In-Design Feedback You can specify either on (in which case the tool uses \"track_fill\" as the prefix) or the prefix string.\n For example, to perform track-based metal fill insertion and use a prefix of my_prefix for the detailed density and density gradient reports, use the following command: fc_shell> signoff_create_metal_fill -track_fill true \\ -report_density my_prefix For information about the generated result files, see Signoff Metal Fill Result Files See Also Timing-Driven Metal Fill Insertion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mask Constraints"}, {"role": "assistant", "content": "Mask constraints indicate the mask requirements for the metal shapes of the physical pins and nets in a block that uses multiple-patterning technology.\n These mask requirements drive placement and routing to ensure that the resulting layout is multiple-patterning compliant.\n Note: Mask constraints are used only for the precolored flow; they are not necessary in the uncolored flow.\n You can set mask constraints on timing-critical nets (net shapes, routing rules, and routing blockages) and vias.\n For nets, the mask constraint is defined in the mask_constraint attribute.\n For vias, the mask constraints are defined in the lower_mask upper_mask, and cut_mask attributes.\n Table 1 shows the supported values for these attributes.\n Table 1 Mask Constraint Values Attribute value Description same_mask This constraint means that the mask color is not yet been determined.\n Shapes with this attribute must be at least the multiple-patterning minimum spacing distance from any other colored metal shape.\n 43 Working With the 3DIC Compiler User Interfaces Feedback Table 1 Mask Constraint Values (Continued) Attribute value Description mask_one This constraint means that the shape has the mask1 color.\n Shapes with this attribute must be at least the multiple-patterning minimum spacing distance from other mask1-colored metal shapes.\n mask_two This constraint means that the shape has the mask2 color.\n Shapes with this attribute must be at least the multiple-patterning minimum spacing distance from other mask2-colored metal shapes.\n mask_three This constraint means that the shape has the mask3 color.\n Shapes with this attribute must be at least the multiple-patterning minimum spacing distance from other mask3-colored metal shapes.\n any_mask This constraint means that the shape is not colored.\n Shapes with this attribute must be at least the standard minimum spacing distance from other metal shapes; the multiple-patterning minimum spacing rules do not apply to these shapes."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Summary of Relative Placement Commands"}, {"role": "assistant", "content": "Table 63 shows some of the key commands used to perform relative placement.\n Table 63 Relative Placement Commands Command Described in section create_rp_group and remove_rp_groups Creating Relative Placement Groups add_to_rp_group and remove_from_rp_group Adding Objects to a Group 815 Summary of Relative Placement Commands Feedback Table 63 Relative Placement Commands (Continued) Command Described in section set_rp_group_options and remove_rp_group_options Specifying Options for Relative Placement Groups modify_rp_groups Changing the Structures of Relative Placement Groups legalize_rp_groups Legalizing Relative Placement Groups in a Placed Design check_rp_constraints Checking Relative Placement Groups Before Placement report_rp_groups Reporting Relative Placement Constraint Violations get_rp_groups Querying Relative Placement Groups write_rp_groups Saving Relative Placement Information 816 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preserving Ports of Existing Hierarchies"}, {"role": "assistant", "content": "During optimization and clock tree synthesis, the tool can create new ports on existing hierarchical blocks.\n To prevent the tool from doing so, use the set_freeze_ports command and set the freeze_clock_port attribute to true on the corresponding cell instance.\n You can prevent the tool from adding clock ports, data ports, or both by using the -clock -data, or -all option.\n For example, to prevent the tool from creating additional clock ports on the MBX22 cell instance, use the following command: fc_shell> set_freeze_ports -clock [get_cells MBX22] true To report the freeze-port settings, use the report_freeze_ports command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimization"}, {"role": "assistant", "content": "To improve timing QoR, the tool can use nondefault routing rules on timing critical nets during preroute optimization.\n In addition, the tool can guide the router to honor these nondefault rule assignments as soft constraints.\n To enable this capability for the clock_opt command, set the clock_opt.flow.optimize_ndr application option to true fc_shell> set_app_options -name clock_opt.flow.optimize_ndr \\ -value true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Wire Widening"}, {"role": "assistant", "content": "After you have performed detail routing, redundant via insertion, and wire spreading, you can perform wire widening to increase the average width of the wires, which reduces the critical area open faults and therefore improves yield.\n To perform wire widening, use the widen_zrt_wires comandcomandswiden_zrt_wireswire widening widen_wires command.\n By default, the widen_wires command widens all wires in the block to 1.5 times their original width.\n For more flexibility, you can use the -widen_widths_by_layer_name option to define up to five possible wire widths to use for each layer.\n For example, to define possible wire widths of 0.07 and 0.06 microns for the M1 layer; wire widths of 0.08 and 0.07 microns for the M2 layer; and 1.5 times the existing wire width for all other layers, enter the following command: fc_shell> widen_wires \\ -widen_widths_by_layer_name {{M1 0.07 0.06} {M2 0.08 0.07}} When you perform wire widening, the spacing between neighboring wires is decreased, which can reduce the improvement in critical area shorts gained from wire spreading.\n You can control the tradeoff between wire spreading and wire widening by using the 634 Inserting Metal-Insulator-Metal Capacitors Feedback -spreading_widening_relative_weight option.\n By default, wire spreading and wire widening are given equal priority.\n To weight the priority toward wire widening and reduced critical area open faults, set this option to a value between 0.0 and 0.5.\n To weight the priority toward wire spreading and reduced critical area short faults, set this option to a value between 0.5 and 1.0.\n After widening, the widen_wires command performs detail routing iterations to fix any DRC violations caused as a result of widening.\n Note that the widened wires do not trigger fat wire spacing rules.\n When you widen the wires, it changes the timing of your block.\n Wire widening has a timing-preservation mode that allows you to perform wire widening without affecting the block timing.\n To enable timing-preservation mode for wire widening, define the timing preservation constraints by using the following options with the widen_wires command: -timing_preserve_setup_slack_threshold threshold -timing_preserve_hold_slack_threshold threshold -timing_preserve_nets nets The threshold values are floating-point numbers in library units.\n Wire widening is not performed on nets with slack less than the specified values or the nets specified in the -timing_preserve_nets option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a Hard Placement Blockage"}, {"role": "assistant", "content": "To define a hard placement blockage, specify the boundary and optionally a name for the placement blockage.\n For example, to create a hard placement blockage in the area enclosed by a rectangle with corners at (10, 20) and (100, 200), use the following command: create_placement_blockage -boundary {10 20 100 200} Note: Hard placement blockages are honored during placement, legalization, optimization, and clock tree synthesis.\n 140 Specifying Physical Constraints for Placement and Legalization Feedback Hard placement blockages can also be defined in the DEF as shown in Example 13 Example 13 Placement Blockages in DEF BLOCKAGES 2 ; - PLACEMENT RECT ( 0 327600 ) ( 652740 327660 ) ; - PLACEMENT RECT ( 0 327600 ) ( 652740 327660 ) ; END BLOCKAGES"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Applying Required Settings for Improving Specific QoR Metrics"}, {"role": "assistant", "content": "To apply tool settings required for improving specific QoR metrics, use the set_qor_strategy -stage synthesis command.\n To specify the QoR metrics to improve, use the -metric option.\n To optimize the block for the best Timing, use the timing setting Leakage power and timing, use the leakage_power setting Total power and timing, use the total_power setting.\n To further improve total power, at the expense of runtime, you can use the -mode extreme_power option, with the -metric total_power option.\n To specify a target mode for the design flow, use the -mode option.\n The supported values for this option are: balanced, which is the default mode that optimizes the design for the target metrics specified with the -metric option.\n early_design, which is suitable for the early stages of the design flow, when the emphasis is on short turnaround time for prototyping purposes.\n With this mode, you can reduce runtime at the expense of QoR.\n extreme_power, which is recommended for further improvement of total power at the expense of runtime.\n This mode should only be specified along with the -metric leakage_power or -metric total_power option.\n If you specify this mode with the -metric timing option, the tool ignores the specified mode setting and uses the balanced mode.\n 210 Applying Mega-Switch Command Settings Feedback When you use this command, the tool applies application option settings that affect synthesis, optimization, placement, legalization, clock tree synthesis, routing, extraction, and timing analysis.\n To review the required setting, use one of the following methods: Generate a Tcl script that contains the settings by using the -output option Report the settings by using the -report_only option Report only the settings that are not set to their required values by using the -diff_only option 211 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Aligning Leaf Cells Within a Column"}, {"role": "assistant", "content": "You can align the leaf cells in a column of a relative placement group by using the following alignment methods: Left alignment (default) Right alignment Pin alignment Controlling the cell alignment can improve the timing and routability of your design."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Incremental Global Routing"}, {"role": "assistant", "content": "By default, the global router ignores existing global routes.\n To perform incremental global routing by reusing the existing global routes, use the -reuse_existing_global_route true option when you run global routing.\n Note that this option affects only the global router and not the net delay calculation that occurs before timing-driven or crosstalk-driven global routing."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Selection of Self-Gating Objects"}, {"role": "assistant", "content": "To override the default behavior of selecting self-gating objects, use the set_self_gating_objects command with the following options: -force object_list Directs the tool to perform self-gating on the listed objects, even if the objects do not pass internal checks.\n -exclude object_list Prevents the tool from self-gating the listed objects, even if they pass the internal checks.\n -include object_list Specifies that the listed objects should be self-gated according to the insertion rules set by the set_clock_gating_options command.\n This is the default setting for all registers in the design.\n -clear object_list Removes all inclusion, exclusion, and forced criteria on the listed objects.\n -reset Removes all configurations previously set by the set_self_gating_objects command.\n -tree_type combinational_logic_type Specifies the type of combinational cells to use.\n Valid arguments are xor (the default), or nand, and auto.\n When auto is specified, the tool automatically decides which comparison logic to use based on switching activity information.\n This might help to reduce the area while optimizing power.\n You must use this option with the -include or -force options.\n To report self-gating objects, use the report_self_gating_objects command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Hierarchical Relative Placement for Compression"}, {"role": "assistant", "content": "By default, construction for relative placement aligns cells from their bottom-left corner.\n Compression removes empty space in rows to create a more compact structure.\n The columns are no longer aligned, and utilization is higher in the area of the compressed cells.\n Figure 171 shows the same cells aligned with and without compression.\n To create the compressed structure shown in this example, first create three relative placement groups, rp1, rp2, and rp3, that contains a row of leaf cells.\n Then create a group, rp4, that contains all these groups.\n Example 45 shows the commands used to build the compressed structure.\n Figure 171 Bottom-Left Alignment Construction and Compression rpA rpB rpC Without compression With compression U3 U6 U2 U5 U1 U4 U1 U2 U3 U6 U5 U4 rp3 rp2 rp1 rp4 Example 45 Compression With Hierarchical Relative Placement create_rp_group -name rp1 -columns 2 -rows 1 add_to_rp_group rp1 -cells U1 -column 0 -row 0 add_to_rp_group rp1 -cells U4 -column 1 -row 0 create_rp_group -name rp2 -columns 2 -rows 1 add_to_rp_group rp2 -cells U2 -column 0 -row 0 add_to_rp_group rp2 -cells U5 -column 1 -row 0 create_rp_group -name rp3 -columns 2 -rows 1 add_to_rp_group rp3 -cells U3 -column 0 -row 0 add_to_rp_group rp3 -cells U6 -column 1 -row 0 790 Adding Objects to a Group Feedback create_rp_group -name rp4 -columns 1 -rows 3 add_to_rp_group rp4 -rp_group rp1 -column 0 -row 0 add_to_rp_group rp4 -rp_group rp2 -column 0 -row 1 add_to_rp_group rp4 -rp_group rp3 -column 0 -row 2 Alternatively, you can apply compression in the horizontal direction by using the -tiling_type option with the set_rp_group_options command, as described in Controlling the Tiling Within Relative Placement Groups"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Aligning by Pin Location"}, {"role": "assistant", "content": "To align a group by pin location, use the -alignment pin and -pin_name options with the set_rp_group_options command.\n The tool looks for the specified alignment pin in each cell in the column.\n If the alignment pin exists in a cell, the cell is aligned by using the pin location.\n If the specified alignment pin does not exist in a cell, the cell is aligned by the left edge, and the tool issues an information message.\n If the specified alignment pin does not exist in any cell in the column, the Fusion Compiler tool issues a warning message.\n The script in Example 46 creates a relative placement group rp1, adds cells to it, and specifies that the cells are aligned by pin A.\n Example 46 Definition for Relative Placement Group Aligned by Pins create_rp_group -name rp1 -columns 1 -rows 4 set_rp_group_options -alignment pin -pin_name A add_to_rp_group rp1 -cells U1 -column 0 -row 0 add_to_rp_group rp1 -cells U2 -column 0 -row 1 add_to_rp_group rp1 -cells U3 -column 0 -row 2 add_to_rp_group rp1 -cells U4 -column 0 -row 3 When aligning by pins, the tool tries different orientations for the cells and selects the orientation for each cell that gives the minimum column width.\n For example, changing the orientation of cell U2, as shown in Figure 177, reduces the width of column 0.\n However, if you specify an orientation when adding a cell to a relative placement group by using the -cells and -orientation options with the add_to_rp_group command, the tool honors the orientation you specify.\n 797 Specifying Options for Relative Placement Groups Feedback Figure 177 Minimizing the Column Width of a Relative Placement Group Aligned by Pins U4 U3 U2 U1 row 3 row 2 row 1 row 0 column 0 Pin A U4 U3 U2 U1 row 3 row 2 row 1 row 0 column 0 When you specify an alignment pin for a group, the pin applies to all cells in the group.\n You can override the group alignment pin for specific cells in the group by specifying the -pin_name option when you use the add_to_rp_group command to add the cells to the group.\n The script in Example 47 defines relative placement group rp2, and specified pin A as the group alignment pin.\n However, instances I5 and I6 use pin B as their alignment pin, rather than the group alignment pin.\n The resulting structure is shown in Figure 178 Example 47 Definition for Aligning a Group and Leaf Cells by Pins create_rp_group -name rp2 -columns 1 -rows 6 set_rp_group_options rp2 -alignment pin -pin_name A add_to_rp_group rp2 -cells I3 -column 0 -row 0 add_to_rp_group rp2 -cells I4 -column 0 -row 1 add_to_rp_group rp2 -cells I5 -column 0 -row 2 -pin_name B add_to_rp_group rp2 -cells I6 -column 0 -row 3 -pin_name B add_to_rp_group rp2 -cells I7 -column 0 -row 4 add_to_rp_group rp2 -cells I8 -column 0 -row 5 798 Specifying Options for Relative Placement Groups Feedback Figure 178 Relative Placement Group Aligned by Different Pins I5 I4 I3 row 3 row 2 row 1 row 0 col 0 I6 I7 I8 row 4 row 5 Pin A Pin B"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using ETMs"}, {"role": "assistant", "content": "To minimize the number of iterations and obtain optimal results, you can perform feasibility analysis before running hierarchical synthesis, as shown in Figure 189 The hierarchical synthesis feasibility flow uses the following block-level information generated post compile_fusion Floorplanning information to generate the ETM in step 2 Power intent and test model (CTL) information for top-level synthesis in step 4 825 Performing Hierarchical Synthesis Using ETMs Feedback Figure 189 Hierarchical Synthesis Feasibility Analysis 1.\n Synthesize the block in the front- end tool compile_fusion RTL Block UPF (front end) Block CTL (front end) UPF SDC, floorplan SDC Design (ndm) Netlist UPF CTL SPEF Design (frame) 2.\n Create an ETM in the front-end tool extract_model Block_ETM (ndm) 3.\n Synthesize the top-level design in the front-end tool compile_fusion RTL Top-level UPF SDC, floorplan 826 Performing Hierarchical Synthesis Using ETMs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Linking to Abstract Views at the Top-Level"}, {"role": "assistant", "content": "For a top-level design to link to an abstract view of a lower-level block, the design library containing the abstract view of the lower-level block must be one of the reference libraries of the top level.\n For example, assume you have a top-level design named TOP with two lower-level blocks named BLK1 and BLK2, as shown in the following figure.\n 838 Changing the Block From Abstract to Design View Feedback Figure 193 Top-Level Design With Instantiated Blocks BLK1 TOP BLK2 To link to the abstracts of the BLK1 and BLK2 blocks, the design libraries containing the abstract views of these block must be reference libraries of the TOP design.\n If not, you can add it to the reference libraries of the TOP design by using the set_ref_libs -add command as shown in the following example: current_block TOP set_ref_libs -add../BLK1/BLK1.nib set_ref_libs -add../BLK2/BLK2.nib To report the reference libraries for the current design, use the report_ref_libs command.\n When you link a top-level design, if an abstract view for a lower-level block is available, the tool links to that abstract view by default.\n The default precedence of the different views used when linking lower-level blocks is as follows: 1.\n Abstract view 2.\n Design view 3.\n Frame view 4.\n Outline view"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Clock Tree QoR Reports"}, {"role": "assistant", "content": "To generate clock tree QoR reports, use the report_clock_qor command.\n The report_clock_qor command can generate the following types of reports: Summary By default, this command reports a summary of the clock tree QoR, which includes the latency, skew, DRC violations, area, and buffer count.\n Latency 432 Analyzing the Clock Tree Results Feedback To report the longest and shortest path for each clock, use the -type latency option.\n DRC violators To report the maximum transition and capacitance constraint violators, use the -type drc_violators option.\n Robustness To report the robustness of each sink, use the -type robustness option.\n The robustness of a sink is the ratio between its latency for the corner for which the report is being generated and its latency for the corner specified by the -robustness_corner option.\n The mode use for both latency values is the mode for which the report is being generated.\n When you use the -type robustness option, you must specify a corresponding robustness corner by using the -robustness_corner option.\n Clock-balance groups QoR To report a clock QoR summary for each clock-balance group, use the -type balance_groups option.\n It also reports the clock latency offset values specified with the -offset_latencies option of the create_clock_balance_group command and the actual latency offset values.\n Local skew To report the QoR summary and the worst local skew for each clock or skew group, use the -type local_skew option.\n It also reports the five largest and five smallest local skew values and the corresponding endpoints.\n Clock tree power To report a summary of the leakage, internal, sink, net switching, dynamic, and total power per clock per scenario, use the -type power option.\n If the power.clock_network_include_clock_sink_pin_power application option is set to off, the sink power is not reported.\n When you use the -type option, you can generate the output as a comma separated values (CSV) file by using the -csv option and specifying the output file name using the -output option.\n The report_clock_qor command can also generate the following types of histograms: Latency histogram To report the latency of each sink in a histogram format, use the -histogram_type latency option.\n Transition histogram 433 Analyzing the Clock Tree Results Feedback To report the transition time of each sink in a histogram format, use the -histogram_type transition option.\n Capacitance histogram To report the capacitance of each sink in a histogram format, use the -histogram_type capacitance option.\n Local skew histogram To report the local skew in a histogram, use the -histogram_type local_skew option.\n Robustness histogram To report the robustness of each sink, with respect to a robustness corner specified by using the -robustness_corner option, in a histogram format, use the -histogram_type robustness option.\n Wire delay fraction histogram To report the ratio between the wire delay and the total delay for each logic stage of the clock tree in a histogram format, use the -histogram_type wire_delay_fraction option.\n By default, the tool generates a report for all clock trees in all active modes and corners in all active scenarios.\n You can limit the report to specific Portions of a clock network by using the -from -to, and - through options Clock trees by using the -clock option Skew groups by using the -skew_group option Modes by using the -mode option Corners by using the -corner option Scenarios by using the -scenario option If you use the -scenario option, you cannot use the -mode and -corner options.\n 434 Analyzing the Clock Tree Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Place and Route Design Flow Overview"}, {"role": "assistant", "content": "Figure 2 shows the basic place and route design flow using the Fusion Compiler tool.\n 35 Place and Route Design Flow Overview Feedback Figure 2 Fusion Compiler Place and Route Flow To run the Fusion Compiler place and route flow, 1.\n Set up the library data, preparingtiming librarieslogic libraries libraries and prepare the design data, as described in Preparing the Design 2.\n Perform design planning and power planning.\n When you perform design planning and power planning, you create a floorplan to determine the size of the design, create the boundary and core area, create site rows for the placement of standard cells, set up the I/O pads, and create a power plan.\n For more information about design planning and power planning, see the Fusion Compiler Design Planning User Guide 3.\n Perform placement and optimization.\n To perform placement and optimization, use the place_opt command.\n The place_opt command placement and optimization addresses and resolves timing closure for your design.\n This iterative process uses enhanced placement and synthesis technologies to generate 36 Fusion Compiler Concepts Feedback legalized placement for leaf cells and an optimized design.\n You can supplement this functionality by optimizing for power, recovering area for placement, minimizing congestion, and minimizing timing and design rule violations.\n 4.\n Perform clock tree synthesis and optimization.\n To perform clock tree synthesis and optimization, use the clock_opt command.\n Fusion Compiler clock tree synthesis and embedded optimization solve complicated clock tree synthesis problems, such as blockage avoidance and the correlation between preroute and postroute data.\n Clock tree optimization improves both clock skew and clock insertion delay by performing buffer sizing, buffer relocation, gate sizing, gate relocation, level adjustment, reconfiguration, delay insertion, dummy load insertion, and balancing of interclock delays.\n For more information about clock tree synthesis and optimization, see Clock Tree Synthesis 5.\n Perform routing and postroute optimization, as described in Routing and Postroute Optimization The Fusion Compiler tool uses Zroute to perform global routing, track assignment, detail routing, topological optimization, and engineering change order (ECO) routing.\n To perform postroute optimization, use the route_opt command.\n For most designs, the default postroute optimization setup produces optimal results.\n If necessary, you can supplement this functionality by optimizing routing patterns and reducing crosstalk or by customizing the routing and postroute optimization functions for special needs.\n 6.\n Perform chip finishing and design for manufacturing tasks, as described in Chip Finishing and Design for Manufacturing The Fusion Compiler tool provides chip finishing and design for manufacturing and design for yield capabilities that you can apply throughout the various stages of the design flow to address process design issues encountered during chip manufacturing.\n 7.\n Save the design."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Perimeter Constraint Objects"}, {"role": "assistant", "content": "The derive_perimeter_constraint_objects command places the inserted constraint objects in an group named PC_Edit_Group_ blockname.\n Each time you run the derive_perimeter_constraint_objects command, it creates a unique group.\n To remove a group of constraint objects, use the following command: fc_shell> remove_objects [get_attribute \\ [get_edit_groups PC__Edit_Group_ blockname ] objects]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Abstract Views"}, {"role": "assistant", "content": "In the Fusion Compiler tool, you can create an abstract view for a block at various stages of the design flow, such as, after synthesis, placement, optimization, clock tree synthesis, routing, and so on.\n Before you create the abstract view, ensure that the scenarios needed at the top level have been created and are active.\n To create an abstract view for top-level closure, use the create_abstract command.\n To control the amount of timing information in the abstract view, use the -timing_level option with the following settings: To create an abstract that contains only the boundary cells (one level of logic) connected to each boundary port, use the boundary setting.\n Such an abstract also contains feedthrough data paths, feedthrough combinational clock paths, and internal clock logic driving output ports.\n You can use this type of abstract to fix DRC violations at the top level.\n To create a compact abstract that contains the timing information for only the critical setup and hold timings paths of the interface logic, use the compact setting.\n This is the default setting, and is preferred for top-level design closure.\n To create an abstract with timing information for all the interface logic, use the full_interface setting.\n A full_interface abstract might be required for multiply-instantiated blocks (MIBs) when the constraints for MIB instances are different at the top-level.\n To create the abstracts for lower-level blocks of the current block, use one of the following methods: Create abstracts for specific lower-level blocks by using the -blocks option and specify the names of the blocks.\n Create abstracts for all lower-level blocks by using the -all_blocks option.\n When you use the -blocks or -all_blocks option, if a specified block has an abstract view, by default, the tool does not re-create it.\n To force the tool to re-create the abstract, use the -force_recreate option.\n To include specific nets, ports, hierarchical pins, or leaf pins in a placement or timing abstract, use the -include_objects option.\n 833 Creating Abstract Views Feedback To create a read-only abstract, use the -read_only option.\n By default, the tool creates an editable abstract that you can modify in the context of a parent block.\n However, the tool makes the design view of the block read-only, preventing any changes from being made to the block.\n When you create the abstract view as read-only, the design view of the block is editable, and you can make changes to it.\n To flatten the physical hierarchy and retain only the relevant logic of the lower-level blocks, use the -preserve_block_instances false option.\n To specify if the abstract is going to be used for design planning or top-level implementation, use the -target_use planning or -target_use implementation option.\n Based on the intended usage, the tool applies appropriate internal settings to the abstract.\n To specify host options for distributed processing, use -host_options option and specify the appropriate settings.\n You can use this option to reduce the runtime when you create more than one abstract view by using the -blocks or -all_blocks option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Signal Nets"}, {"role": "assistant", "content": "Before you route the signal nets, all clock nets must be routed without violations.\n You can route the signal nets by using one of the following methods: Use the task-specific commands to perform the standalone routing tasks.\n To perform global routing, use the route_global command.\n For details see, Global Routing To perform track assignment, use the route_track command.\n For details see, Track Assignment To perform detail routing, use the route_detail command.\n For details see, Detail Routing When you run a standalone routing command, such as route_global or route_detail, Zroute reads in the block at the beginning of each routing command and updates the block at the end of each command.\n The router does not check the input data.\n For example, if the track assignment step is skipped and you run detail routing directly, Zroute might generate bad routing results.\n If you need to customize your routing flow or you need to run a large block step-by- step, you might want to use the standalone routing commands instead of automatic routing.\n Use automatic routing (the route_auto command).\n The route_auto basic command performs global routing, track assignment, and detail routing.\n For details, see Routing Signal Nets by Using Automatic Routing When you run route_auto, Zroute reads the block before starting routing and updates the block when all routing steps are done.\n If you stop automatic routing before it performs detail routing, Zroute checks the input data when you restart routing with this command.\n Use the route_auto command when you run routing to verify convergence, congestion, and design rule quality-of-results (QoR).\n You also might want to use route_auto if congestion QoR is your main goal, rather than timing QoR.\n Zroute can insert redundant vias during signal routing.\n For information about this capability, see Inserting Redundant Vias on Signal Nets 525 Routing Signal Nets Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Group Repeater"}, {"role": "assistant", "content": "The group repeater query commands provide improved ease of use for interconnect repeater while planning.\n The group repeater query Provides capability to query group repeater path info Supports cross-session query operation Supports query operation before group repeater placement To query the group repeater during planning, you must be familiar with the following key information Cells of a repeater group Cutline of a repeater group Group virtual connection If a group has either driver group or path drivers, then it is categorized as group virtual connection.\n Cell connection between groups depend on cell order in a group.\n The following topics describe the steps in this flow Performing Auto Grouping Flow Performing Manual Grouping Flow Cell Input Mode 989 Querying Group Repeater Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Cells, and Voltage Areas"}, {"role": "assistant", "content": "To control the addition of new cells to Modules or hierarchical cells, use the set_allow_new_cells command Voltage areas, use the -allow_new_cells option with the create_voltage_area_rule command You can use these settings to prevent new cells from being added to the top-level hierarchies and voltage areas of abutted designs.\n These settings are saved in the design library and honored by the tool throughout the implementation flow.\n The following example prevents new cells from being added to the top-level module: fc_shell> set_allow_new_cells \\ [get_attribute [current_block] top_module] false The following example prevents new cells from being added to the M1 module: fc_shell> set_allow_new_cells [get_modules M1] false 178 Specifying Settings for Preroute Optimization Feedback The following example prevents new cells from being added to the U22 hierarchical cell: fc_shell> set_allow_new_cells [get_cells U22] false The following example prevents new cells from being added to the VA1 voltage area: fc_shell> create_voltage_area_rule -name VA1_rule \\ -allow_new_cells false -voltage_areas VA1"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Modifying Routed Nets"}, {"role": "assistant", "content": "You can modify routed nets in the GUI by using the following tools: Area Push tool To activate the Area Push tool, click the button on the Edit toolbar or choose Edit > Area Push.\n You can use the Area Push tool to move unfixed objects away from a rectangular area on a layer while maintaining their physical connections.\n You select the layer and control whether the tool complies with nondefault routing rules.\n The tool supports both interactive and batch push operations.\n Spread Wire tool To activate the Spread Wires tool, click the button on the Edit toolbar or choose Edit > Spread Wires.\n You can use the Spread Wires tool to move selected, unfixed wires evenly between two points on a layer while maintaining their physical connections.\n You control whether the tool spreads the wires by layer and whether the tool complies with nondefault routing rules.\n Stretch Connected tool To activate the Stretch Connected tool, click the button or choose Edit > Stretch Connected.\n You can use the Stretch Connected tool to move and stretch unfixed wire shapes while optionally maintaining their physical connections.\n Quick Connect tool To activate the Quick Connect tool, click the button or choose Edit > Route Utilities > Quick Connect.\n You can use the Quick Connect tool to quickly connect wires to pin shapes, port shapes, terminals, or other wires.\n 561 Routing Nets in the GUI Feedback If you need assistance while using these tools, click to open a Help page in the man page viewer.\n 562 Cleaning Up Routed Nets Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Making ECO Changes Using the eco_netlist Command"}, {"role": "assistant", "content": "You can make ECO changes to a block by using the eco_netlist command.\n If you are using the freeze silicon ECO flow, enable ECO changes in the freeze silicon mode by setting the design.eco_freeze_silicon_mode application option to true before you run the eco_netlist command.\n When you use the eco_netlist command, use one of the following two methods to make the ECO changes: Specify a golden Verilog netlist that includes the ECO changes by using the -by_verilog_file option Specify a golden block that includes the ECO changes by using the -block option When you use the -block option, by default, The tool assumes the golden block is in the current design library.\n To specify a different design library, use the -golden_lib option.\n The tool makes the ECO changes to the current design.\n To make the ECO changes to a different design, use the -working_block option.\n To specify the design library that contains the design specified by the -working_block option, use the -working_lib option.\n The tool compares the working design to the input Verilog netlist or the golden design and generates a change file containing netlist editing Tcl commands that implements the functional changes.\n You must specify the name of the output file by using the -write_changes option.\n By default, the tool ignores the following: Differences in the physical-only cells To consider the differences in the physical-only cells, use the -compare_physical_only_cells option.\n Timing ECO changes, such as cells that are resized or repeaters that are added or removed.\n To consider the timing ECO changes, in addition to the functional ECO changes, use the -extract_timing_eco_changes option.\n Differences in power and ground objects.\n 961 Making ECO Changes Using Netlist Editing Commands Feedback To make the ECO changes to the working design, source the change file that the eco_netlist command generates, as shown in the following example: fc_shell> eco_netlist -by_verilog_file eco.v \\ -compare_physical_only_cells -write_changes eco_changes.tcl fc_shell> source eco_changes.tcl"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing PG Augmentation Shapes"}, {"role": "assistant", "content": "To remove PG augmentation shapes, use the -mode remove option with the signoff_create_pg_augmentation command.\n When you use this command, the IC Validator tool removes all PG augmentation shapes from the current block."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running IC Validator Using a Job Scheduler"}, {"role": "assistant", "content": "To enable IC Validator multicore processing using a job scheduler, use the set_host_options command to specify the following information: The submit protocol To use LSF, use the -submit_protocol lsf option.\n The LSF bsub command must be in your Linux path.\n To use the Univa Grid Engine (UGE) job scheduler, which was previously known as SGE (Sun Grid Engine) or GRD (Global Resource Directory), use the -submit_protocol grid option.\n The Grid qsub command must be in your Linux path.\n If you do not specify a host name or submit protocol, the IC Validator tool runs on the host on which the Fusion Compiler tool is currently running.\n The number of hosts to use Use the -num_processes option to specify the number of hosts.\n The number of cores to use on each host Use the -max_cores option to specify the number of cores per host.\n (Optional) Extra arguments needed for the submit command Use the -submit_command option to specify the submit command with the extra arguments.\n For example, to enable 4 hosts to be acquired by LSF, each of which can use 8 cores (for a total of 32 cores), use the following command: fc_shell> set_host_options -submit_protocol lsf -target ICV \\ -num_processes 4 -max_cores 8 To set the memory requirement of the jobs in the previous example to 1000M, use the following command: fc_shell> set_host_options -submit_protocol lsf -target ICV \\ -num_processes 4 -max_cores 8 \\ -submit_command {bsub -R rusage[mem=1000]} To enable 4 hosts to be acquired by the Grid Engine, each of which can use 8 cores (for a total of 32 cores), use the following command: fc_shell> set_host_options -submit_protocol grid -target ICV \\ -num_processes 4 -max_cores 8 663 Preparing to Run IC Validator In-Design Commands Feedback To set the process name of the jobs in the previous example to bnormal, use the following command: fc_shell> set_host_options -submit_protocol grid -target ICV \\ -num_processes 4 -max_cores 8 -submit_command \"qsub -P bnormal\""}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Manual Via Ladder Insertion"}, {"role": "assistant", "content": "To manually insert a via ladder, 1.\n Create the shapes that compose the via ladder by using the create_shape and create_via commands.\n 2.\n Create the via ladder by using the create_via_ladder command.\n At a minimum, you must specify the shapes that compose the via ladder by using the -shapes option.\n The command creates a via ladder named VIA_LADDER_, where is a unique integer.\n Use the following options with the create_via_ladder command to specify attributes of the created via ladder: -via_rule This option specifies the via ladder rule associated with the created via ladder.\n It sets the via_rule_name attribute of the created via ladder.\n -electromigration This option specifies that the via ladder is an electromigration via ladder.\n It sets the is_electromigration attribute of the created via ladder to true -high_performance This option specifies that the via ladder is a performance via ladder.\n It sets the is_high_performance attribute of the created via ladder to true -pattern_must_join This option specifies that the via ladder is a pattern-must-join via ladder.\n It sets the is_pattern_must_join attribute of the created via ladder to true -pin This option specifies the physical pin connected to the created via ladder.\n It sets the pin attribute of the created via ladder.\n See Also Querying Via Ladders Removing Via Ladders 463 Checking Routability Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I RedHawk/RedHawk-SC Fusion Analysis Flow"}, {"role": "assistant", "content": "When you have specified the necessary input and design data, you can perform voltage drop and PG electromigration analyses on the design.\n Figure 200 illustrates the steps in a basic static rail analysis flow.\n 873 An Overview for RedHawk Fusion and RedHawk-SC Fusion Feedback Figure 200 Required Steps for a Basic Rail Analysis Using RedHawk and RedHawk-SC Fusion Run rail analysis analyze_rail -voltage_drop Run PG electromigration analysis Check current violations Check rail analysis results Set application options set_app_options Read design data open_lib open_block Specify ideal voltage sources create_taps analyze_rail -electromigration"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Constraints"}, {"role": "assistant", "content": "Routing constraints provide guidance during routing.\n Table 29 describes the types of guidance provided by the routing constraints.\n Table 29 Routing Constraints Guidance Description Controlling the layers used for routing For information about specifying the routing layers, see Specifying the Routing Resources Setting stricter minimum width and spacing rules To set stricter minimum width and spacing rules, define a nondefault routing rule and apply it to the affected nets.\n For information about defining and applying nondefault routing rules, see Using Nondefault Routing Rules Controlling routing through voltage areas By default, routing can pass through any voltage areas.\n To restrict the voltage-area pass-throughs, define a voltage area routing rule, as described in Controlling Physical-Feedthrough Nets in Voltage Areas Controlling the routing direction You can specify the preferred routing direction for specific layers or for specific regions.\n For information about specifying the preferred routing direction for specific layers, see Setting the Preferred Routing Direction for Layers To control the routing direction in a specific region, use either a preferred-direction-only routing guide or a switch-preferred-direction routing guide.\n For information about routing guides, see Defining Routing Guides Limiting the number of edges in the nonpreferred routing direction To limit the number of edges in the nonpreferred routing direction, use a maximum-number-of-pattern routing guide.\n For information about routing guides, see Defining Routing Guides Controlling off-grid routing By default, off-grid routing is allowed for wires or vias unless the onWireTrack or onGrid attribute is set to 1 for the layer in the technology file.\n You can prevent or discourage off-grid routing, as described in Controlling Off-Grid Routing Preventing routing of specific nets To prevent routing of specific nets, set the physical_status attribute of each net to locked, as described in Setting the Rerouting Mode Preventing routing in specific region To prevent routing in a specific region, define a routing blockage, as described in Defining Routing Blockages Reserving space for top-level routing To reserve space for top-level routing, create a corridor routing blockage, as described in Reserving Space for Top-Level Routing Restricting routing to specific regions To restrict routing to a specific region, use a routing corridor, as described in Routing Nets Within a Specific Region 469 Routing Constraints Feedback Table 29 Routing Constraints (Continued) Guidance Description Prioritizing routing regions To prioritize routing regions, use an access preference routing guide.\n For information about routing guides, see Defining Routing Guides Controlling the routing density To control the routing density for specific layers, use a utilization routing guide.\n For information about routing guides, see Defining Routing Guides Encouraging river routing To encourage river routing on specific layers, use a single-layer routing guide.\n For information about routing guides, see Defining Routing Guides Improving routability of hard macro pins To improve the routability of hard macro pins, use pin access routing guides, as described in Deriving Pin Access Routing Guides Controlling routing along the perimeter of a block To control detail routing around the perimeter of a block, insert constraint objects, as described in Controlling Routing Around the Block Boundary Creating routing guides for the metal cut allowed and forbidden preferred grid extension rules You can use the following methods to create these routing guides: Automatic creation during boundary cell insertion, as described in Creating Routing Guides During Boundary Cell Insertion Manual creations by using the derive_metal_cut_route_guides command, as described in Controlling the pin connections You can control both the allowed types of pin connections and the pin tapering.\n For information about must-join pins, see Routing Must-Join Pins For information about controlling the allowed types of pin connections, see Controlling Pin Connections For information about controlling pin tapering, see Controlling Pin Tapering Controlling via ladder connections For information about controlling the via ladder connections, see Controlling Via Ladder Connections Restricting the extent of rerouting For information about restricting the extent of rerouting for specific nets, see Setting the Rerouting Mode 470 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Design Rule Checking Using Zroute"}, {"role": "assistant", "content": "To use Zroute to check the routing design rules defined in the technology file, run the check_routes command.\n By default, the check_routes command checks for routing DRC violations, unconnected nets, antenna rule violations, and voltage area violations on all routed signal nets in the block, except those marked as user nets, frozen nets, and PG nets.\n To verify the routing only for specific nets, specify the nets by using the -nets option.\n To check user routes, set the -check_from_user_shapes option to true To check frozen routes, set the -check_from_frozen_shapes option to true A net is considered frozen when its physical_status attribute is set to locked 569 Analyzing the Routing Results Feedback To disable checks for routing DRC violations, set the -drc option to false.\n To disable checks for unconnected nets, set the -open_net option to false.\n To disable checks for antenna rule violations, set the -antenna option to false.\n To disable checks for voltage area violations, set the -voltage_area option to false To save time, you can restrict the routing verification to specific regions of the block by using the -coordinates option to specify the lower-left and upper-right coordinates for each rectangular region.\n When you perform area-based DRC, the check_routes command checks only for DRC violations and voltage area violations.\n It does not check for unconnected nets, antenna violations, or tie-to-rail violations, as these are net-based violations.\n Note: The -coordinates option and the -nets option are mutually exclusive; you can use only one of these options.\n The check_routes command reports the following DRC violations: Spacing violations Different-net wire spacing Different-net nondefault wire spacing (note that the DRC report refers to nondefault routing rules as variable rules) Different-net via-cut spacing Different-net nondefault via-cut spacing (note that the DRC report refers to nondefault routing rules as variable rules) Different-net fat extension spacing Dog bone spacing End-of-line spacing Enclosed via spacing Same-net spacing Same-net via-cut spacing Same-net fat extension spacing Special notch spacing U-shape spacing Via-cut to metal spacing Soft spacing 570 Analyzing the Routing Results Feedback Area violations Less than minimum area Less than minimum enclosed area Fat wire via keepout area Jog wire via keepout area Length and width violations Less than minimum width Less than minimum length Less than minimum edge length Protrusion length Contact violations Needs fat contact Needs poly contact Needs fat contact on extension Over maximum stack level Enclosure violations End-of-line wire via enclosure Jog wire via enclosure T-shape wire via enclosure Others Open nets, except when doing area-based DRC By default, the check_routes command reports a maximum of 200 open nets.\n To report all open nets, use the -report_all_open_nets true option (or select \"Report all open nets\" in the GUI).\n Antenna violations, except when doing area-based DRC Nets crossing the top-cell boundary Frozen layers Minimum layer 571 Analyzing the Routing Results Feedback Maximum layer Voltage area violations Note: These violations are also reported after each detail route iteration.\n The check_routes command saves the error data to a file named zroute.err.\n You cannot control the naming of the error data file generated by the check_routes command, but you can rename the error data file after running the command.\n To rename the error data file, use the following commands: fc_shell> write_drc_error_data -error_data zroute.err \\ -file_name export.err fc_shell> open_drc_error_data -file_name export.err fc_shell> attach_drc_error_data [get_drc_error_data export.err] \\ -name newname.err After you run the check_routes command, you can use the DRC query commands to get more information about the violations or use the error browser to examine the violations in the GUI.\n For information about analyzing the DRC violations, see Using the DRC Query Commands.\n For information about using the error browser, see the Fusion Compiler Graphical User Interface User Guide After running check_routes, you can use the following command to run incremental detail routing that uses the check_routes results as input: fc_shell> route_detail -incremental true \\ -initial_drc_from_input true Note: Incremental detail routing does not fix open nets.\n To fix open nets, you must run ECO routing.\n For information about ECO routing, see Performing ECO Routing"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Managing Constraint Groups"}, {"role": "assistant", "content": "You can report or remove the constraint groups that you create when specifying the routing constraints.\n To report the created constraint groups, use the report_constraint_groups command and specify the constraint types to report by using the -type option.\n By default, all constraint types are reported.\n To specify the number of objects to report, use the -count option.\n The supported constraint types are: bus_style, which is specified by the create_bus_routing_style command differential_group, which is specified by the create_differential_group command differential_pair, which is specified by the create_differential_group command matched_wire, which is specified by the create_wire_matching command net_priority, which is specified by the create_net_priority command shielding, which is specified by the create_net_shielding command wire_length_limit, which is specified by the create_length_limit command 763 Using Custom Routing Application Options Feedback The following example shows the default output of the report_constraint_groups command: fc_shell> report_constraint_groups **************************************** Report : report_constraint_groups Design : top_new Version: Date : **************************************** Name Type Objects NDR_bus bus_style bus1 NDR_diff differential_pair clk0 clk1 shield_diff shielding clk0 clk1 matchL_con matched_wire match1 To remove the created constraint groups, use the remove_constraint_groups command and specify the constraint groups to remove.\n To remove all the constraint groups, use the -all option.\n The command disassociates the constituent objects from the removed constraint groups, and reports the number of the groups that are removed.\n For example, fc_shell> report_constraint_groups {shield_1} {shield_2} fc_shell> remove_constraint_groups $a"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Concurrent Clock and Data Optimization"}, {"role": "assistant", "content": "Applying useful skew techniques during datapath optimization to improve the timing QoR by taking advantage of the positive slack and adjusting the clock arrival times of registers is referred to as concurrent clock and data (CCD) optimization.\n Concurrent clock and data optimization is enabled by default for the compile_fusion and clock_opt commands.\n To enabled it for the route_opt command, set the route_opt.flow.enable_ccd application option to true You can change the default behavior of concurrent clock and data optimization by Limiting the Latency Adjustment Values Excluding Boundary Paths Excluding Specific Path Groups Excluding Specific Scenarios Excluding Specific Sinks Controlling Timing Optimization Effort Controlling Hold Time Optimization Effort Controlling the Adjustment of I/O Clock Latencies Performing Dynamic-Voltage-Drop-Driven Concurrent Clock and Data Optimization During the route_opt Command Specifying Optimization Targets at the Preroute Stage Specifying Optimization Targets at the Postroute Stage Enabling Buffer Removal at the Postroute Stage Reporting Concurrent Clock and Data Timing Scaling CCD Offsets to New Scenarios for Reporting Timing Skewing Latch and Discrete Clock Gates 376 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Excluding Specific Path Groups"}, {"role": "assistant", "content": "To exclude a specific path group from concurrent clock and data optimization, use the ccd.skip_path_groups application option and specify the name of the path group you want ignored.\n You can ignore a path group for all scenarios or a specific scenario.\n For example, to ignore the path group named CLK1 for all scenarios and CLK2 for the scenario named scnA, use the following command: fc_shell> set_app_options -name ccd.skip_path_groups \\ -value {CLK1 {CLK2 scnA}} This setting affects concurrent clock and data optimization performed during the place_opt clock_opt, and route_opt commands."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Near 100 Percent Redundant Via Insertion"}, {"role": "assistant", "content": "You can achieve a redundant via rate near 100 percent by using hard-rule-based redundant via insertion.\n Hard-rule-based redundant via insertion can improve the redundant via rate by treating redundant vias as hard design rules during routing.\n You can use nearly 100 percent redundant via insertion only during initial routing; this method is not supported during ECO routing.\n When you use near 100 percent redundant via insertion during initial routing, you should use soft-rule-based redundant via insertion during ECO routing to preserve the redundant via rate achieved during initial routing.\n Note: This method can result in a very large runtime increase for congested blocks.\n You should use this method only when needed to improve the redundant via rate beyond that provided by concurrent soft-rule-based redundant via insertion and the soft-rule-based approach resulted in a redundant via rate of at least 90 percent.\n To perform concurrent hard-rule-based redundant via insertion, 1.\n Enable nearly 100 percent via insertion by setting the route.common.concurrent_redundant_via_mode application option to insert_at_high_cost.\n (By default, concurrent redundant via insertion is disabled.) fc_shell> set_app_options \\ -name route.common.concurrent_redundant_via_mode \\ -value insert_at_high_cost To control the effort used to reserve space for the redundant vias, set the route.common.concurrent_redundant_via_effort_level application option.\n Note: If you enable the route.common.concurrent_redundant_via_mode option before running the place_opt command, the redundant vias are considered during congestion estimation.\n 629 Inserting Redundant Vias Feedback 2.\n Route the block.\n During routing, Zroute inserts the redundant vias and fixes hard design rule violations.\n In general, redundant via insertion has the same priority as other hard design rules; however, if design rule checking does not converge during detail routing, Zroute automatically relaxes the redundant via constraints to improve DRC convergence."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Exterior Tap Walls"}, {"role": "assistant", "content": "An exterior tap wall is a row or column of tap cells that is placed outside the boundary of a block, macro, or hard placement blockage.\n The tap cells in the tap wall are placed linearly without any gaps between cells.\n To insert an exterior tap wall, use the create_exterior_tap_walls command.\n You must specify the following information: The tap cell used in the tap wall (the -lib_cell option) By default, the command inserts the tap cells with R0 orientation.\n To place the cells with a different orientation, use the -orientation option.\n If the design has a FinFET grid, follow these guidelines when selecting the tap cell to ensure proper insertion of the tap wall: For horizontal tap walls, ensure that the cell's width in the specified orientation is an integer multiple of the x-pitch of the FinFET grid For vertical tap walls, ensure that the cell's height in the specified orientation is an integer multiple of the y-pitch of the FinFET grid By default, the tool uses the following naming convention for inserted tap cells: extTapWall__ library_cell_name _R _C number To identify the tap cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the tool uses the following naming convention: prefix __ library_cell_name _R _C number The side along which to insert the tap wall (the -side option) You can specify only a single side, top bottom right, or left.\n To insert a tap wall on more than one side, run the command multiple times.\n The tap insertion region (the -bbox option) You specify the tap insertion region by specifying the lower-left and upper-right corners of its bounding box: -bbox {{ llx lly } { urx ury }} The bounding box must span a portion of the object's edge on the specified side along which to insert the tap wall.\n If the bounding box spans multiple edges along the specified side, the command inserts the tap wall along the longest edge.\n If the bounding box does not span any edges of the specified side, the command issues an error message.\n 588 Inserting Tap Cells Feedback By default, a horizontal tap wall starts at the left edge of the specified bounding box and abuts the top or bottom boundary edge; a vertical tap wall starts at the bottom edge of the specified bounding box and abuts the left or right boundary edge.\n To specify margins for the tap wall insertion, use the -x_margin and -y_margin options.\n If the specified region, including the margins, is too small to fit a tap wall, the command does not insert tap cells.\n You should ensure that the insertion region does not contain any placement blockages, fixed cells, or macros.\n These obstructions can prevent the insertion of the tap cells and result in an incomplete or missing tap wall.\n When inserting the tap wall, the command does not honor the standard cell rows or sites and does not cross the object boundary.\n After insertion, the command fixes the placement of the inserted tap cells."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining the Net Priority"}, {"role": "assistant", "content": "Use the net priority constraint to define the routing order for specific nets.\n Nets with a higher priority are routed first.\n To define the priority for a collection of nets or bundles, create a constraint group by using the create_net_priority command.\n You need to specify the following information: The name of the constraint group If you do not specify a name, the command assigns a name.\n By default, the command returns an error if the assigned name already exists.\n To delete the existing constraint group, use the -force option.\n The nets, bundles, and topology edges to which the constraint group applies Use the -for option.\n The net priority To specify the priority, use the -priority option.\n You can specify an integer between -128 and 128, inclusive.\n The following example creates a constraint group named abc for the nets and bundles that match the pattern pr*.\n The net priority is set to 15.\n fc_shell> create_net_priority abc \\ -for [get_nets -physical_context pr*] \\ -priority 15 {abc}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling MUX Optimization"}, {"role": "assistant", "content": "The Fusion Compiler tool can map combinational logic representing multiplexers in the HDL code directly to a single multiplexer (MUX) or a tree of multiplexer cells from the target logic library.\n Multiplexers are commonly modeled with if and case statements.\n To implement the mutliplexer logic, the HDL Compiler uses SELECT_OP cells, which the Fusion Compiler tool map to combinational logic or multiplexers in the logic library.\n 226 Controlling Mapping and Optimization Feedback User-specified Tool evaluated Implemented using MUX gates Implemented using MUX or non MUX gates based on area costing analyze elaborate Infers Select_OP cells compile_fusion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Modifying the Stacking Order"}, {"role": "assistant", "content": "You can modify the stacking order of the voltage area shapes by using the set_voltage_area_shape command.\n To raise a voltage area shape one position, use the -raise option.\n To lower a voltage area shape one position, use the -lower option.\n To move a voltage area shape to the top, use the -top option.\n To move a voltage area shape to the bottom, use the -bottom option.\n To move a voltage area shape directly above another shape, use the -above option.\n To move a voltage area shape directly below another shape, use the - below option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Resolving Multiple References With the Uniquify Process"}, {"role": "assistant", "content": "The uniquify command resolves multiple references, except those with the dont_touch attribute, throughout the hierarchy in the current design.\n The uniquify process copies and renames any multiply referenced design so that each instance references a unique design.\n The process removes the original design from memory after it creates the new and unique designs.\n The original design and any collections that contain it or its objects are no longer accessible.\n After this process finishes, the tool optimizes each design copy based on the unique context of its cell instance.\n To control the names of the reference copies, use the design.uniquify_naming_style application option.\n The default is %s_%d, where %s denotes the name of the existing reference and %d denotes the smallest integer value that forms a unique design name.\n This example creates unique reference copies of the specified cells A1, A2, and A3.\n fc_shell> uniquify {A1 A2 A3} 169 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback This example creates unique reference copies for the filtered cells A and B.\n fc_shell> uniquify [get_cells {A B}]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Automated Tap Insertion and H-Tree Synthesis"}, {"role": "assistant", "content": "To perform this task, you must 1.\n Specify the required settings by using the set_regular_multisource_clock_tree_options command as follows: The clock name by using the -clock option The topology for the global clock tree by using the -topology htree_only option 425 Implementing Multisource Clock Trees Feedback The number of rows and columns of tap cells to insert by using the -tap_boxes option A list of library cells to use as tap drivers by using the -tap_lib_cells option The library cells you specify must be enabled for clock tree synthesis by using the set_lib_cell_purpose -include cts command.\n A list of library cells to use for synthesizing the global clock tree (H-tree) by using the -htree_lib_cells option The library cells you specify must be enabled for clock tree synthesis by using the set_lib_cell_purpose -include cts command.\n By default, the tool uses The net connected to the clock root to insert the tap drivers and build the clock structure You can specify a different net of the clock network by using the -net option.\n The locations of the sinks to determine the boundary within which to insert the tap cells You can control this boundary by using the -tap_boundary option.\n You can also specify keepout areas within which tap cells should not be inserted by using the -keepouts option.\n The layers and routing rules specified by the clock tree synthesis settings to route the H-tree You can specify the layers and routing rules for the H-tree by using the -htree_layers and -htree_routing_rule options.\n You can report the options you specified by using the report_regular_multisource_clock_tree_options command, and remove them by using the remove_regular_multisource_clock_tree_options command.\n 2.\n (Optional) Enable flexible H-tree synthesis by setting the cts.multisource.flexible_htree_synthesis application option to true When you enable this feature, the tool identifies the best count, configuration, and placement of tap drivers for minimum clock tree insertion delay.\n To specify that the tool derives a symmetric configuration of tap drivers, set the cts.multisource.tap_selection application option to symmetric.\n The default is user, and by default the tool uses the configuration specified by the -tap_boxes option of the set_regular_multisource_clock_tree_options command for the tap drivers.\n 426 Implementing Multisource Clock Trees Feedback 3.\n Insert the tap drivers and build the H-tree by using the synthesize_regular_multisource_clock_trees command, which consists of the following two stages: tap_synthesis, during which the tool inserts the tap drivers htree_synthesis, during which the tool builds the H-tree that drives the tap drivers By default, the tool performs both stages.\n You can perform only one of these stages by using the -to or -from option.\n The following example script inserts tap drivers in four columns and two rows and builds the H-tree: ## Include only tap driver and H-tree library cell for CTS set cts_references [get_lib_cells -filter valid_purposes=~*cts*] set_lib_cell_purpose -exclude cts [get_lib_cells $cts_references] set_lib_cell_purpose -include cts { LIB1/BUF1 LIB1/BUF2} ## Set up and insert tap drivers and build H-tree set_regular_multisource_clock_tree_options \\ -clock clk -topology htree_only -tap_boxes {4 2} \\ -tap_lib_cells [get_lib_cells */CKBUF*] \\ -htree_lib_cells [get_lib_cells */CKINV*] \\ -htree_layers \"m9 m10\" -htree_routing_rule \"htree_ndr\" synthesize_regular_multisource_clock_trees ## Reapply CTS library cell list as required for the subsequent steps set_lib_cell_purpose -include cts [get_lib_cells $cts_references]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Physical Hierarchy"}, {"role": "assistant", "content": "To insert clock drivers from the top level of a design with multiple levels of physical hierarchy, 1.\n Enable the lower-level physical blocks for editing by using the set_editability command.\n 2.\n Enable clock driver insertion for multiple levels of physical hierarchy by setting the cts.multisource.enable_mlph_flow application option to true 3.\n Insert clock drivers by using the create_clock_drivers command.\n When inserting clock drivers to lower-level blocks, the tool reuses existing clock ports.\n If there are no existing clock ports, the tool creates new ports, if it is allowed.\n You can allow new ports to be added to a block by using use the set_freeze_ports command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Detail Routing"}, {"role": "assistant", "content": "Before you run detail routing, Define the common routing application options For information about the common routing application options, see the route.common_options man page.\n Define the detail routing application options For information about the detail routing application options, see the route.detail_options man page.\n Complete global routing and track assignment The detail router uses the general pathways suggested by global routing and track assignment to route the nets, and then it divides the block into partitions and looks for DRC violations in each partition.\n When the detail router finds a violation, it rips up the wire and reroutes it to fix the violation.\n During detail routing, Zroute concurrently addresses routing design rules and antenna rules and optimizes via count and wire length.\n For more information about antenna rules, see Finding and Fixing Antenna Violations To perform standalone detail routing, run the route_detail command.\n By default, the route_detail command Performs detail routing on the whole block You can restrict the routing to a specific area of the block by using the -coordinates option (or by specifying or selecting the bounding box in the GUI).\n Uses one uniform partition for the first iteration and adjusts the partitioning for subsequent iterations Zroute uses the single uniform partition for the first iteration to generate all DRC violations for the chip at the same time.\n At the beginning of each subsequent iteration, the router checks the distribution of the DRC violations.\n If the DRC violations are evenly distributed, the detail router uses a uniform partition.\n If the DRC violations are located in some local areas, the detail router uses nonuniform partitions.\n In some cases, such as when a design contains standard cells with long pins, you can improve the detail routing QoR and reduce the runtime by increasing the partition size.\n To enable this feature, set the route.detail.optimize_partition_size_for_drc application option to true 533 Routing Signal Nets Feedback Performs iterations until one of the following conditions exists: All of the violations have been fixed The maximum number of iterations has been reached By default, the maximum number of iterations is 40.\n You can change this limit by setting the -max_number_iterations option.\n fc_shell> route_detail -max_number_iterations 20 It cannot fix any of the remaining violations You can change the effort that the detail router uses for fixing the remaining violations before it gives up by setting the route.detail.drc_convergence_effort_level application option.\n fc_shell> set_app_options \\ -name route.detail.drc_convergence_effort_level -value high You can force the detail router to complete the maximum number of iterations, regardless of the DRC convergence status, by setting the route.detail.force_max_number_iterations application option to true fc_shell> set_app_options \\ -name route.detail.force_max_number_iterations -value true Is not timing-driven To enable timing-driven detail routing, set the route.detail.timing_driven application option to true fc_shell> set_app_options \\ -name route.detail.timing_driven -value true By default, when you enable timing-driving detail routing, Zroute uses medium effort to assign timing-critical nets to low-resistance metal layers.\n To change the extent to which timing-driven detail routing prefers lower-resistance metal layers when routing timing- critical nets, set the route.common.rc_driven_setup_effort_level application option.\n To increase the effort level to use more low-resistance metal layers for routing, set the option to high.\n To reduce the effort level, set the option to low.\n To disable resistance-based routing layer preferences, set the option to off Does not fix shorted nets over macro cells If default detail routing leaves shorted nets over macro cells, analyze the block to determine if the shorts are caused by the availability of only a single layer for routing over the macro cells.\n If so, use routing guides to encourage river routing over the macros with shorted nets and rerun detail routing.\n For details, see Using Routing Guides to Encourage River Routing 534 Routing Signal Nets Feedback If shorted nets remain after using river routing, enable the fixing of shorted nets over macro cells by automatically ripping up and rerouting the shorted nets by setting the route.detail.repair_shorts_over_macros_effort_level application option to low medium, or high and running incremental detail routing.\n The higher the effort level, the more ECO routing iterations are performed, which can reduce the number of DRC violations at the expense of runtime.\n fc_shell> set_app_options \\ -name route.detail.repair_shorts_over_macros_effort_level \\ -value high Does not fix soft DRC violations, such as bridge rule violations To enable the fixing of soft DRC violations after the final detail routing iteration, set the route.common.post_detail_route_fix_soft_violations application option to true fc_shell> set_app_options \\ -name route.common.post_detail_route_fix_soft_violations \\ -value true You can run additional detail routing iterations on a routed block by running incremental detail routing (the -incremental option).\n Be sure to use the -incremental option; otherwise, Zroute restarts at iteration 0 with a fixed-size partition.\n fc_shell> route_detail -incremental true By default, incremental detail routing does not fix soft DRC violations, such as bridge rule violations.\n To enable the fixing of soft DRC violations after the final incremental detail routing iteration, set the route.common.post_incremental_detail_route_fix_soft_violations application option to true fc_shell> set_app_options \\ -name route.common.post_incremental_detail_route_fix_soft_violations \\ -value true Note: Incremental detail routing does not fix open nets.\n To fix open nets, you must run ECO routing.\n For information about ECO routing, see Performing ECO Routing If you want to override certain runtime-intensive application options, you can run detail routing in early mode.\n To turn on the early mode in detail routing, use the set_qor_strategy command with the -mode option set as early fc_shell> set_qor_strategy -mode early -stage pnr 535 Routing Signal Nets Feedback Early mode detail routing automatically creates a new DRC type called skipped regions that can detect dirty regions with pin overflow.\n To identify the dirty regions, open the error browser and select Skipped region If you want to view the DRC violations before postroute optimization, you can save the block after a specified number of iterations by setting the route.detail.save_after_iterations application option.\n The saved block is called DR_itr, where n is the specified iteration.\n You can use a string other than DR as the prefix by setting the route.detail.save_cell_prefix application option.\n Zroute generates a DRC violations summary at the end of each iteration.\n After completing detail routing, Zroute outputs a final summary report.\n This report includes all violations detected by Zroute, as well as information about the redundant via conversion rates.\n If you want an additional report that excludes violations that are not of interest to you, specify the rules to exclude by setting the route.detail.report_ignore_drc application option.\n The syntax to set this option is set_app_options -name route.detail.report_ignore_drc -value list_of_drcs The values used in the list_of_drcs argument are the DRC names used in the summary report.\n If the DRC name includes a space, you must enclose the name in double quotation marks.\n For a complete list of the supported DRC names, see the man page.\n Example 21 shows a detail routing report.\n Example 21 Detail Routing Report Start DR iteration 0: uniform partition Routed 1/27405 Partitions, Violations = 0 Routed 137/27405 Partitions, Violations = 264 DR finished with 7398 violations DRC-SUMMARY: @@@@@@@ TOTAL VIOLATIONS = 7398 Diff net spacing : 194 Same net spacing : 4 Diff net via-cut spacing : 2328 Same net via-cut spacing : 1 Less than minimum width : 5 Less than minimum area : 36 Short : 87 End of line enclosure : 4742 Less than NDR width : 1 Total Wire Length = 23928849 micron Total Number of Contacts = 2932706 Total Number of Wires = 2878293 Total Number of PtConns = 88536 Total Number of Routed Wires = 2878293 Total Routed Wire Length = 23920011 micron Total Number of Routed Contacts = 2932706 Layer M1 : 962827 micron Layer M2 : 4233755 micron 536 Routing Signal Nets Feedback Via VIA78SQ_C : 1742 Via VIA78SQ_C(rot) : 9 Redundant via conversion report: Total optimized via conversion rate = 98.96% (2902130 / 2932706 vias) Layer VIA1 = 97.81% (1091973/ 1116367 vias) Weight 1 = 97.81% (1091973 vias) Un-optimized = 2.19% (24394 vias) Total double via conversion rate = 98.96% (2902130 / 2932706 vias) Layer V"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Voltage Optimization"}, {"role": "assistant", "content": "The voltage level of a design is determined by the technology node (at device level) and the performance requirement.\n The Fusion Compiler tool can perform voltage optimization, which tries to achieve better performance, power, and area (PPA) at a lower voltage level.\n To perform voltage optimization, you need Scaled library panes Voltage optimization works on the fundamental principle of scaling the voltage, Therefore, scaled library panes with different voltages are required.\n A signoff methodology with a scaled library setup The voltage optimization flow consists of the following high-level steps: 1.\n Perform physical synthesis at the original design voltage using the compile_fusion command.\n 2.\n Perform clock tree synthesis and optimization at the original design voltage by using the clock_opt command.\n 3.\n Associate a set of related library panes to form a scaling group by using the define_scaling_lib_group command.\n 4.\n Specify voltage ranges for specific corners by using the set_vopt_range command, as shown in the following example: fc_shell> set_vopt_range -corner C1 \\ -low_voltage 0.81 -high_voltage 1.0 fc_shell> set_vopt_range -corner C2 \\ -low_voltage 0.81 -high_voltage 1.0 5.\n Specify a total negative slack (TNS) and power target and tolerance for voltage optimization by using the set_vopt_target command.\n The following example specifies a total negative slack target for voltage optimization and specifies that I/O paths should be excluded from the total negative slack costing: fc_shell> set_vopt_target -tns -1.0 -excludeIO 6.\n Perform voltage optimization by using the voltage_opt command.\n 7.\n Perform routing at the optimized voltage by using the route_auto command.\n 8.\n Perform postroute optimization at the optimized voltage by using the route_opt command.\n 393 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reverting Changes Made During Resizing"}, {"role": "assistant", "content": "To revert the ECO changes made with the size_cell command, use the revert_cell_sizing command.\n To include the sized cells that are adjacent to the specified cell in the same row, use the -include_adjacent_sized_cells option.\n When you use this option, by default, the tool also reverts the cells that abut the specified cell on either side, if they are also sized cells.\n However, if you use the -adjacent_cell_distance option, the tool recursively reverts the sized cells that are adjacent to sized cells within the specified distance in the same row."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Considering DFT Connections During Placement"}, {"role": "assistant", "content": "To improve the DFT logic placement by enhancing the tool's awareness of DFT connectivity, while still optimizing for functional placement, set the place.coarse.enable_dft_modeling application option to auto.\n The default is false"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preventing Off-Grid Routing"}, {"role": "assistant", "content": "By default, wires and vias need to be aligned to the wire track grid for a metal layer only if the onWireTrack or onGrid attribute is set to 1 in its Layer section in the technology file.\n To override the technology file settings, set the following application options: route.common.wire_on_grid_by_layer_name This option controls off-grid routing for metal layers.\n route.common.via_on_grid_by_layer_name This option controls off-grid routing for via layers.\n Use the following syntax to set these options: { { layer true|false}...\n } Specify the layers by using the layer names from the technology file.\n Specify true to forbid off-grid routing and false to allow off-grid routing.\n If you use either of these options, the tool ignores all settings for the onWireTrack and onGrid attributes in the technology file and uses only the settings specified by these options.\n If you do not specify a layer in these options, off-grid routing is allowed on that layer, regardless of the setting in the technology file.\n For example, to prevent off-grid routing for wires on the M2 and M3 metal layers and for vias on the V2 via layer, regardless of the settings in the technology file, use the following commands: fc_shell> set_app_options \\ -name route.common.wire_on_grid_by_layer_name \\ -value {{M2 true} {M3 true}} fc_shell> set_app_options \\ -name route.common.via_on_grid_by_layer_name \\ -value {{V2 true}} 510 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Naming Convention for Boundary Cells"}, {"role": "assistant", "content": "By default, the tool uses the following naming convention for inserted boundary cells: boundarycell!\n library_cell_name number To change the separator character from its default of \"!,\" use the -separator option with the set_boundary_cell_rules command..\n To identify the boundary cells inserted in a specific run, use the -prefix option with the set_boundary_cell_rules command to specify a prefix string.\n When you use this option, the tool uses the following naming convention: boundarycell!\n prefix library_cell_name number"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I clock_opt Command"}, {"role": "assistant", "content": "To synthesize the clock trees, route the clock nets, and further optimize the design by using a single command, use the clock_opt command.\n The clock_opt command consist of the following stages: 1.\n The build_clock stage, during which the tool synthesizes and optimizes the clock trees for all clocks in all modes of all active scenarios.\n After clock tree synthesis, the tool sets the synthesized clocks as propagated.\n 2.\n The route_clock stage, during which the tool detail routes the synthesized clock nets.\n 3.\n The final_opto stage, during which the tool performs further optimization, timing- driven placement, and legalization.\n It then global routes the block and performs extensive global-route-based optimization, which includes incremental legalization and route patching.\n You can limit the clock_opt command to one or more contiguous stages by using the -from option to specify the stage from which you want to begin and the -to option to specify the stage after which you want to end.\n If you do not specify the -from option, the tool begins from the build_clock stage.\n Similarly, if you do not specify the -to option, the tool continues until the final_opto stage is completed.\n For example, to synthesize and optimize the clock trees and detail route the clock nets only, limit the execution to the build_clock and route_clock stages by use the following command: fc_shell> clock_opt -to route_clock Because the tool performs global routing during the final_opto stage, you should specify all router related settings, such as routing rules, route guides, application option settings required for the technology node, and so on, before you run the clock_opt command.\n You should run the final_opto only one time for each block.\n After this stage is completed, all the signal routes in the block are global routed.\n Therefore, when subsequently run any routing command, such as the route_auto route_global, or route_group command, the tool skips global routing.\n To avoid errors during subsequent track assignment and detail routing, do not change any global route shapes after you run the clock_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Remaining Mask Design Rule Violations"}, {"role": "assistant", "content": "ill_table { {{VT1_FILL1} {VT1_DECAP4 VT1_DECAP2}} {{VT2_FILL1} {VT2_DECAP4 VT2_DECAP2}} } 648 Inserting Filler Cells Feedback Maximum Horizontal Length Rule The maximum horizontal length rule restricts the horizontal length of a sequence of abutted filler cells.\n To select this rule, use the -replacement_rule od_horiztonal_distance option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The maximum horizontal length To specify the maximum length, use the -max_constraint_length option.\n The cells considered for the check and the filler cells that can be used to replace the violating filler cells The filler cells considered for the check are called constrained cells.\n The filler cells considered to replace violating cells are called unconstrained cells To specify multiple constrained cell groups and their replacement cells, use the following syntax with the -refill_table option: { {{ refill_cell constrained_cells }}...\n } You can use this syntax to fix violations for threshold-voltage-based filler cells.\n To specify a single constrained cell group, use the -constraint_fillers option.\n To specify the replacement cells, use the -non_constraint_fillers option.\n Note: If you use both methods, the command uses only the information specified in the -refill_table option.\n For example, the following command identifies and fixes maximum horizontal length violations where the horizontal length exceeds 70 um: fc_shell> replace_fillers_by_rules \\ -replacement_rule od_horiztonal_distance -max_constraint_length 70 \\ -refill_table { {{VT1_FILL1} {VT1_DECAP4 VT1_DECAP2}} {{VT2_FILL1} {VT2_DECAP4 VT2_DECAP2}} } Figure 130 shows the original row, which violates this rule, and the resulting row, which uses unconstrained filler cells to fix the violation.\n The constrained cells are shown in red, while the unconstrained cells are shown in green.\n 649 Inserting Filler Cells Feedback Figure 130 Fixing a Maximum Vertical Edge Length Violation Maximum Stacking for Small Filler Cells Rule The maximum stacking for small filler cells rule restricts the stacking height of small filler cells.\n To select this rule, use the -replacement_rule small_filler_stacking option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The maximum stacking height To specify the maximum stacking height, use the -max_constraint_length option.\n The cells considered for the check To specify the small filler cells to consider for the check, use the -small_fillers option.\n The filler cells that can be used to replace the violating filler cells To specify the filler cells that can be used to replace the violating filler cells, use the -replacement_fillers option.\n If the vertical stacking of the small filler cells specified in the -small_fillers option exceeds the height specified in the -max_constraint_length option, the command replaces two or three consecutive filler cells adjacent to the violating cell with one of the large filler cells specified in the -replacement_fillers option.\n If it is not possible to replace the filler cells, the command reorders the filler cells to fix the violation.\n The command maintains the threshold voltage at the location of the violating filler cell; however, the threshold voltage at the location of non-violating filler cells might change.\n The command does not check for threshold voltage violations caused by these changes.\n 650 Inserting Filler Cells Feedback For example, the following command identifies and fixes maximum stacking violations where the stacking height exceeds 10 um: fc_shell> replace_fillers_by_rules \\ -replacement_rule small_filler_stacking -max_constraint_length 10 \\ -small_fillers {FILL1 FILL2} -replacement_fillers {FILL3 FILL4} \\ The following figures illustrate the replacement and reordering techniques used to fix maximum stacking violations.\n In these figures, the small filler cells are shown in red, while the large filler cells are shown in green.\n Figure 131 shows the original stack, which violates this rule, and the resulting stack, which uses a replacement filler cell to fix the violation.\n Figure 131 Fixing Maximum Stacking Violation by Replacement FILL1 vt1 FILL3 vt1 FILL1 vt1 FILL2 vt1 FILL1 vt1 FILL1 vt1 FILL1 vt1 10um FILL2 vt1 Figure 132 shows the original stack, which violates this rule, and the resulting stack, which uses reordering to fix the violation.\n Note that the threshold voltage of the FILL3 cell is changed so that the vt2 threshold voltage is maintained in the original location.\n Figure 132 Fixing Maximum Stacking Violation by Reordering FILL1 vt1 FILL1 vt1 FILL2 vt1 10um FILL2 vt1 FILL3 vt1 FILL3 vt2 FILL2 vt2 FILL2 vt2 651 Inserting Filler Cells Feedback Maximum Vertical Edge Length Rule The maximum vertical edge length rule restricts the vertical length of a stack of certain filler cells and standard cells.\n To select this rule, use the -replacement_rule max_vertical_constraint option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The maximum vertical length To specify the maximum vertical length, use the -max_constraint_length option.\n The cells considered for the check These cells are called constrained cells.\n To specify the constrained filler cells, use the -constraint_fillers option.\n By default, all standard cells are constrained.\n To exclude specific standard cells from consideration, use the -exception_cells option.\n To ignore the length violation when a constrained cell abuts an exception cell, use the -no_violation_along_exception_cells option.\n The filler cells that can be used to replace the violating filler cells These filler cells are called unconstrained cells ; they are not considered when measuring the stack height.\n To specify the filler cells that can be used to break a continuous edge of constrained cells, use the -non_constraint_fillers option.\n To specify the filler cells whose left side can be used to break a continuous edge of constrained cells, use the -non_constraint_left_fillers option.\n To specify the filler cells whose right side can be used to break a continuous edge of constrained cells, use the -non_constraint_right_fillers option.\n Note: Any filler cells that are not identified as constrained, unconstrained, or exception cells are considered constrained cells.\n For example, the following command identifies and fixes maximum vertical edge length violations where the vertical length exceeds 180 um: fc_shell> replace_fillers_by_rules \\ -replacement_rule max_vertical_constraint -max_constraint_length 180 \\ -constraint_fillers {DECAP8 DECAP4} -non_constraint_fillers {FILL1} \\ -exception_cells {BUF1 TAP1} Figure 133 shows the original stack, which violates this rule, and the resulting stack, which uses unconstrained filler cells to fix the violation.\n The constrained cells are shown in red, while the unconstrained cells are shown in green.\n 652 Inserting Filler Cells Feedback Figure 133 Fixing a Maximum Vertical Edge Length Violation Tap Cell Spacing Rule The tap cell spacing rule restricts the distance between a target tap cell's oxide diffusion (OD) layer and the OD layers of its neighboring cells on the left and right sides.\n To select this rule, use the -replacement_rule od_tap_distance option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The disallowed spacing range The spacing distance is specified as the number of sites.\n To specify the disallowed spacing range, use the -tap_distance_range option.\n The tap cells considered for the check These cells are called target cells.\n To specify the target tap cells, use the -tap_cells option.\n The tap cells used to replace the violating tap cells These cells are called replacement cells To specify the replacement tap cell for left-side violations, use the -left_violation_tap option.\n To specify the replacement tap cell for right-side violations, use the -right_violation_tap option.\n To specify the replacement tap cell for both-side violations, use the -both_violation_tap option.\n Note: The target and replacement tap cells must all have the same size.\n 653 Inserting Filler Cells Feedback By default, the command measures the distance to the cells that abut the target tap cell.\n If the tap cells abut library cells that do not have an OD layer, use the -adjacent_non_od_cells option to specify these library cells.\n The command skips the specified non-OD cells and measures to distance from the target tap cell to the first neighbor with an OD layer.\n For example, the following command replaces tap cells named TAP that have a separation distance of three sites: fc_shell> replace_fillers_by_rules -replacement_rule od"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Metal Fill"}, {"role": "assistant", "content": "Metal fill shapes are stored in fill cells, which use the following naming convention: FILL_INST_#.\n To query the fill cells in the block, use the get_fill_cells command.\n By default, this command reports only the fill cells in the top-level design.\n To report all of the fill cells in the hierarchy, use the -hierarchical option.\n To query the fill shapes, use the get_shapes -include_fill command.\n To return only the fill shapes associated with specific fill cells, use the -of_objects option to specify the fill cells.\n 732 Inserting Metal Fill With IC Validator In-Design Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Orientations for Leaf Cells"}, {"role": "assistant", "content": "You can specify orientations for leaf cells when you add them to a relative placement group.\n If you do not specify a leaf cell orientation, the tool automatically assigns a legal orientation for the leaf cells.\n To specify the orientation for leaf cells, use one of the following two methods: Use the -orientation option with a list of possible orientations when you add the cells to the group with the add_to_rp_group command.\n Set the rp_orientation attribute on leaf cells by using the set_attribute command.\n physopt_rp_enable_orient_opt variablevariablesphysopt_rp_enable_orient_opt The tool chooses one legal orientation from the list of orientations that you provide."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Tap Assignment Options and Settings"}, {"role": "assistant", "content": "Before you can perform automated tap assignment by using the synthesize_multisource_clock_taps command, you must perform the following steps: 1.\n Remove dont_touch size_only fixed, and locked attributes setting on the clock cells that are not required.\n These settings prevent the tool from merging or splitting clock cells during tap assignment, if necessary.\n 2.\n Specify settings for automated tap assignment by using the set_multisource_clock_tap_options command.\n You must specify The clock for tap assignment by using the -clock option.\n All the sinks reachable from the given clock are considered for redistribution.\n The tap drivers among which the sinks are redistributed by using the -driver_objects option.\n 427 Implementing Multisource Clock Trees Feedback The number of taps that the sinks are redistributed among by using the -num_taps option.\n Currently, the number of taps specified with this option must be equal to the number of drivers specified with the -driver_objects option.\n To prevent the tool from merging specific clock tree cells, specify the instance names using the -dont_merge_cells option.\n To report the settings you specify for automated tap assignment, use the report_multisource_clock_tap_options command.\n To remove the settings you specify for automated tap assignment, use the remove_multisource_clock_tap_options command.\n 3.\n (Optional) Create multisource sink groups for tap assignment by using the create_multisource_clock_sink_group command.\n Skew groups defined for the clock can be distributed among different taps.\n To retain the objects of a skew group under the same tap, create a corresponding multisource sink group.\n Use the following commands to remove, report, or manipulate multisource sink groups: remove_multisource_clock_sink_groups report_multisource_clock_sink_groups get_multisource_clock_sink_groups add_to_multisource_clock_sink_group remove_from_multisource_clock_sink_group 4.\n (Optional) Specify name prefixes and suffixes to use when merging and splitting clock cells during tap assignment by using the following application options: cts.multisource.subtree_merge_cell_name_prefix cts.multisource.subtree_merge_cell_name_suffix cts.multisource.subtree_split_cell_name_prefix cts.multisource.subtree_split_cell_name_suffix cts.multisource.subtree_split_net_name_prefix cts.multisource.subtree_split_net_name_suffix 428 Implementing Multisource Clock Trees Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Via Ladders"}, {"role": "assistant", "content": "To remove via ladders and their associated shapes, use the remove_via_ladders command.\n You must specify the via ladders to remove.\n To remove all via ladders from the block, use the asterisk (*) wildcard character, as shown in the following example: fc_shell> remove_via_ladders * To remove via ladders only from specific nets, use the -nets option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Interclock Delay Balancing"}, {"role": "assistant", "content": "Before you perform interclock delay balancing, you must generate the interclock delay balancing constraints as described in Defining the Interclock Delay Balancing Constraints interclock delay balancingruning To perform interclock delay balancing, use the balance_inter_clock_delay comandcomandsbalance_inter_clock_delay balance_clock_groups command.\n For multicorner-multimode designs, the tool performs interclock delay balancing on all active scenarios.\n fc_shell> balance_clock_groups 388 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Remaining Mask Design Rule Violations"}, {"role": "assistant", "content": "_tap_distance \\ -tap_cells {TAP} -tap_distance_range {3 3} \\ -left_violation_tap {TAPl} -right_violation_tap {TAPr} \\ -both_violation_tap {TAPb} Figure 134 shows the original row, which violates this rule, and the resulting row, which uses the replacement filler cells to fix the violations.\n The target filler cells are shown in red, while the replacement filler cells are shown in green.\n Figure 134 Fixing a Tap Cell Spacing Violation Random Filler Cell Replacement To randomly replace existing filler cells, use the -replacement_rule random option with the replace_fillers_by_rules command.\n When you select this rule, you must specify The filler cells to be replaced and their replacements The filler cells to be replaced are called target cells.\n To specify the target filler cells and their replacements, use the following syntax with the -random_replace option: { { target_cell refill_cell 1a refill_cell 1b...}}...\n } To ignore filler cells that have a physical_status attribute of fixed or locked, use the -skip_fixed_cells option with the replace_fillers_by_rules command.\n 654 Inserting Filler Cells Feedback When the command finds one of the target cells, it replaces it by randomly selecting one of the replacement cells specified for that target cell.\n For example, the following command replaces FILL1 cells with one of FILL1a, FILL1b, or FILL1c and replaces FILL2 cells with one of FILL2a or FILL2b: fc_shell> replace_fillers_by_rules -replacement_rule random \\ -random_replace { {FILL1 {FILL1a FILL1b FILL1c}} {FILL2 {FILL2a FILL2b}} }"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Scaling the Switching Activity"}, {"role": "assistant", "content": "If the clock frequency used in the SAIF file is different from the clock frequency used in the Fusion Compiler tool, you can scale the switching activity by performing the following steps: 1.\n Read in the SAIF file by using the read_saif command.\n 2.\n Enable scaling by setting the power.use_generated_clock_scaling_factor application option to on 3.\n Scale the switching activity by using the set_power_clock_scaling command.\n When you use this command, you must specify the following: The clock objects associated with the switching activity you want to scale The clock period used in the SAIF file by using the -period option or the ratio between the clock period used in the SAIF file and the clock period used in the Fusion Compiler tool by using the -ratio option In addition, you can specify the scenario for which to apply the scaling by using the -scenario option.\n 187 Setting Up for Power-Related Features Feedback The following example reads in a SAIF file, enables scaling, scales the switching activity associated with clocks named CLK1 and CLK2 by a ratio of five, and scales the switching activity associated with clock named CLK3 by a ratio of two: fc_shell> read_saif top.saif fc_shell> set_app_options -list \\ {power.use_generated_clock_scaling_factor true} fc_shell> set_power_clock_scaling -ratio 5 {CLK1 CLK2} fc_shell> set_power_clock_scaling -ratio 2 {CLK3} If you run the set_power_clock_scaling command again for the same clock, the tool scales the already scaled switching activity.\n When you use the set_power_clock_scaling command, the tool scales only the switching activity applied with the read_saif command.\n The tool does not scale the following: Switching activity applied with the set_switching_activity command Switching activity within block abstracts The scaled switching activity is persistent in the design.\n You can write it out by using the write_saif command and use it in the subsequent steps of the design flow."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Nets Within a Specific Region"}, {"role": "assistant", "content": "To route one or more nets within a specific region, 1.\n Define a routing corridor by using the create_routing_corridor command, as described in Defining Routing Corridors 2.\n Assign the nets and supernets to the routing corridor by using the add_to_routing_corridor command, as described in Assigning Nets to a Routing Corridor 3.\n Verify that the routing corridors are valid by using the check_routing_corridors command, as described in Verifying Routing Corridors If necessary, modify the routing corridors, as described in Modifying Routing Corridors 4.\n Route the nets by using the route_group command, as described in Routing Critical Nets 5.\n Remove the routing corridors, as described in Removing Routing Corridors See Also Reporting Routing Corridors 490 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing and Postroute Optimization"}, {"role": "assistant", "content": "This topic describes the routing capabilities of Zroute, which is the router for the Fusion Compiler tool.\n Zroute is architected for multicore hardware and efficiently handles advanced design rules for 45 nm and below technologies and design-for-manufacturing (DFM) tasks.\n It also describes the postroute optimization features supported by the Fusion Compiler tool.\n To learn about routing and postroute optimization, see the following topics: Introduction to Zroute Basic Zroute Flow Prerequisites for Routing Defining Vias Inserting Via Ladders Checking Routability Routing Constraints Routing Application Options Routing Clock Nets Routing Critical Nets Routing Secondary Power and Ground Pins Routing Signal Nets Shielding Nets Performing Postroute Optimization Analyzing and Fixing Signal Electromigration Violations Performing ECO Routing Routing Nets in the GUI Cleaning Up Routed Nets 438 Introduction to Zroute Feedback Analyzing the Routing Results Saving Route Information Deriving Mask Colors Inserting and Removing Cut Metal Shapes"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Via Ladder Constraints"}, {"role": "assistant", "content": "The via ladder constraints define the pins on which to insert via ladders and the via ladder templates that can be used for those pins.\n You can define both global and instance- specific via ladder constraints; if the constraints conflict, the instance-specific constraints override the global constraints.\n To define global via ladder constraints, which are referred to as via ladder rules, use the set_via_ladder_rules command, as described in Defining Global Via Ladder Constraints To define instance-specific via ladder constraints, use the set_via_ladder_constraints command, as described in Defining Instance-Specific Via Ladder Constraints In addition, you can specify via ladder candidates for specific pins by using the set_via_ladder_candidate command.\n This command is used by preroute optimization to insert via ladders on timing-critical paths, as described in Specifying Automatic Via Ladder Insertion Settings for Preroute Optimization To report the via ladder constraints, use the report_via_ladder_constraints command.\n See Also Inserting Via Ladders"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Effective Resistance Analysis"}, {"role": "assistant", "content": "Note: Effective resistance analysis is supported in both RedHawk Fusion and RedHawk-SC Fusion analysis flows.\n To calculate effective resistance for the specified power and ground nets, use the analyze_rail -effective_resistance command.\n To specify a list of cell instances for effective resistance calculation, describe the target instances in a text file.\n Then specify this text file with the rail.effective_resistance_instance_file application option.\n For example, fc_shell> sh cat cell_list.txt u_GS_PRO_65 u_GS_PRO_64 ChipTop_U_compressor_mode/U3 fc_shell> set_app_options \\ -name rail.effective_resistance_instance_file \\ -value cell_list.txt fc_shell> analyze_rail -nets {VDD VSS} -effective_resistance You can perform effective resistance analysis before or during voltage drop analysis.\n When the analysis is completed, the tool writes the effective resistance values into the same rail result with the voltage drop results.\n Note: In the RedHawk-SC rail analysis flow, you must specify both the -effective_resistance and -voltage_drop options for effective resistance calculation.\n When the calculation is complete, the tool saves the results in the working directory.\n To write the effective resistance values to a text file, use the report_rail_result -type effective_resistance command.\n To query the resistance value, use the get_attribute command.\n For example, fc_shell> get_attribute [get_pins u_GS_PRO_65/VDD] \\ effective_resistance 914 Performing Distributed RedHawk Fusion Rail Analysis Feedback See Also Specifying RedHawk and RedHawk-SC Working Directories Writing Analysis and Checking Reports"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Placement of Multivoltage Cells"}, {"role": "assistant", "content": "A net that connects a multivoltage cell, such as a level-shifter cell or an isolation cell, to at least one cell in another voltage area is referred to as a multivoltage net.\n To reduce the length of multivoltage nets, enable advanced multivoltage cell placement by setting the place.coarse.enable_advanced_mv_cell_placement application option to true When you enable this feature, the tool reduces the length of the multivoltage nets by placing the multivoltage cells closer to the voltage area boundaries.\n To optimize multivoltage nets, the tool uses dual-rail buffers.\n By reducing the length of multivoltage nets, the tool can reduce the number of dual-rail buffers used during optimization and prevent unoptimized multivoltage nets due to the unavailability of dual-rail buffers."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers on Nets"}, {"role": "assistant", "content": "To add buffers on nets connected to specified pins, use the add_buffer command.\n Specify the following options when using the add_buffer command: -new_net_names : Specifies the names of the new nets to add.\n You must specify one net name per buffer when adding buffers, and two net names per inverter pair when adding inverter pairs.\n -new_cell_names : Specifies the names of the new cells to be added.\n You must specify one cell name per buffer when adding buffers, and two cell names per inverter pair when adding inverter pairs.\n -inverter_pair : Adds inverter pairs instead of buffer cells.\n If you specify this option, you must supply a library cell that has an inverting output.\n -respect_voltage_areas : Inserts buffers within the hierarchy of the voltage area such that the buffer is physically in the layout.\n This option is mutually exclusive with the -snap option.\n -no_of_cells : Specifies the number of buffer cells or inverter pairs to be inserted per net.\n -object_list : Specifies a list of nets, pins, or ports that must be buffered.\n The new buffer cells or inverter pairs are placed close to the specified pins or ports if their cells are placed.\n 963 Adding Buffers on Routed Nets Feedback -lib_cell : Specifies the library cell to be used as buffer.\n In this case, the object is either a named library cell or a library cell collection.\n This is a required option.\n This option is mutually exclusive with buffer_lib_cell -snap : Puts the new buffer cells next to the target cell, then snaps the buffer cells to the closest site, and flips the buffer cells when needed."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Updating Activity for Improved Power Optimization"}, {"role": "assistant", "content": "The PrimePower In-Design flow in the Fusion Compiler tool uses input waveform information from the RTL FSDB file and performs time-based analysis to update the activity for enhanced power estimation accuracy.\n Figure 26 shows the PrimePower in- design flow in the Fusion Compiler tool, indicating points in the flow where you can run the PrimePower tool.\n For the best correlation with standalone PrimePower time-based analysis results, run the PrimePower tool after the route_opt command.\n 193 Setting Up for Power-Related Features Feedback Figure 26 The PrimePower In-Design Flow Use the set_indesign_primepower_options command to set PrimePower analysis options for the In-Design flow.\n You must specify the RTL activity file with the -fsdb option and the path to the PrimePower executable with the -pwr_shell option.\n Other options allow you to specify details about the FSDB file, settings for distributed or concurrent processing, settings for scenarios and libraries, and output files.\n Use the update_indesign_activity command to perform the analysis, which includes the following tasks: Invokes the PrimePower tool and reads the design data which includes the netlist, libraries, PVT settings, constraints, parasitics, essential name mapping data, UPF, and so on.\n Library details come from the design database stored in the Fusion Compiler tool memory.\n Reads the RTL FSDB file into the PrimePower tool and performs time-based analysis to generate a gate-level SAIF.\n Reads the gate-level SAIF back into the Fusion Compiler tool.\n Set the power scenario as the current scenario before starting analysis with the update_indesign_activity command.\n Activity is refreshed for the current scenario.\n If you specify multiple scenarios using the -scenarios option of the set_indesign_primepower_options command, the refreshed gate-level SAIF from the PrimePower tool is read back into the Fusion Compiler tool for all of the specified scenarios.\n 194 Setting Up for Power-Related Features Feedback The PrimePower In-Design UI allows you to pass input waveforms using the native ZeBu database (ZTDB).\n The -ztdb option of the set_indesign_primepower_options command sets up PrimePower In-Design to create a script using the update_indesign_activity command.\n This script uses the PrimePower read_ztdb command to perform time-based analysis and issues a gate-level SAIF file that is automatically back-annotated into the Fusion Compiler tool.\n Specifying Distributed Analysis For faster runtime, use distributed analysis, which is disabled by default in the PrimePower tool.\n To enable distributed analysis in the PrimePower tool, specify the following options with the set_indesign_primepower_options command: -num_processes : Use this option to specify the number of hosts to launch.\n The value must be greater than 1.\n -submit_command or -host_names : Use either of these options to specify the configuration of host machines.\n -max_cores : Use this option to specify the maximum number of cores.\n The default is 4.\n The tool prints the following message if valid options are specified: Information: PrimePower is being called in distributed mode"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Via Ladder Connections"}, {"role": "assistant", "content": "If a pin has a via ladder, by default, Zroute connects to the topmost layer of a via ladder and not directly to the existing pin geometry.\n To modify the connection constraints, set the following application options: route.detail.via_ladder_upper_layer_via_connection_mode To allow vias to connect to the top level of a via ladder from below, set this application option to any route.detail.allow_default_rule_nets_via_ladder_lower_layer_connection To allow nets with default routing rules to connect directly to the pin or to any layer of the via ladder, set this application option to true 518 Routing Application Options Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing PG Electromigration Analysis Results"}, {"role": "assistant", "content": "When PG electromigration analysis is complete, you can check for current violations by displaying a PG electromigration map or checking the generated errors in the error browser.\n Displaying the PG Electromigration Map Checking PG Electromigration Violations"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Loading and Applying UPF Information"}, {"role": "assistant", "content": "To load the power intent and apply it to a multivoltage design, 1.\n Read the UPF file by using the load_upf command.\n fc_shell> load_upf block.upf 2.\n If you are using the golden UPF flow and have a name-mapping file, read the file by using the read_name_map command.\n fc_shell> read_name_map block.nmf 3.\n (Optional) Verify the UPF consistency and identify any PG conflicts among the netlist, floorplan, and power intent.\n To verify the UPF consistency and identify PG conflicts, use the resolve_pg_nets -check_only command.\n This command identifies any issues and reports the changes that are made to resolve these issues when you commit the power intent.\n If you prefer to resolve the issues differently, you can use manual editing commands to resolve the issues before running the commit_upf command.\n 4.\n Commit the power intent by using the commit_upf command.\n fc_shell> commit_upf The commit_upf command performs global checks for UPF consistency; resolves PG conflicts among the netlist, floorplan, and UPF specification; and associates power strategies with existing multivoltage cells.\n For more information about associating 114 Setting Up Multivoltage Designs Feedback power strategies with existing multivoltage cells, see Associating Power Strategies With Existing Multivoltage Cells 5.\n Report the associations made for the multivoltage cells by using the report_mv_path command.\n If the tool failed to associate any multivoltage cells, the command reports the causes for these failures.\n You must successfully commit the power intent before you continue with the design flow.\n Note: After successfully running the commit_upf command, the tool issues an error message if you try to use additional UPF commands, except for the set_related_supply_net connect_supply_net set_design_attributes set_port_attributes find_objects, and set_scope commands.\n To modify the power intent after running the commit_upf command, you must remove the existing UPF specification by using the reset_upf command and then reload the power intent."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Arrays During Placement"}, {"role": "assistant", "content": "A sequential array, which is commonly used in storage devices, is a group of registers that are arranged as a two-dimensional array.\n The clock pins of the registers along a row of a sequential array are usually driven by a single clock-gating cell.\n To consider the clock-gating cells of a sequential array during placement, set the place.coarse.seq_array_icg_aware application option to true.\n Doing so can reduce the congestion caused by the clock nets."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Supporting RedHawk-SC Customized Python Script Files"}, {"role": "assistant", "content": "RedHawk-SC Fusion provides application options and commands to read in user- customized python script files.\n The tool generates all design collaterals (including DEF, LEF, SPEF, TWF and PLOC) from the design library and adds them to the user-customized python script to run voltage drop analysis in a single iteration of analyze_rail.\n The user-customized python script file is supported in rail analysis with multiple rail scenarios, as well as other IR-driven features, such as IR-driven placement or IR-driven concurrent clock and data optimization.\n To use a customized python script file for RedHawk-SC Fusion rail analysis, 1.\n Set the type of script file to python fc_shell> set_app_options -name rail.generate_file_type -value python 2.\n Set the rail.generate_file_variables application option to specify the variables for generating the input files (including DEF, LEF, SPEF, TWF and PLOC files) to add to the user-customized python script file.\n You do not need to set this application option if the customized python script file uses the same values as in RedHawk-SC Fusion.\n DEF File LEF File SPEF File TWF File PLOC File Default name in fc_shell DEF LEF SPEF TWF PLOC Default variable name in RedHawk-SC Fusion def_files lef_files spef_files tw_files ploc For example, if you specify a test_def_file for the DEF variable to match with the DEF file specified in the customized python script file, set the following: fc_shell> set_app_options -name rail.generate_file_variables \\ -value {DEF test_def_files} 3.\n Create and specify rail scenarios for generating the necessary input files to add to the customized python script.\n Run the create_rail_scenario command to create a rail scenario and associate it with a design scenario in the current design.\n You can create multiple rail scenarios and associate them with the same scenario in the current design.\n Then run the set_rail_scenario -generate_file {LEF | TWF | DEF | SPEF | PLOC} command to specify the rail scenario and the type of input files to generate from the design library.\n 881 Preparing Design and Input Data for Rail Analysis Feedback Note: When running rail analysis using multicorner-multimode technology, you must create rail scenarios using the create_rail_scenario command before the set_rail_scenario command.\n The following example creates the T_low and T_high rail scenarios and generates input files for them: fc_shell> create_rail_scenario -name T_low -scenario func_cbest fc_shell> set_rail_scenario -name T_low -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py fc_shell> create_rail_scenario -name T_high -scenario func_cbest fc_shell> set_rail_scenario -name T_high -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py You can then use the customized.py file for multi-rail-scenario rail analysis or other IR- driven features, such as IR-driven placement or IR-driven concurrent clock and data optimization.\n Examples The following example uses a customized python script for multi-rail-scenario rail analysis on a grid system.\n #Required.\n Specify the below options to enable multi-rail-scenario rail analysis.\n set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true #Required.\n Set the type of the script file to python.\n set_app_options -name rail.generate_file_type -value python #Use user-defined test_def_files for DEF variable to match #with customized python.\n set_app_options -name rail.generate_file_variables \\ -value {DEF test_def_files } create_rail_scenario -name func.ss_125c -scenario func.ss_125c set_rail_scenario -name func.ss_125c -voltage_drop dynamic create_rail_scenario -name func.ff_125c_ -scenario func.ff_125c set_rail_scenario -name func.ff_125c \\ -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py 882 Preparing Design and Input Data for Rail Analysis Feedback set_host_options -submit_protocol sge \\ -submit_command {qsub -V -notify -b y \\ -cwd -j y -P bnormal -l mfree=16G} analyze_rail -rail_scenario {func.ss_125c func.ff_125c} \\ -submit_to_other_machine The following example uses a customized python script for multi-rail-scenario rail analysis on a local machine.\n #Required.\n Specify the below options to enable multi-rail-scenario rail analysis.\n set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true #Required.\n Set the type of the script file to python.\n set_app_options -name rail.generate_file_type -value python #Use user-defined test_def_files for DEF variable to match #with customized python.\n set_app_options -name rail.generate_file_variables \\ -value {DEF test_def_files } create_rail_scenario -name func.ss_125c -scenario func.ss_125c set_rail_scenario -name func.ss_125c -voltage_drop dynamic create_rail_scenario -name func.ff_125c_ -scenario func.ff_125c set_rail_scenario -name func.ff_125c \\ -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py set_host_options -submit_command {local} analyze_rail -rail_scenario {func.ss_125c func.ff_125c} The following example uses a customized python script for single-scenario rail analysis on a grid system.\n Required.\n Specify the below options to enable multi-rail-scenario rail analysis.\n set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true #Required.\n Set the type of the script file to python.\n set_app_options -name rail.generate_file_type -value python #Use user-defined test_def_files for DEF variable to match #with customized python.\n 883 Preparing Design and Input Data for Rail Analysis Feedback set_app_options -name rail.generate_file_variables \\ -value {DEF test_def_files } create_rail_scenario -name func.ff_125c_ -scenario func.ff_125c set_rail_scenario -name func.ff_125c \\ -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py set_host_options -submit_protocol sge \\ -submit_command {qsub -V -notify -b y \\ -cwd -j y -P bnormal -l mfree=16G} analyze_rail -rail_scenario {func.ff_125c} \\ -submit_to_other_machine The following example uses a customized python script for IR-driven placement on a grid system.\n Required.\n Specify the below options to enable multi-rail-scenario rail analysis.\n set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true #Required.\n Set the type of the script file to python.\n set_app_options -name rail.generate_file_type -value python #Use user-defined test_def_files for DEF variable to match #with customized python.\n set_app_options -name rail.generate_file_variables \\ -value {DEF test_def_files } create_rail_scenario -name func.ss_125c -scenario func.ss_125c set_rail_scenario -name func.ss_125c -voltage_drop dynamic create_rail_scenario -name func.ff_125c_ -scenario func.ff_125c set_rail_scenario -name func.ff_125c \\ -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py set_host_options -submit_protocol sge \\ -submit_command {qsub -V -notify -b y \\ -cwd -j y -P bnormal -l mfree=16G} # Enable IR-driven placement before running clock_opt -from final_opto set_app_options -name opt."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Editability of Blocks From the Top-Level"}, {"role": "assistant", "content": "For designs with physical hierarchy, you can specify if changes can be made to lower-level blocks by using the set_editability command at the top level.\n You can change the editability of Specific blocks by using the -blocks option All blocks starting from a specific level of the physical hierarchy by using the -from_level option All blocks up to a specific level of the physical hierarchy by using the -to_level option For top-level implementation flows with read-only abstracts, after you link the design, explicitly set the lower-level blocks as read-only by using the following command: fc_shell> set_editability -blocks [get_blocks -hierarchical] \\ -value false By default, if you change a library or block name with one of the following commands, the tool does not propagate the editability settings from the old reference to the new reference: change_abstract -lib link_block -rebind -force set_reference To retain the editability settings, set the design.preserve_reference_editability application option to true before you change a library or block name.\n When you save the hierarchical design with the save_block command, the editability settings are saved.\n 841 Preparing for Top-Level Closure With Abstracts Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing IR-Drop-Aware Placement"}, {"role": "assistant", "content": "During placement, the tool can use the voltage (IR) drop values of cells to identify areas of high power density and spread the cells with high voltage drop values, which reduces the power density of such areas.\n To perform IR-drop-aware placement, use the following steps: 1.\n Place and legalize the block.\n 2.\n Set up for RedHawk Fusion and perform static or dynamic voltage drop analysis by using the analyze_rail -voltage_drop command as shown in the following example: fc_shell> source redhawk_setup.tcl fc_shell> analyze_rail -voltage_drop static -nets {VDD VSS} For more information, see Performing Voltage Drop Analysis 3.\n Enable IR-drop-aware placement by setting the place.coarse.ir_drop_aware application option to true 159 Specifying Placement Settings Feedback 4.\n (Optional) Specify additional settings for IR-drop-aware placement, as described in Controlling IR-Drop-Aware Placement 5.\n Rerun placement.\n Note: To perform IR-drop-aware placement, you must have Digital-AF and SNPS_INDESIGN_RH_RAIL license keys."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimization"}, {"role": "assistant", "content": "A via ladder is a stacked via that starts from the pin layer and extends into the upper routing layers.\n Using via ladders during optimization improves the performance and electromigration robustness of a design.\n The tool can automatically insert via ladders for cell pins on timing-critical paths during the compile_fusion and clock_opt commands.\n To perform via ladder insertion during preroute optimization, 1.\n Ensure that the via ladder rules are defined as described in Defining Via Ladder Rules 2.\n Specify the via ladders that can be used for specific library pins by using the set_via_ladder_candidate command, as described in Specifying Via Ladder Candidates for Library Pins 3.\n (Optional) Enable high-performance and electromigration via ladder insertion for critical paths by setting the opt.common.enable_via_ladder_insertion application option to true 4.\n (Optional) Enable the insertion of global-route-based via ladders on pins with via ladder constraints by setting the route.global.insert_gr_via_ladders application option to true 5.\n Perform optimization using the compile_fusion or clock_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Multicore Processing"}, {"role": "assistant", "content": "Several functions in the Fusion Compiler tool support multicore processing, whether through multithreading, distributed processing, or parallel command execution.\n Multicore 63 Enabling Multicore Processing Feedback processing improves turnaround time by performing tasks in parallel much more quickly than if they were run sequentially on a single core.\n Note: A single machine has one or more CPUs and each CPU has one or more cores.\n The total number of cores available for processing on a machine is the number of CPUs multiplied by the number of cores in each CPU.\n When using multicore processing, you need one Fusion Compiler license for every 16 parallel tasks.\n For example, to run 17 parallel tasks, you need 2 Fusion Compiler licenses.\n In most cases, you configure multicore processing by using the set_host_options command.\n The following topics describe how to use the set_host_options command to configure multicore processing: Configuring Multithreading Configuring Distributed Processing Reporting Multicore Configurations Removing Multicore Configurations The following topic describes how to use distributed processing to run the same task on several blocks in a hierarchical design: Running Tasks in Parallel The following topic describes how to use parallel command execution for checking and reporting commands: Running Commands in Parallel on Your Local Host"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I ECO Flow"}, {"role": "assistant", "content": "An engineering change order (ECO) is an incremental change made to a complete or nearly complete design.\n You can use ECOs to fix functional, timing, noise, and crosstalk violations without synthesizing, placing and routing the entire design.\n You can also use ECOs to implement late-arriving design changes while maintaining design performance.\n The following topics describe the various ECO flows supported in the Fusion Compiler tool, and tasks you perform in these flows: Generic ECO Flow for Timing or Functional Changes Freeze Silicon ECO Flow Signoff ECO Flow Incremental Signoff ECO Flow ECO Fusion Flow ECO Fusion Power Integrity Flow Manually Instantiating Spare Cells Automatically Adding Spare Cells Adding Programmable Spare Cells Making ECO Changes Using the eco_netlist Command Making ECO Changes Using Netlist Editing Commands Resizing Cells Adding Buffers on Nets Adding Buffers on Routed Nets Optimizing the Fanout of a Net Reporting Available Sites for Placing ECO Cells Identifying and Reverting Nonoptimal ECO Changes Placing ECO Cells 948 Generic ECO Flow for Timing or Functional Changes Feedback Placing and Mapping ECO Cells to Spare Cells Updating Supply Nets for ECO Cells Recording the Changes Made to a Layout Performing Prerequisite Check for Group Repeater Insertion and Placement Adding a Group of Repeaters Querying Group Repeater Swapping Variant Cell Fixing Multivoltage Violations"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Level-Based Clock Nondefault Routing Rule"}, {"role": "assistant", "content": "During clock tree synthesis, you can assign continuous nondefault routing rule to nets based on different levels of the clock tree.\n The tool implements the changes only during the initial clock tree synthesis and assigns nondefault routing rule in the following ways: Nets connected to pure sink carry sink nondefault routing rule Nets connected to both sink and intermediate cells (repeaters or clock gates) must receive internal nondefault routing rule Nets at root level until the branching point downstream must get root nondefault routing rule Figure 29 Level-Based Clock Nondefault Routing Rule 205 Specifying the Routing Resources Feedback As shown in the figure, after clock tree synthesis: Without the level-based clock nondefault routing rule: The n1 and n3 nets must get sink nondefault routing rule after compiling the clock tree because they are connected to at least one sink.\n These nets leave the discontinuous nondefault routing rules applied at different levels.\n With the level-based clock nondefault routing rule: All the nondefault routing rules in a clock tree path must be in a topologically sorted order from clock root to sinks, that is, Root nondefault routing rule > Internal nondefault routing rule > Sink nondefault routing rule.\n Therefore, n1 and n2 nets are assigned with internal nondefault routing rule while net n3 is assigned to a sink nondefault routing rule.\n To enable the level-based clock nondefault routing rule application, use the following application option: fc_shell> set_app_options -list {cts.compile.topological_ndr true}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Sink Pins"}, {"role": "assistant", "content": "To define one or more pins as sink pins, use the following syntax: set_clock_balance_points -clock clock -consider_for_balancing true -balance_points pins [-corners corners The -clock option is not required.\n If you do not use it, the sink pin applies to all clocks.\n By default, the insertion delay for the user-specified sink pins is 0.\n For information about overriding the default insertion delay, see Defining Insertion Delay Requirements When you define sink pins, by default, they apply to all corners.\n To apply the definition to specific corners, use the -corners option.\n For example, to specify pin U2/A as a sink pin for the CLK clock in the current corner, use the following command: fc_shell> set_clock_balance_points -clock [get_clocks CLK] \\ -consider_for_balancing true -balance_points [get_pins U2/A] To report the user-defined sink pins, use the remove_clock_tre_exceptions comand-stop_pinscomandsremove_clock_tre_exceptions-stop_pins report_clock_balance_points command.\n This command reports both the user-defined sink pins and the user-defined ignore pins.\n To remove the sink pin definition from a pin, use the remove_clock_tre_exceptions comand-stop_pinscomandsremove_clock_tre_exceptions-stop_pins remove_clock_balance_points command.\n For example, to remove the sink pin definition from the U2/A pin for the CLK clock, use the following command: fc_shell> remove_clock_balance_points -clock [get_clocks CLK] \\ -balance_points [get_pins U2/A]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Wire Spreading"}, {"role": "assistant", "content": "After you have performed detail routing and redundant via insertion, you can perform wire spreading to increase the average spacing between wires, which reduces the critical area short faults and therefore improves yield.\n To perform wire spreading, use the spread_zrt_wires comandcomandspread_zrt_wires spread_wires command.\n By default, the spread_wires command uses the following settings to spread the signal wires on the same layer: To perform wire spreading, use the spread_zrt_wires comandcomandspread_zrt_wires spread_wires command.\n By default, the spread_wires command uses the following settings to spread the signal wires on the same layer: Spreads the wires by half a pitch in the preferred direction To modify the spread distance, use the -pitch option.\n You specify the spread distance as a multiplier for the layer pitch.\n For example, to specify a spread distance of 1.5 times the layer pitch, use the following command: fc_shell> spread_wires -pitch 1.5 Uses twice the layer pitch as the minimum jog length To modify the minimum jog length, use the -min_jog_length option.\n You specify the minimum jog length as an integer multiple of the layer pitch.\n Uses the minimum layer spacing plus one half the layer pitch as the minimum jog length To modify the minimum jog spacing, use the -min_jog_spacing_by_layer_name option.\n You specify the minimum jog spacing in microns for each layer.\n The tool uses the default jog spacing for any unspecified layers.\n Figure 126 shows how the jog length and jog spacing values are used in wire spreading.\n Figure 126 Wire Spreading Results 633 Reducing Critical Areas Feedback In the following example, the minimum jog length is set to three times the layer pitch, the minimum jog spacing for the M1 layer is set to 0.07 microns, and the minimum jog spacing for the M2 layer is 0.08 microns.\n All other metal layers use the default minimum jog spacing.\n fc_shell> spread_wires -min_jog_length 3 \\ -min_jog_spacing_by_layer_name {{M1 0.07} {M2 0.08}} After spreading, the spread_wires command performs detail routing iterations to fix any DRC violations caused as a result of spreading.\n When you change the layout, it can change the timing of your block.\n Wire spreading has a timing-preservation mode that allows you to perform wire spreading without affecting the block timing.\n To enable timing-preservation mode for wire spreading, define the timing preservation constraints by using the following options with the spread_wires command: -timing_preserve_setup_slack_threshold threshold -timing_preserve_hold_slack_threshold threshold -timing_preserve_nets nets The threshold values are floating-point numbers in library units.\n Wire spreading is performed only on nets with slack greater than or equal to the specified values or the nets specified in the -timing_preserve_nets option, as well as adjacent nets on the same layer within two routing pitches."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up for Power-Related Features"}, {"role": "assistant", "content": "The following topics describe the tasks you need to perform for setting up a design for power-related features: Annotating the Switching Activity Enabling Leakage Power Optimization for the compile_fusion Command Enabling Power Optimization for the clock_opt Command Improving Yield By Limiting the Percentage of Low-Threshold-Voltage (LVT) Cells Updating Activity for Improved Power Optimization Enabling the Power Integrity Features"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Filler Cells"}, {"role": "assistant", "content": "Filler cells inserted by the Fusion Compiler tool have instance names that start with the string xofiller.\n To remove all the filler cells from a block, use the remove_cells command, as shown in the following example: fc_shell> remove_cells [get_cells xofiller*] If you used the standard filler cell insertion flow and want to remove only those filler cells with DRC violations, use the remove_stdcell_fillers_with_violation command, as described in Checking for Filler Cell DRC Violations"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimizing Pin Access During Legalization"}, {"role": "assistant", "content": "For advanced technology nodes, to improve the routability of areas with high pin densities by redistributing the cells, enable pin optimization during legalization by setting the place.legalize.optimize_pin_access_using_cell_spacing application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Switching Probability for Supply Nets"}, {"role": "assistant", "content": "The leakage power of a block is scaled based on the switching probability of its supply nets, which represents the fraction of time a supply net is in the on state.\n You can specify the switching probability for one or more supply nets by using the set_supply_net_probability -static_probability command.\n By default, the switching probability is applied to the current scenario and the corresponding mode and corner.\n To specify modes, corners, or scenarios in which to apply the setting, use the -modes -corners, or -scenarios option.\n To get the switching probability of a supply net, use the get_supply_net_probability command, and to reset the value, use the reset_supply_net_probability command.\n By default, the tool propagates supply net activity through power switches and determines the static probability of the switched supply net based on the UPF power switch constraint.\n For example, consider the following UPF power switch constraint: create_power_switch my_switch \\ -output_supply_port {vout VDDS} \\ -input_supply_port {vin VDD} \\ -control_port {ms_sel ctrl1} \\ -control_port {ms_ctrl ctrl2} \\ -on_state {on vin {ms_ctrl &&!ms_sel}} 188 Setting Up for Power-Related Features Feedback The tool derives the static probability of the supply net named VDDS, which is connected to the output of the power switch, based on the probability of the power switch being on This is derived based on the following: The Boolean function specified with the -on_state option, which is ms_ctrl &&!\n ms_sel, and the switching activity (static probability) of the nets connected to the corresponding control ports, which are nets named ctrl1 and ctrl2.\n The switching probability of the supply net connected to the input supply port specified with the -on_state option, which is the supply net named VDD.\n The following application options control whether dynamic and leakage power are scaled based on the supply switching activity: The power.scale_dynamic_power_at_power_off option controls whether dynamic power is scaled.\n The default is false (no scaling).\n The power.scale_leakage_power_at_power_off option controls whether leakage power is scaled.\n The default is true (scaling is performed)."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Multiple-Patterning Concepts"}, {"role": "assistant", "content": "At the 20-nm process node and below, printing the required geometries is extremely difficult with the existing photolithography tools.\n To address this issue, a new technique, multiple patterning, is used to partition the layout mask into two or more separate masks, each of which has an increased manufacturing pitch to enable higher resolution and better printability.\n Figure 4 shows an example of double-patterning, where the layout mask is partitioned into two separate masks, MASK A and MASK B.\n Figure 4 Double-Patterning Example To use multiple patterning, you must be able to decompose the layout into two or more masks, each of which meets the multiple-patterning spacing requirements.\n A multiple- patterning violation occurs if your layout contains a region with an odd number of neighboring shapes where the distance between each pair of shapes is smaller than the multiple-patterning minimum spacing.\n This type of violation, which is called an odd cycle is shown in Figure 5 41 Fusion Compiler Concepts Feedback Figure 5 Odd-Cycle Violation If the spacing between any pair in the loop is greater than the multiple-patterning minimum spacing, no violation occurs and the layout can be decomposed.\n For example, in Figure 6 if the spacing,, between segments B and C is greater than the multiple-patterning minimum spacing, there is no odd cycle and the layout can be decomposed.\n Figure 6 No Odd-Cycle Violation The Fusion Compiler tool ensures that the generated layout is conducive to double patterning by considering the multiple-patterning spacing requirements during placement and routing and preventing odd cycles.\n In general, double patterning is performed only on the bottom (lowest) metal layers, which are referred to as multiple-patterning layers.\n The metal shapes on the multiple-patterning layers must meet the multiple-patterning spacing requirements, whether they are routing shapes or metal within the standard cells and macros.\n The metal shapes on other layers do not need to meet the stricter multiple-patterning spacing requirements.\n 42 Fusion Compiler Concepts Feedback Multiple-patterning considerations affect all parts of the place and route flow.\n Depending on your standard cell library, you follow either an uncolored or precolored multiple- patterning flow.\n You use the uncolored flow if the cells in your standard cell library have sufficient spacing to the cell boundaries to ensure that multiple-patterning violations do not occur during placement.\n This type of library is referred to as a correct-by-construction library most multiple-patterning libraries are correct-by-construction libraries.\n In the uncolored flow, the tool determines the appropriate mask settings for the pins and net shapes.\n You use the precolored flow if the cells in your standard cell library have assigned masks on the metal shapes inside the cells.\n These assigned masks are often referred to as colors and this type of library is referred to as a precolored library In the precolored flow, the tool must consider these mask assignments to ensure that multiple-patterning violations do not occur during placement.\n The tool also uses the mask assignments to determine the appropriate mask settings for the pins and net shapes.\n The mask assignments are represented as mask constraints in the Fusion Compiler tool.\n You must ensure that the mask constraints are properly set before starting place and route.\n For information about the mask constraints, see Mask Constraints"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Standard Filler Cell Insertion"}, {"role": "assistant", "content": "The standard filler cell insertion flow uses the create_stdcell_fillers command to insert filler cells in the block and the remove_stdcell_fillers_with_violation command to perform design rule checking on the filler cells and remove filler cells with violations.\n During filler cell insertion, the create_stdcell_fillers command uses the placement legalizer to ensure that the inserted filler cells honor advanced node placement rules and physical constraints such as placement blockages and keepout margins.\n When the place.legalize.enable_advanced_legalizer application option is set to true the command uses the advanced legalization algorithms for 2D rule checking and cell interaction, which can reduce filler cell insertion runtime.\n To insert filler cells in your block, 1.\n Ensure that the block is legalized by using the check_legality command.\n When verifying that a block is fillable, the check_legality command assumes that all standard cells that have a design_type attribute of filler can be used as filler cells.\n However, the create_stdcell_fillers command inserts only the cells specified in 637 Inserting Filler Cells Feedback the -lib_cells option.\n This difference might result in unfillable gaps after filler cell insertion even though the check_legality command did not report any issues.\n 2.\n (Optional) Insert required filler cells to abut specific standard cells by using the create_left_right_filler_cells command, as described in Abutting Standard Cells With Specific Filler Cells 3.\n (Optional) Enable multithreaded filler cell insertion by using the set_host_options command to specify the multicore configuration.\n fc_shell> set_host_options -max_cores The create_stdcell_fillers command uses the multicore configuration only when the technology file contains minimum threshold voltage, oxide-diffusion (OD), or trimpoly (TPO) rules.\n Note: The multicore configuration specified with the set_host_options command applies to all Fusion Compiler commands that support multicore processing.\n 4.\n Insert metal filler cells by using the create_stdcell_fillers command.\n Use the -lib_cells option to specify the metal filler library cells to insert.\n The command tries to insert the filler cells in the order that you specify; for the best results, specify them from the largest to the smallest.\n To determine the filler cells available in a cell library, use the following command: fc_shell> get_lib_cells ref_lib /* -filter \"design_type==filler\" To sort the filler cells by decreasing size, use the sort_collection command, as shown in the following example: fc_shell> set FILLER_CELLS \\ [get_object_name [sort_collection -descending \\ [get_lib_cells ref_lib /* -filter \"design_type==filler\"] area]] For more information, see Controlling Standard Filler Cell Insertion 5.\n Connect the inserted filler cells to the power and ground (PG) network by using the connect_pg_net -automatic command.\n 6.\n Remove the metal filler cells with DRC violations by using the remove_stdcell_fillers_with_violation command.\n Removing the filler cells can expose new violations; therefore, you must sometimes run this command multiple times to remove all violating filler cells.\n For more information, see Checking for Filler Cell DRC Violations 638 Inserting Filler Cells Feedback 7.\n Insert nonmetal filler cells by using the create_stdcell_fillers command.\n Use the -lib_cells option to specify the nonmetal filler library cells to insert.\n The tool tries to insert the filler cells in the order that you specify; for the best results, specify them from the largest to the smallest.\n For more information, see Controlling Standard Filler Cell Insertion 8.\n Connect the inserted filler cells to the PG network by using the connect_pg_net -automatic command.\n See Also Generic ECO Flow for Timing or Functional Changes Removing Filler Cells"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Clock Straps"}, {"role": "assistant", "content": "You can create clock straps, which are straight metal shapes in a single routing layer, by using the create_clock_straps command.\n You can use this command to implement A clock mesh, which is a two-dimensional grid in a horizontal and a vertical layer, where the straps are connected by vias at the intersection points, as shown in Figure 89 A clock spine, which can be either a one- or two-dimensional structures.\n One-dimensional spines are straps in a single direction.\n Two-dimensional spines consists of one-dimensional spines connected to multiple stripes in the orthogonal direction.\n Stripes connected to one spine do not connect to stripes of a different spine and the minimum distance between the stripes of different spines is called the backoff, as shown in Figure 90 415 Implementing Multisource Clock Trees Feedback Figure 89 Clock Mesh Structure Boundary of clock mesh Start distance for Incremental step for subsequent straps (0,0) Start distance for Incremental step for subsequent straps first vertical strap first horizontal strap End distance for last vertical strap End distance for last horizontal strap 416 Implementing Multisource Clock Trees Feedback Figure 90 Clock Spine Structure Boundary of clock spine (0,0) Backoff Stripes Spine The horizontal and vertical start, end, and step distances are applicable for clock spine structures too.\n When you use the create_clock_straps command, To specify the clock net for which to create the structure, use the -net option.\n To specify the bounding box to confine the structure, use the -boundary option.\n To specify keepouts, use the -keepouts option.\n If part of a strap is over a keepout, by default, the tool splits the strap and creates the portions that are outsides the keepouts.\n However, you can disable splitting and specify that the tool not create a strap if it is over a keepout by using the -allow_splitting false option.\n To specify the layers on which create the straps, use the -layers option.\n The tool determines the direction of the straps based on the metal layer you specify.\n To create straps in both directions, specify a layer for each direction.\n To specify the width of the straps, use the -width option.\n 417 Implementing Multisource Clock Trees Feedback To specify where to create the straps, use the -grid option as follows: To create a single horizontal or vertical strap, specify the distance from the x- or y- axis.\n To create a multiple straps in a single direction, specify an iterator list consisting of the start distance to the first strap, the end distance to the last strap, and the incremental distance between straps.\n To create a multiple straps in a both the horizontal and vertical directions, specify an iterator list for each direction, starting with the horizontal direction.\n Use the -grid option to create multiple straps for both the clock mesh and clock spine structures.\n To specify a margin within which the tool can move a strap from the position it derives based on the -grid option settings, use the -margins option.\n If the tool cannot create a strap within the specified margin, due to obstructions or keepouts, it does not create the strap.\n By default, the tool uses a margin of zero and only creates the strap if it can do so at the exact position it derives.\n To create straps on the boundary specified with the -boundary option, use the -create_ends option.\n To allow straps that are unconnected to orthogonal straps, use the -allow_floating true option.\n By default, the tool does not allow orthogonal straps that are unconnected.\n To specify the type of straps to create, use the -type option and specify user_route stripe, or detect When you create straps in both direction, specify a list of two values starting with the type for the horizontal direction.\n You can specify detect as the type only when you are creating a clock spine structure and want the tool to detect and use existing spines.\n When you do so, you must specify a list consisting of the type for the orthogonal stripes and detect, with the type for the horizontal direction specified first in the list.\n In addition, when the tool detects existing spine, you can specify a minimum length for the spine, by using the -detect_length option.\n To specify the maximum length of the orthogonal stripes, when creating a clock spine structure, use the -length option.\n To specify the backoff distance between stripes of different spines, when creating a clock spine structure, use the -backoff option.\n 418 Implementing Multisource Clock Trees Feedback To specify the direction of the spines, when creating a clock spine structure and the tool is not detecting and using existing spines, use the -spine_direction option.\n To shield the straps with power and ground nets, use the -bias option.\n To shield the straps with specific nets, use the -bias_to_nets with the list of nets.\n To specify the distance from the shielding nets, use the -bias_margins option.\n To remove the straps of a specific clock net, use the -clear option.\n For example, the following command creates a clock mesh for the net named clk1_mesh that is bounded by coordinates (0,0) and (1200, 980).\n The straps are on layers M7 and M8 with a width of 2.4 units and of type stripe.\n The horizontal straps on layer M7 start at a distance of 20 units from the x-axis and repeat every 100 units, until they reach 1200 units from the x-axis.\n The vertical straps on layer M8 start at a distance of 60 units from the y- axis and repeat every 150 units, until they reach 980 units from the x-axis.\n fc_shell> create_clock_straps -nets [get_nets clk1_mesh] \\ -layers {M7 M8} -widths {2.4 2.4} -types {stripe stripe} \\ -grids {{20 1200 100} {60 980 150}}-boundary {{0 0} {1200 980}} The following example creates a two-dimensional spine structure that has spines on the vertical layer M8 with a width of 3.6 units and of type user_route and stripes on the horizontal layer M7 with a width of 2.4 units and of type stripe.\n The vertical spines on layer M8 start at a distance of 60 units from the y-axis and repeat every 150 units, until they reach 980 units from the x-axis.\n The horizontal stripes on layer M7 have a length of 120 units and they start at a distance of 20 units from the x-axis and repeat every 100 units, until they reach 1200 units from the x-axis.\n The minimum distance (backoff) between stripes of different spines is 5 units.\n fc_shell> create_clock_straps -nets [get_nets clk1_mesh] \\ -layers {M7 M8} -widths {2.4 3.6} -types {stripe user_route} \\ -grids {{20 1200 100} {60 980 150}} -length 120 -backoff 5"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preparing the Power Network"}, {"role": "assistant", "content": "To learn about preparing the power network for physical implementation, see Creating Logical Power and Ground Connections Creating Floating Logical Supply Nets"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I DRC Toolbar"}, {"role": "assistant", "content": "The DRC toolbar provides buttons that you can use to configure and run interactive design rule checking with Live DRC, and to view the reported DRC violations in the layout view.\n Figure 147 shows the DRC toolbar.\n 695 Performing Signoff Design Rule Checking Feedback Figure 147 DRC Toolbar Table 46 DRC Toolbar Buttons Button Description Runs design rule checking using Live DRC.\n Opens the dialog box to view and sets the Live DRC application options.\n Opens the dialog box to configure the rules to use for design rule checking.\n Selects the region in which to perform design rule checking.\n Resets the design rule checking region to that used in the previous Live DRC run.\n Enables or disables the error environment overlay of GDSII or OASIS shapes from lower level cells that contribute to DRC errors.\n The error environment overlay is available only when the signoff.physical.merge_stream_files application option is set before doing DRC checking.\n Clears or highlights all DRC violations detected by Live DRC.\n Iterates through the DRC violations for the current rule from Live DRC.\n Controls zoom or pan when iterating through the DRC violations.\n Shows the design rule being highlighted.\n 696 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Implementing a Structural Multisource Clock Tree"}, {"role": "assistant", "content": "In a structural multisource clock tree, the subtrees are driven directly by the clock mesh or through predefined drivers.\n These drivers are in turn driven by global clock distribution structure such as a clock mesh and H-tree.\n The local subtrees of a structural multisource clock tree are optimized by clock cell merging, splitting, sizing, and relocation, while preserving the levels of the user-defined clock tree structure.\n To implement a structural multisource clock tree, perform the following steps: 1.\n Specify your clock tree constraints and settings.\n 2.\n For multivoltage designs, Enable multivoltage support by using the following application option setting: fc_shell> set_app_options \\ -name cts.multisource.enable_full_mv_support -value true Enable the addition of physical feedthrough cells, which belong to a voltage area physically but not logically, by using the following application option setting: fc_shell> set_app_options \\ -name opt.common.allow_physical_feedthrough -value true Run the check_mv_design command and fix all multivoltage issues 3.\n Enable cell electromigration fixing by setting the cts.multisource.cell_em_aware application option to true 4.\n Create the clock mesh by using the create_clock_straps command, as described in Creating Clock Straps 5.\n Insert the mesh drivers by using the create_clock_drivers command, as described in Inserting Clock Drivers 405 Implementing Multisource Clock Trees Feedback 6.\n Build the global clock tree structure by using the synthesize_multisource_global_clock_trees command, as described in Synthesizing the Global Clock Trees 7.\n Model the delays of the mesh nets using set_annotated_delay and set_annotated_transition commands.\n The loads of the clock mesh are not finalized until the local subtrees are synthesized in step 6 and routed to the mesh in step 7.\n Therefore the clock mesh can only be analyzed after you complete those steps.\n However, to prevent the tool from seeing a very large delay through the clock mesh when synthesizing the local subtrees, annotate a realistic delay and transition value on the clock mesh net.\n 8.\n Build the local subtrees by using the synthesize_multisource_clock_subtrees command, as described in Building the Local Clock Subtree Structures 9.\n Route the connections between the clock mesh and the local subtrees by using the route_clock_straps command, as described in Routing to Clock Straps 10.\n Analyze the clock mesh by using the analyze_subcircuit command, as described in Analyzing the Clock Mesh 11.\n Synthesize the entire clock tree, from the clock root, by using the clock_opt -from build_clock -to route_clock command.\n During this step, the tool fixes DRC violations beyond ignore exceptions of the multisource clock tree, if applicable.\n You can also synthesize other clocks in the design that are not synthesized.\n 12.\n Analyze the clock tree results as described in Analyzing the Clock Tree Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Verifying Routing Corridors"}, {"role": "assistant", "content": "To successfully route a net within a routing corridor, the routing corridor must meet the following requirements: It must be a contiguous region; all regions that comprise the routing corridor must be connected.\n It must contain the pins that connect to the nets and supernets associated with the routing corridor.\n To verify that a routing corridor meets these requirements, use the check_routing_corridors command.\n fc_shell> check_routing_corridors RC_0 You can view the errors detected by the check_routing_corridors command in the message browser."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Variant-Aware Legalization"}, {"role": "assistant", "content": "To enable variant-aware legalization, set the place.legalize.enable_variant_aware application option to true When variant-aware legalization is enabled, the tool tries to fix legalization DRC violations by swapping the violating cell with a variant, rather than moving it.\n If the cell has no variants, it is moved to a legal location.\n For pin-track and pin-color alignment during variant-aware legalization, set the following application options to true place.legalize.enable_prerouted_net_check place.legalize.enable_pin_color_alignment_check In addition, you must specify the layers to be aligned by using the place.legalize.pin_color_alignment_layers application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Identifying Why Multibit Banking Is Not Performed"}, {"role": "assistant", "content": "To report a summary of the multibit banking ratio, a list of reasons for not banking or debanking cells, and the number of cells for each reason, use the report_multibit command, as shown in the following example: fc_shell> report_multibit **************************************** Report : report_multibit...\n...\n **************************************** Total number of sequential cells: 4020 Number of single-bit flip-flops: 3149 Number of single-bit latches: 29 Number of multi-bit flip-flops: 842 Number of multi-bit latches: 0 250 Performing Multibit Optimization Feedback Total number of single-bit equivalent cells: 853 (A) Single-bit flip-flops: 3149 (B) Single-bit latches: 29 (C) Multi-bit flip-flops: 5352 (D) Multi-bit latches: 0 Sequential cells banking ratio ((C+D)/(A+B+C+D)): 62.74% Flip-flop cells banking ratio ((C)/(A+C)): 62.96% BitsPerflop: 2.13 Reasons for sequential cells not mapping to multibit during RTL Banking: Explanations: r12: Cell is single bit because its parent multibit cell was debanked due to improve timing (Number of cells: 91) r31: Cell cannot be banked to multibit because it is assigned to use single-bit lib cell (Number of cells: 63) Reasons for multibit sequential cells not debanking to single bit cells during RTL Debanking: Explanations:: r45: Multibit cell cannot be debanked because it is not critical enough (Number of cells: 478) To report all the cells that are ignored during banking and debanking, use the -ignored_cells option with the report_multibit command.\n To report the compatible multibit and single-bit library cells that can be used for banking and debanking, use the check_multibit_library command.\n The following example generates a compatible library cell report for RTL banking and debanking: fc_shell> check_multibit_library -stage RTL \\ -banking -debanking **************************************** Report : check_multibit_library Flow : RTL BANKING **************************************** Single bit Lib cell Compatibility Multi bit Lib cell SB_reg1 PIN ORDER MISMATCH MB_reg1 SB_reg2 COMPATIBLE MB_reg2 Singlebit with NO Multibit Equivalents SB_reg3 251 Performing Multibit Optimization Feedback **************************************** Report : check_multibit_library Flow : RTL DEBANKING **************************************** Multi bit Lib cell Compatibility Single bit Lib cell MB_reg2 COMPATIBLE SB_reg2 MB_reg1 PIN ORDER MISMATCH SB_reg1 Multibit with NO Singlebit Equivalents MB_reg3"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Sequential Output Inversion"}, {"role": "assistant", "content": "By default, the compile_fusion command can map a register to a sequential library cell with an output that is opposite to that of the register, if it improves QoR.\n This is known as sequential output inversion.\n Sequential output inversion is also useful when mapping to a target library with sequential cells that have only one type of asynchronous inputs (either set or reset).\n In this case, the only way to map a register that uses the missing asynchronous inputs is to use a library cell with the opposite type of asynchronous input and invert the output of that cell, as shown in the following figure.\n This figure shows an example of sequential output inversion during mapping.\n ___ SET ___ RST QN ___ RST 235 Controlling Mapping and Optimization Feedback Note: Information about inverted registers is written to the verification guidance (.svf) file.\n You must include the.svf file in the Formality tool when verifying blocks with sequential output inversion.\n To control sequential output inversion for The entire block, use the compile.seqmap.enable_output_inversion application option.\n The default is true Specific hierarchical or leaf cells, use the set_register_output_inversion command.\n An instance-specific sequential output inversion setting specified with the set_register_output_inversion command overrides a block-specific setting specified with the compile.seqmap.enable_output_inversion application option.\n The compile_fusion command allows the mapping of sequential elements in the design to sequential library cells whose output phase is inverted.\n In certain cases, the tool might infer a register that has one type of asynchronous control, but your library has the opposite type of pin.\n In such cases, the tool maps to the opposite type of register and inverts all the data inputs and outputs."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining the Interclock Delay Balancing Constraints"}, {"role": "assistant", "content": "To define interclock delay balancing constraints, use the create_clock_balance_group command.\n At a minimum, you must specify a name for the clock balance group and the clocks in the group.\n To specify a name for the clock balance group, use the -name option.\n To specify the clock trees in the group, use the -objects option with the get_clocks command.\n By default, the clock balance group is defined for the clocks in the current mode.\n To define a clock balance group for the clocks of a specific mode, use the -objects option with the get_clocks -mode command.\n 386 Implementing Clock Trees and Performing Post-CTS Optimization Feedback For example, to define a clock balance group named group1 that contains the clocks named clk1 and clk2 in the current mode, use the following command: fc_shell> create_clock_balance_group -name group1 \\ -objects [get_clocks {clk1 clk2}] To define a clock balance group named group2 that contains all the clocks in the mode named m2, use the following command: fc_shell> create_clock_balance_group -name group2 \\ -objects [get_clocks -mode m2] By default, the tool has a goal of zero delay offset between clocks.\n All clocks are balanced with the same insertion delay which usually is the longest insertion delay among the clocks.\n To specify a delay offset between clocks in the group, use the -offset_latencies option.\n By default, the delay offset applies to the current corner.\n To apply the delay offset to a specific corner, use the -corner option.\n For example, assume the design has three clocks named clk1, clk2, and clk3.\n If you want the insertion delay of clk1 and clk2 to be the same and the insertion delay of clk3 to be 100 less than that of clk1 and clk2, use the following command: fc_shell> create_clock_balance_group -name group3 \\ -objects [get_clocks {clk1 clk2 clk3}] \\ -offset_latencies {0 0 -100} Reporting Clock Balance Groups To report clock balance groups, use the report_clock_balance_groups command.\n The report lists the clock balance groups for all modes in all active scenarios.\n Removing Clock Balance Groups To remove clock balance groups, use the remove_clock_balance_groups command.\n You can either remove specific clock balance groups by specifying the clock balance groups or all clock balance groups by using the -all option.\n If you specify the clock balance groups to remove, they are removed from the current mode.\n However, if a specified group does not exist in the current mode, but does exist in another mode, it is removed from that mode.\n If you use the -all option, the clock balance groups are removed from all modes.\n For example, to remove a previously defined clock balance group named group1 from the current mode, use the following command: fc_shell> remove_clock_balance_groups group1 To remove all clock balance groups from all modes, use the following command: fc_shell> remove_clock_balance_groups -all 387 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Via Ladders"}, {"role": "assistant", "content": "To insert via ladders, use the insert_via_ladders command.\n By default, this command Does not remove existing via ladders in the block To remove the existing via ladders before via ladder insertion, use the -clean true option.\n Targets all pins specified in the via ladder constraints, whether on signal nets or clock nets To restrict via ladder insertion to specific nets, use the -nets option.\n Inserts a single via ladder on each target pin If the constraints specify more than one via ladder template for a pin, the command inserts the via ladder using the first template that does not cause a DRC violation.\n By default, if all of the via ladder templates cause a DRC violation, the command inserts the via ladder with the lowest DRC cost.\n To ignore detail routing shapes when checking for DRC violations, use the -ignore_routing_shape_drcs true option.\n To ignore the line-end cut enclosure rule, use the -relax_line_end_via_enclosure_rule true option.\n To ignore metal spacing rules on the pin layer when the via ladder shape is fully enclosed within the pin, use the -relax_pin_layer_metal_spacing_rules true option.\n To prevent the insertion of via ladders that cause DRC violations, use the -allow_drcs false option.\n Note: If a pin is too small to accommodate any of the via ladders specified for it, the insert_via_ladders command does not insert a via ladder for that pin.\n Uses via cuts other than those specified in the template if they improve compliance with fat via rules To require the command to use only those via cuts specified in the template, use the -strictly_honor_cut_table true option.\n Centers the via ladder cuts at the intersection of routing tracks between adjacent layers To shift the via ladder cuts on transition layers off the routing tracks for improved DRC compliance, use the -shift_vias_on_transition_layers true option.\n 457 Inserting Via Ladders Feedback Honors nondefault width rules for the wires on all layers of the via ladder To use the default width for wires on lower layers of the via ladder and honor the nondefault width only for the top layer, use the -ndr_on_top_layer_only true option.\n Does not require the via inserted above the pin layer to be contained within the pin shape To prevent changes to the pin shape boundary, you can require that the via inserted above the pin layer be fully contained within the pin shape boundary, which includes the pin shape and its extensions.\n To specify this requirement, use one or both of the following options: -connect_within_metal true This option controls via enclosures for all types of via ladders: performance, electromigration, and pattern-must-join.\n -connect_within_metal_for_via_ladder true This option controls the via enclosures only for performance and electromigration via ladders.\n By default, the tool uses the global setting specified by the -connect_within_metal option.\n To explicitly specify the behavior for performance and electromigration via ladders, set this option to true or false Does not extend the via enclosures to meet the minimum length rule for the layer To enable patching of the via enclosures to meet the minimum length rule and allow additional stacking of the via ladder, use the -allow_patching true option.\n Uses staggering only when it is defined for the via ladder rule Via ladder staggering extends the row metal of a via ladder level in the preferred direction of the upper layer for the level to avoid obstructions above or near the pin, which can increase the success rate of via ladder insertion.\n In many cases, the via ladder rule specifies the maximum number of stagger tracks.\n To allow staggering if the maximum number of stagger tracks is not defined for the via ladder rule, use the -auto_stagger true option.\n Does not report on the insertion status To report the via ladder insertion status for each target pin, use the -verbose true option.\n 458 Inserting Via Ladders Feedback To output detailed information about insertion failures, use the -user_debug true option.\n The detailed information reports the following types of violations: Internal DRC violations These are DRC violations internal to a via ladder.\n These violations are never allowed.\n Hard DRC violations These are DRC violations between a via ladder and a fixed shape, such as a pin, preroute, or obstruction.\n These violations are never allowed.\n Soft DRC violations These are DRC violations between a via ladder and a detail routing shape, which can be rerouted.\n These violations are allowed if one or more of the following options are true -allow_drcs -ignore_rippable_shapes, or -ignore_routing_shape_drcs After inserting the via ladders, the command reports statistics on the inserted ladders and any DRC violations caused by the insertion.\n See Also Defining Via Ladder Constraints Verifying Via Ladders Updating Via Ladders Querying Via Ladders Removing Via Ladders"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Considering Legalization Effects During Placement"}, {"role": "assistant", "content": "To minimize many cells from being displaced during legalization, the tool should be aware of legalization limits and restrictions during coarse placement.\n For example, the tool should be aware that it cannot place a wide cell in a specific location due to the position of the power straps at that location.\n To consider legalization effects during placement, set the place.coarse.enhanced_legalizer_driven_placement application option to true Use this feature for blocks that have many cells with small to medium displacements during legalization and use the RMS displacement values reported during legalization to see if it reduces the displacement.\n 158 Specifying Placement Settings Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Cleaning Up Routed Nets"}, {"role": "assistant", "content": "After routing is complete, you can clean up the routed nets by running the remove_redundant_shapes command.\n fc_shell> remove_redundant_shapes By default, this command reads the DRC information stored in the design view of the block and then removes dangling and floating net shapes from all nets in the block based on this information.\n To run the check_routes command to get the DRC information instead of using the information stored in the design view, use the -initial_drc_from_input false option.\n You can restrict the removal to Specific nets by using the -nets option Specific layers by using the -layers option Fixed or unfixed route types by using the -route_types option When removing dangling net shapes, the tool does not change topologies or connections and does not touch terminals.\n In addition, no changes are made to open nets or nets with DRC violations.\n You can disable the removal of dangling net shapes by using the -remove_dangling_shapes false option.\n You can disable the removal of floating net shapes by using the -remove_floating_shapes false option.\n In addition to removing dangling and floating net shapes, this command can also remove loops in the specified nets.\n To remove loops, use the -remove_loop_shapes true option.\n By default, the remove_redundant_shapes does not report the changes it makes.\n To report the changes, use the -report_changed_nets true option.\n For example, to remove dangling net shapes, floating net shapes, and loops from the net named my_net, use the following command: fc_shell> remove_redundant_shapes -nets my_net \\ -remove_loop_shapes true After cleaning up the routed nets, reverify the routing, as described in Performing Design Rule Checking Using Zroute 563 Analyzing the Routing Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Skew and Latency Targets"}, {"role": "assistant", "content": "By default, clock tree synthesis tries to achieve the best skew and latency for all clocks.\n However, this can lead to area, power, and runtime overhead for low frequency clocks, which have relaxed skew and latency targets.\n To specify a skew target, use the -target_skew option with the set_clock_tree_options command.\n To specify a latency target, use the -target_latency option with the set_clock_tree_options command.\n By default, when you define skew and latency targets, they apply to all clocks in all corners.\n To define targets for specific clocks, use the -clocks option.\n To define targets for specific corners, use the -corners option.\n To report the user-defined skew and latency targets, use the report_clock_tree_options command.\n To remove user-defined skew or latency targets, use the remove_clock_tree_options command.\n To remove all skew and latency targets, use the -all option; otherwise, use the appropriate -target_skew -target_latency -clocks, and -corners options to remove the specific targets."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Voltage-Drop-Aware Placement"}, {"role": "assistant", "content": "To manually enable Dynamic power shaping for the compile_fusion command, use the following settings: fc_shell> set_app_option -name opt.common.power_integrity \\ -value false fc_shell> set_app_option -name compile.flow.enable_dps \\ -value true Voltage-drop-aware placement for the compile_fusion command, use the following settings: fc_shell> set_app_option -name opt.common.power_integrity \\ -value false fc_shell> set_app_option -name compile.flow.enable_irap \\ -value true Voltage-drop-aware placement for the clock_opt command, use the following settings: fc_shell> set_app_option -name opt.common.power_integrity \\ -value false fc_shell> set_app_option -name clock_opt.flow.enable_irap \\ -value true 198 Specifying the Routing Resources Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up Reference Libraries"}, {"role": "assistant", "content": "You can specify a reference library list for a design library when you create the design library by using the -ref_libs option of the create_lib command.\n You can also change the reference library list at any time by using the set_ref_libs command.\n Use the following commands to specify, rebind, and report reference libraries: create_lib -ref_libs You can specify a relationship between a new design library and its lower-level reference libraries by using the create_lib command.\n For example, fc_shell> create_lib lib_B \\ -ref_libs {../LIBS/lib_c../STND/stdhvt.ndm}...\n {lib_B} set_ref_libs -ref_libs For an existing design library, open the library and then use the set_ref_libs command to specify the reference libraries.\n For example, fc_shell> current_lib {lib_B} fc_shell> set_ref_libs \\ -ref_libs {../LIBS/lib_C../STND/stdhvt.ndm}../LIBS/lib_C../STND/stdhvt.ndm report_ref_libs To report the reference libraries of a design library, use the report_ref_libs command.\n 75 Setting Up Libraries Feedback For example, fc_shell> create_lib lib_A -ref_libs \\ {../libs/SCLL.ndm../libs/SCHH.ndm../BLOCKS/MACROS} {lib_A} fc_shell> report_ref_libs...\n Name Path Location *+ SCLL../libs/SCLL.ndm /remote/project/libs/SCLL.ndm *+ SCHH../libs/SCHH.ndm /remote/project/libs/SCHH.ndm * MACROS../BLOCKS/MACROS /remote/project/BLOCKS/MACROS \"*\" = Library currently open \"+\" = Library has technology information set_ref_libs -rebind When you make a change that invalidates the reference library list, such as moving a reference library to a new location, you need to rebind the reference libraries.\n To do so, use the -rebind option, which rebinds each reference library path specified by the search_path variable to libraries that are currently loaded in memory.\n For example, fc_shell> current_lib {lib_A} fc_shell> set_app_var search_path {.\n../REFLIBS../CLIBS}.\n../LIBS../BLOCKs fc_shell> set_ref_libs -rebind../REFLIBS/lib_C../REFLIBS/lib_D../CLIBS/stdhvt.ndm} Rebinding a library does not affect the bindings of blocks already existing in the design library.\n To rebind these blocks using an updated reference library list, use the -rebind option with the link_block command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Legalizing Relative Placement Groups in a Placed Design"}, {"role": "assistant", "content": "You can improve the placement of relative placement groups in a placed design by legalizing only the relative placement groups.\n To legalize the placement of only the relative placement groups, but not nonrelative placement cells, use the legalize_rp_groups command.\n You can also specify a list of relative placement groups to be legalized.\n To perform a fast legalization of the relative placement groups, use the -prototype option.\n When you use this option, the tool does not ensure that all legalization constraints are met.\n Therefore, use it during the prototyping stages of the design flow when you are developing relative placement groups.\n To specify that relative placement groups can overlap with each other, use the -legalize_over_rp option.\n For example, the following command legalizes the RP3 relative placement group over the RP1 and RP2 relative placement groups.\n fc_shell> legalize_rp_groups -legalize_over_rp RP3 Figure 186 shows the placement before and after running the command.\n 810 Performing Placement and Legalization of Relative Placement Groups Feedback Figure 186 Legalizing the RP3 Relative Placement Group Over Other Groups RP1 RP2 RP1 RP2 RP3 After you legalize one or more relative placement groups by using the legalize_rp_groups command, there might be overlaps with cells in other relative placement groups or cells that are not in relative placement groups.\n Use the check_legality command to identify any cell overlaps and use the legalize_placement command to resolve any remaining cell overlaps."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Blockages That Allow Relative Placement Cells Only"}, {"role": "assistant", "content": "To define partial blockages that allow relative placement cells only, specify the boundary, type ( -type allow_rp_only option), blockage percentage ( -blocked_percentage option), and optionally the name for the placement blockage.\n For example, to defines a partial blockage that allows relative placement cells only, with a maximum allowed cell density of 80 percent (a blocked percentage of 20), and enclosed by the rectangle with corners at (10, 20) and (100,200), use the following command: create_placement_blockage -name rp_only -type allow_rp_only \\ -boundary {10 20 100 200} -blocked_percentage 20 These blockages allows the tool to place relative placement groups, which are usually large structures, without disturbing the placement of other cells.\n After the tool places and legalizes the relative placement groups, you can remove these blockages and allow the tool to place other cells in them.\n Note: Relative-placement-cells-only blockages are honored during placement, but not during legalization, optimization, or clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Constraint-Based Via Ladder Insertion"}, {"role": "assistant", "content": "To use the constraint-based method to insert via ladders, 1.\n Ensure that the via ladder rules are defined, as described in Defining Via Ladder Rules 2.\n Define the via ladder constraints by using the set_via_ladder_rules command, as described in Defining Via Ladder Constraints 3.\n Insert the via ladders by using the insert_via_ladders command, as described in Inserting Via Ladders 4.\n Verify the via ladders by using the verify_via_ladders command, as described in Verifying Via Ladders 454 Inserting Via Ladders Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading Verilog Gate-Level Netlist Files"}, {"role": "assistant", "content": "Use the read_verilog command to read Verilog netlist files using a specialized Verilog netlist reader.\n This command cannot be used to read Verilog RTL files.\n Only the analyze and elaborate commands should be used to read RTL files.\n Use the set_top_module command after reading the netlist to specify the top-level module and link the design to create the block.\n read_verilog top.netlist.v set_top_module top When the file has multiple independent modules, use the -top option to identify the top- level module.\n For example, read_verilog -top top2 netlists.v set_top_module top2 101 Reading the Design Feedback To specify a new block name other than top_module_name.design, use the -design option.\n For example, read_verilog -top my_top -design desA../my_data/my_des.v set_top_module my_top"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Placing Group Repeaters Before Routing"}, {"role": "assistant", "content": "Use the preplace_group_repeaters command to place the group repeaters before the routing.\n This command places the group repeaters either in an ascending or descending order, default is ascending.\n The ascending order means that the command places the cells in a group from the lowest or left-most available track to the highest or right-most track.\n Note: A FAA-Base-Beta license is required to run the preplace_group_repeaters command.\n You must specify either the cell collections or group IDs of the group repeaters.\n The following example places group repeaters when the cell collections are specified.\n fc_shell> preplace_group_repeaters \\ -repeater_group_locations { { $cellGroup1, M2, {720 363.5}, \\ north, descending} {$cellGroup2, M2, {920 363.5}, east, ascending} \\ 984 Adding a Group of Repeaters Feedback {$cellGroup3, M2, {1230 328.5}, east, ascending} \\ {$cellGroup4, M2, {1430 328.5}}, east} The following example places group repeaters when the group ID is specified.\n fc_shell> preplace_group_repeaters \\ -repeater_group_locations { { 1,M2, {720 363.5}, south, ascending} \\ {2, M2, {920 363.5},west, ascending} {3, M2, {1230 328.5}, \\ south, ascending} {4, M2, {1430 328.5}, west, descending}}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Avoiding Crosstalk During Group Repeater Insertion"}, {"role": "assistant", "content": "The crosstalk management is only supported in the create_group_repeaters_guidance and add_group_repeaters commands flow.\n 987 Adding a Group of Repeaters Feedback The flow to avoid crosstalk during group repeater insertion is as follows: 1.\n Use the following command to query interleaving groups: create_group_repeaters_guidance -net -number_of_interleaving_groups number By default, the number argument is set to 1.\n For example, if the value of the number is 2, one net group is separated into two interleaving net groups.\n 2.\n Use the following command to manage crosstalk during group repeater insertion: add_group_releaters -nets | -bundles -first_distance_of_net_groups { {group_id1 $first_dist1} {group_id2 $first_dist2} \u2026} -repeater_distance $dist or add_group_releaters -nets | -bundles -cutlines_of_net_groups { {group_id1 $cutline_list1} {group_id2 $cutline_list2} \u2026} If the option -first_distance_of_net_groups is specified, the command groups the nets based on the existing group IDs on nets and inserts repeaters based on the specified first distance for the various net groups.\n The repeater distance is same for all net groups.\n If the option -cutlines_of_net_groups is specified, the command groups the nets based on the existing group IDs of the nets and inserts repeaters based on the cutlines for the various net groups."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Shield Shapes"}, {"role": "assistant", "content": "To query the shield shapes associated with a shielded net, use the get_shapes command with the -shield_only option, as shown in the following example: fc_shell> get_shapes -shield_only -of_objects [get_nets myclk] {PATH_19_4317 PATH_19_4318 PATH_19_4319 PATH_19_4320 PATH_19_4322 546 Shielding Nets Feedback PATH_17_11590 PATH_17_11591 PATH_17_11592 PATH_17_11593 PATH_17_11594 PATH_17_11595 PATH_17_11596 PATH_17_11597 PATH_17_11599 PATH_17_11600 PATH_17_11601 PATH_17_11602 PATH_17_11604 PATH_17_11605 PATH_17_11606 PATH_17_11607 PATH_17_11608 PATH_17_11609 PATH_17_11610 PATH_17_11611 PATH_17_11612 PATH_17_11613 PATH_17_11614 PATH_17_11615 PATH_17_11616 PATH_17_11617 PATH_17_11618 PATH_17_11619 PATH_17_11620 PATH_17_11621 PATH_17_11622 PATH_17_11623 PATH_17_11624 PATH_17_11625 PATH_17_11626}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Checkpoints and Checkpoint Behaviors"}, {"role": "assistant", "content": "To return a list of all the checkpoints or checkpoint behaviors in the current session, or to return detailed information for any checkpoint or checkpoint behavior, use the get_checkpoint_data command.\n To return a list of all the checkpoints that have been executed, specify the -list_names option: fc_shell> get_checkpoint_data -list_names remove_buffers place_opt_to_initial_drc incr_placement place_opt_to_initial_opto place_opt_to_final_opto To return detailed information for a checkpoint, specify the checkpoint with the -name option.\n The tool returns the output as a Tcl dictionary: fc_shell> get_checkpoint_data -name place_opt_to_initial_drc memory 173.85 start_time 2.34 end_time 2.34 before_runtime 2.34 before_report_runtime 0.00 after_report_runtime 0.00 self_runtime 60 Adding Changes to a Script With Checkpoints Feedback 0.00 before_reports {} after_reports {app_options timing} before_actions {gropto} after_actions {} replace_actions {} To return a list of all the checkpoint behaviors defined in your configuration, specify the -list_reports or -list_actions option: fc_shell> get_checkpoint_data -list_reports timing app_options fc_shell> get_checkpoint_data -list_actions gropto placer_high_effort_congestion To return the contents and associations of a checkpoint report or action, specify the report or action with the -report or -action option: fc_shell> get_checkpoint_data -report app_options contents { set name [get_current_checkpoint -name] set pos [get_current_checkpoint -position] report_app_options -non_default \\ >./checkpoint/$name.$pos.app_options.rpt } before_patterns {*} after_patterns {} See Also Viewing Your Checkpoint History"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Power or Area Recovery on the Clock Network"}, {"role": "assistant", "content": "If you enable concurrent clock and data optimization for the clock_opt command, the tool performs clock power recovery on clock cells and registers during the final_opt stage.\n 374 Implementing Clock Trees and Performing Post-CTS Optimization Feedback If you do not enable concurrent clock and data optimization, you can enable clock power recovery by using the following application option setting: fc_shell> set_app_options \\ -name clock_opt.flow.enable_clock_power_recovery \\ -value power Before you perform power recovery using this technique, you must 1.\n Enable scenarios for dynamic, leakage, or total power optimization by using the -dynamic_power and - leakage_power options of the set_scenario_status command 2.\n (Optional) Provide a switching activity by using the read_saif command If you do not provide switching activity, the tool uses default switching activity for dynamic power recovery.\n Instead of power recovery, you can enable area recovery on the clock cells and registers during the final_opt stage clock_opt command by using the following application option setting: fc_shell> set_app_options \\ -name clock_opt.flow.enable_clock_power_recovery \\ -value area"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Relative Placement Flow"}, {"role": "assistant", "content": "The relative placement flow consists of the following steps: 1.\n Prepare the design as described in Preparing the Design 2.\n Specify placement constraints as described in Setting Up Multivoltage Designs 3.\n Define the relative placement constraints and settings.\n a.\n Create the relative placement groups by using the create_rp_group command, as described in Creating Relative Placement Groups b.\n Add relative placement objects to the groups by using the add_to_rp_group command.\n See Adding Objects to a Group c.\n Specify options for the relative placement groups by using the set_rp_group_options command, as described in Specifying Options for Relative Placement Groups 4.\n Perform placement and optimization.\n 5.\n Analyze the relative placement results as described in Analyzing Relative Placement Groups If the relative placement is not what you want, modify the relative placement group or the constraints and settings, and rerun placement and optimization."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Routing Blockages"}, {"role": "assistant", "content": "To find routing blockages, use the get_routing_blockages command.\n For example, to get all the routing blockages in a block, use the following command: fc_shell> get_routing_blockages * To find the routing blockages for specific nets, use the -of_objects option to specify the nets of interest.\n For example, to find the routing blockages for the n1 net, use the following command: fc_shell> get_routing_blockages -of_objects [get_nets n1] To find the routing blockages in a specific location, use the get_objects_by_location -classes routing_blockage command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Comparing Libraries"}, {"role": "assistant", "content": "target libraries have the same lexical attributes, which have similar but not the same values, as shown in the following table.\n Table 5 Reference and Target Library Lexical Attribute Differences Lexical Attribute Reference Library Target Library lexical_cell_prefix_name ND2 nand2 lexical_drive1_name D1 x1 lexical_device_threshold_voltage SVT svth In this situation, you must create a lexical attribute mapping file that contains the following information: lexical_cell_prefix_name ND2 nand2 lexical_drive1_name D1 x1 lexical_device_threshold_voltage SVT svth 97 Reading the Design Feedback Then, when you run the compare_libraries command, you must specify this lexical attribute mapping file by using the -lex_attr_mapping option, as shown in the following example: fc_shell> set_app_options -name libra.complib.match_full_cell_name -value false fc_shell> compare_libraries -ref_lib $rvt_lib -ref_lib_analysis sa \\ -target_lib $lvt_lib -target_lib_analysis sa \\ -lex_attr_mapping attribute_map_file -verbose -plot The reference and target library naming convention is completely different.\n In this situation, you must create a custom mapping file that contains the cell pairs you want to compare, as shown in the following example: INVD2BWP INVD1BWPHVT INVD2BWP BUFFD4BWPHVT ND2D2BWP ND2D4BWPHVT DFQD4BWP SDFQD4BWPHVT Then, when you run the compare_libraries command, you must specify this mapping file, by using the -custom_pairs option, as shown in the following example: fc_shell> set_app_options -name libra.complib.match_full_cell_name -value false fc_shell> compare_libraries -ref_lib $rvt_lib -ref_lib_analysis sa \\ -target_lib $lvt_lib -target_lib_analysis sa \\ -custom_pairs custom_map_file -verbose -plot"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I RedHawk and RedHawk-SC Fusion"}, {"role": "assistant", "content": "The RedHawk and RedHawk-SC power integrity solution is integrated with the implementation flow through the RedHawk Fusion and RedHawk-SC Fusion interface.\n You can use the RedHawk Fusion and RedHawk-SC Fusion feature for rail analysis at different points in the physical implementation flow after power planning and initial placement are completed.\n This enables you to detect potential power network issues before you perform detail routing and thus significantly reduce the turnaround time of the design cycle.\n When placement is complete and the PG mesh is available, use RedHawk Fusion or RedHawk-SC Fusion to perform voltage drop analysis on the power and ground network to calculate power consumption and to check for voltage drop violations.\n You can perform voltage drop analysis at other stages in the design flow, such as after detail routing.\n When chip finishing is complete, use RedHawk Fusion or RedHawk-SC to perform PG electromigration analysis to check for current density violations.\n This chapter describes how to use the RedHawk Fusion or RedHawk-SC Fusion feature to perform rail analysis in the environment.\n For a detailed description about the RedHawk or RedHawk-SC analysis flows and commands, see the RedHawk User Manual or RedHawk-SC User Manual This chapter includes the following topics: Running Rail Analysis Using RedHawk-SC Fusion An Overview for RedHawk Fusion and RedHawk-SC Fusion Setting Up the Executables Specifying RedHawk and RedHawk-SC Working Directories Preparing Design and Input Data for Rail Analysis Specifying Ideal Voltage Sources as Taps Missing Via and Unconnected Pin Checking Running Rail Analysis with Multiple Rail Scenarios Performing Voltage Drop Analysis Performing PG Electromigration Analysis 867 Running Rail Analysis Using RedHawk-SC Fusion Feedback Performing Minimum Path Resistance Analysis Performing Effective Resistance Analysis Performing Distributed RedHawk Fusion Rail Analysis Voltage Driven Power Switch Cell Sizing Working With Macro Models Performing Signoff Analysis Writing Analysis and Checking Reports Displaying Maps in the GUI Displaying ECO Shapes in the GUI Voltage Hotspot Analysis Querying Attributes"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling How Buffers are Added"}, {"role": "assistant", "content": "By default, the add_buffer_on_route command Adds buffers over all placement blockages, soft macros, and hard macros.\n To prevent buffers from being placed over specific macro cells, use the -dont_allow_insertion_over_cell option.\n Alternatively, you can prevent the buffers from being placed over all blockages and macro cells by using the -respect_blockages option.\n When you use this option, you can specify a list of macro cells over which buffers are allowed by using the -allow_insertion_over_cell option.\n Adds buffers on both global routed and detail routed nets.\n To add buffers only on nets that are global routed only, without assigned tracks or detail routing, use the -only_global_routed_nets option.\n Adds buffers at the lowest common level of hierarchy of the pins being driven by the buffers.\n To add the buffers on the highest possible level of hierarchy, use the -on_top_hierarchy option.\n Does not add buffers on a route segment if it is necessary to create new ports because of a difference in the logical and physical topology of the net.\n To add buffers on such route segments by creating new ports, use the -punch_port option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Relative Placement in the GUI"}, {"role": "assistant", "content": "The Fusion Compiler GUI provides tools to help you visualize and analyze the relative placement groups in your design: Relative Placement (RP) Groups Visual Mode Relative Placement (RP) Net Connection Visual Mode For more information about analyzing relative placement groups in the GUI, see the Using Map and Visual Modes topic in the Fusion Compiler Graphical User Interface User Guide.\n 814 Saving Relative Placement Information Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Introduction to Clock Gating"}, {"role": "assistant", "content": "Clock gating applies to synchronous load-enable registers, which are flip-flops that share the same clock and synchronous control signals.\n Synchronous control signals include synchronous load-enable, synchronous set, synchronous reset, and synchronous toggle.\n Synchronous load-enable registers are represented by a register with a feedback loop that maintains the same logic value through multiple cycles.\n Clock gating applied to synchronous load enable registers reduces the power needed when reloading the register banks.\n Figure 45 shows a simple register bank implementation using a multiplexer and feedback loop.\n Figure 45 Synchronous Load-Enable Register With Multiplexer Flip Flop Mux Control Logic Register Bank EN CLK DATA IN DATA OUT When the synchronous load enable signal (EN) is at logic state 0, the register bank is disabled.\n In this state, the circuit uses the multiplexer to feed the Q output of each storage element in the register bank back to the D input.\n When the EN signal is at logic state 1, the register is enabled, allowing new values to load at the D input.\n 286 Introduction to Clock Gating Feedback These feedback loops can unnecessarily use power.\n For example, if the same value is reloaded in the register throughout multiple clock cycles (EN equals 0), the register bank and its clock net consume power while values in the register bank do not change.\n The multiplexer also consumes power.\n Clock gating eliminates the feedback net and multiplexer shown in Figure 45 by inserting a gate in the clock net of the register.\n Note: While applying the clock-gating techniques, the tool considers generated clocks similar to defined clocks.\n The clock-gating cell selectively prevents clock edges, thus preventing the gated-clock signal from clocking the gated register.\n Figure 46 shows a latch-based clock-gating cell and the waveforms of the signals are shown with respect to the clock signal, CLK.\n Figure 46 Latch-Based Clock Gating Flip Flop Control Logic Register Bank Latch CLK ENCLK ENL EN CLK DATA IN DATA OUT CLK CLK EN ENL ENCLK The clock input to the register bank, ENCLK, is gated on or off by the AND gate.\n ENL is the enabling signal that controls the gating; it derives from the EN signal on the multiplexer shown in Figure 45.\n The register bank is triggered by the rising edge of the ENCLK signal.\n The latch prevents glitches on the EN signal from propagating to the register's clock pin.\n When the CLK input of the 2-input AND gate is at logic state 1, any glitching of the EN signal could, without the latch, propagate and corrupt the register clock signal.\n The latch eliminates this possibility because it blocks signal changes when the clock is at logic 1.\n 287 Introduction to Clock Gating Feedback In latch-based clock gating, the AND gate blocks unnecessary clock pulses by maintaining the clock signal's value after the trailing edge.\n For example, for flip-flops inferred by HDL constructs of rising-edge clocks, the clock gate forces the gated clock to 0 after the falling edge of the clock.\n By controlling the clock signal for the register bank, you can eliminate the need for reloading the same value in the register through multiple clock cycles.\n Clock gating inserts clock-gating circuitry into the register bank's clock network, creating the control to eliminate unnecessary register activity.\n Clock gating does the following: Reduces clock network power dissipation Relaxes datapath timing Reduces congestion by eliminating feedback multiplexer loops For designs that have large register banks, clock gating can save power and area by reducing the number of gates in the design.\n However, for smaller register banks, the overhead of adding logic to the clock tree might not compare favorably to the power saved by eliminating a few feedback nets and multiplexers."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Routing Guides"}, {"role": "assistant", "content": "Routing guides provide routing directives for specific areas of a block.\n Some types of routing guides are user-defined; others are derived from the block data.\n This topic describes how to create user-defined routing guides.\n Note: User-defined routing guides are honored by Zroute; however, they are not honored by the Advanced Route tool.\n To define a routing guide, use the create_routing_guide command.\n When you define a routing guide, you must specify Its rectangular boundary To specify the boundary, use the -boundary option to specify the lower-left and upper- right corners of the rectangle using the following syntax: {{ llx lly } { urx ury }} Information specific to the purpose of the routing guide The following table describes the user-defined routing guides.\n Table 30 User-Defined Routing Guides Purpose Option Route all nets in the preferred direction within the routing guide boundary.\n For details, see Using Routing Guides to Control the Routing Direction -preferred_direction_only Switch the preferred routing direction within the routing guide boundary.\n For details, see Using Routing Guides to Control the Routing Direction -switch_preferred_direction Limit the number of occurrences of a specific routing pattern within the routing guide boundary.\n For details, see Using Routing Guides to Limit Edges in the Nonpreferred Direction -max_patterns Control the routing density within the routing guide boundary.\n For details, see Using Routing Guides to Control the Routing Density -horizontal_track_utilization -vertical_track_utilization 474 Routing Constraints Feedback Purpose Option Prioritize regions within the routing guide boundary for routing.\n For details, see Using Routing Guides to Prioritize Routing Regions -access_preference Encourage river routing within the routing guide boundary.\n For details, see Using Routing Guides to Encourage River Routing -river_routing By default, the tool creates a routing guide named RD# in the current block, where is a unique integer.\n Use the following options to change the default behavior: To specify a name for the routing guide, use the -name option.\n To specify the routing layers affected by the routing guide, use the -layers option.\n Specify the routing layers by using the layer names from the technology file.\n To create the routing guide in a different physical cell, use the -cell option.\n When you use this option, the tool creates the routing guide in the cell's reference block using the coordinate system of the cell's top-level block.\n See Also Deriving Routing Guides Querying Routing Guides Removing Routing Guides"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Displaying Objects for Design Rule Checking"}, {"role": "assistant", "content": "When you run interactive design rule checking, the IC Validator tool performs design rule checking on what is displayed in the layout window, plus an extension of 1 micron.\n You can modify the size of the extension by setting the signoff.check_drc_live.halo application option.\n Use the View Settings and Hierarchy Settings panels to control the layers, levels, and cell types displayed in the layout window.\n Display the View Settings panel by clicking the View Settings icon ( ) in the panel area.\n Specify the number of levels to display in the Level field.\n Select the Layers tab and enable visibility for the desired layers.\n Display the Hierarchy Settings panel by clicking the Hierarchy Settings icon ( ) in the View Settings panel or the menu bar.\n 694 Performing Signoff Design Rule Checking Feedback Specify the number of view levels in the \"View level\" field.\n Select Standard, \"Fill Cell,\" and Block in the \"Expanding cell types\" section.\n Figure 146 shows the View Settings and Hierarchy Settings panels used to control the layout window display for design rule checking.\n Figure 146 Settings Used to Display Objects for Design Rule Checking"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing the Violations in an ICV Heat Map"}, {"role": "assistant", "content": "An ICV heat map displays the density of signoff DRC violations in a block.\n You can use the heat map to locate problematic areas in your design.\n 673 Performing Signoff Design Rule Checking Feedback Note: This feature requires version P-2019.06 or later of the IC Validator tool and an IC Validator NXT license.\n To view the ICV heat map, 1.\n Enable the ICV heat map by setting the signoff.check_drc.enable_icv_explorer_mode application option to true fc_shell> set_app_options -name signoff.check_drc.enable_icv_explorer_mode \\ -value true 2.\n Perform signoff design rule checking as described in Running the signoff_check_drc Command 3.\n In the GUI, choose View > Map > ICV Heatmap.\n Figure 135 shows an ICV heat map.\n 674 Performing Signoff Design Rule Checking Feedback Figure 135 ICV Heat Map 675 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Command"}, {"role": "assistant", "content": "During placement, the tool can use the voltage (IR) drop values of cells to identify areas of high power density and spread the cells with high voltage drop values, which reduces the power density of such areas.\n To perform IR-drop-aware placement during the clock_opt command, use the following steps: 1.\n Run the clock_opt command through the route-clock stage by using the clock_opt -to route_clock command.\n 2.\n Set up for RedHawk Fusion and perform static or dynamic voltage drop analysis by using the analyze_rail -voltage_drop command as shown in the following example: fc_shell> source redhawk_setup.tcl fc_shell> analyze_rail -voltage_drop static -nets {VDD VSS} For more information, see Performing Voltage Drop Analysis 3.\n Enable IR-drop-aware placement by setting the place.coarse.ir_drop_aware application option to true 375 Implementing Clock Trees and Performing Post-CTS Optimization Feedback 4.\n (Optional) Specify additional settings for IR-drop-aware placement, as described in Controlling IR-Drop-Aware Placement 5.\n Run the final optimization stage of the clock_opt command by using the clock_opt -from final_opto command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Tcl Scripts"}, {"role": "assistant", "content": "You can use Tcl scripts to accomplish routine, repetitive, or complex tasks.\n You create a command script file by placing a sequence of Fusion Compiler commands in a text file.\n Any Fusion Compiler command can be executed within a script file.\n In Tcl, a pound sign (#) at the beginning of a line denotes a comment.\n For example, # This is a comment For more information about writing scripts and script files, see the Using Tcl With Synopsys Tools manual.\n Use one of the following methods to run a Tcl script: Use the -file option with the fc_shell command when you start the Fusion Compiler tool.\n Use the source command from the fc_shell command line.\n Choose File > Execute Script in the GUI.\n If an error occurs when running a command, the Fusion Compiler tool raises the TCL_ERROR condition, which immediately stops the script execution.\n To tolerate errors and allow the script to continue executing, either Check for TCL_ERROR error conditions with the Tcl catch command on the commands that might generate errors.\n Set the sh_continue_on_error variable to true in the script file.\n 50 Adding Changes to a Script With Checkpoints Feedback See Also Starting the CLI Adding Changes to a Script With Checkpoints"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Real Metal Fill Extraction"}, {"role": "assistant", "content": "To enable metal fil extractionreal real metal fill extraction, 1.\n Associate non-emulation TLUPlus files with the timing corners by using the set_parasitic_parameters command, as described in the Fusion Compiler Timing Analysis User Guide 2.\n Enable real metal fill extraction by using the following command: fc_shell> set_extraction_options \\ -real_metalfill_extraction floating For more information about performing extraction in the Fusion Compiler tool, see the Fusion Compiler Timing Analysis User Guide 741 Automatically Fixing Isolated Vias Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Metal-Insulator-Metal Capacitors"}, {"role": "assistant", "content": "A metal-insulator-metal (MiM) capacitor is made of two special-purpose conducting layers separated by an insulator.\n This capacitor is inserted between two regular metal layers, as shown in Figure 127 Figure 127 Cross-Section View of MiM Capacitor Layers maskName = \"mimtop\" M9 M9 M9 M8 maskName = \"mimbottom\" via via via M9 layer M8 layer MBOT layer MTOP layer MiM capacitor maskName = \"viaMimtop\" maskName = \"viaMimbottom\" 635 Inserting Filler Cells Feedback MiM capacitors are typically connected between power and ground to help maintain a constant supply voltage in the presence of electrical noise.\n The dimensions of a MiM capacitor are usually customized to fit the power strap geometry of a specific power plan.\n To insert an array of MiM capacitors into a block and connect them to the power rails, use the create_mim_capacitor_array command.\n At a minimum, you must specify the MiM capacitor library cell, as well as the x- and y-increments of the array.\n For example, fc_shell> create_mim_capacitor_array \\ -lib_cell my_lib/mim_ref_cell -x_increment 20 -y_increment 20 By default, the create_mim_capacitor_array command Inserts MiM capacitors for the entire block To restrict the insertion to a specific region, use the -boundary option to specify the rectangular or rectilinear region.\n You can specify only a single region.\n The command does not consider standard cells, macros, placement blockages, or voltage areas when inserting the MiM capacitors.\n Inserts the MiM capacitors in the R0 orientation To change the orientation, use the -orientation option.\n When you change the orientation, it affects all MiM capacitor cells in the inserted array.\n Uses the following naming convention for the inserted MiM capacitor cells: mimcap!\n library_cell_name number To identify the MiM capacitor cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the tool uses the following naming convention: mimcap!\n prefix library_cell_name number"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Concurrent Soft-Rule-Based Redundant Via Insertion"}, {"role": "assistant", "content": "Soft-rule-based redundant via insertion can improve the redundant via rate by reserving space for the redundant vias during routing.\n You can use concurrent soft-rule-based redundant via insertion during both initial routing and ECO routing.\n The actual via insertion is not done during routing; you must still perform postroute redundant via insertion by using the add_redundant_vias command.\n Note: Reserving space during routing increases the routing runtime.\n You should use this method only when needed to improve the redundant via rate beyond that provided by postroute redundant via insertion and the postroute approach resulted in a redundant via rate of at least 80 percent.\n 627 Inserting Redundant Vias Feedback To perform concurrent soft-rule-based redundant via insertion, 1.\n (Optional) Define the via mapping table as described in Defining a Customized Via Mapping Table 2.\n Enable concurrent soft-rule-based redundant via insertion.\n By default, concurrent redundant via insertion is disabled.\n To enable concurrent soft-rule-based redundant via insertion during initial routing, set the route.common.concurrent_redundant_via_mode application option to reserve_space fc_shell> set_app_options \\ -name route.common.concurrent_redundant_via_mode \\ -value reserve_space To control the effort used to reserve space for the redundant vias during initial routing, set the route.common.concurrent_redundant_via_effort_level application option.\n By default, Zroute uses low effort.\n The higher effort levels result in a better redundant via conversion rate at the expense of runtime.\n The low and medium efforts affect only global routing and track assignment, while high effort also affects detail routing, which can impact design rule convergence.\n Note: If you enable the route.common.concurrent_redundant_via_mode option before running the place_opt command, the redundant vias are considered during congestion estimation.\n To enable concurrent soft-rule-based redundant via insertion during ECO routing, set the route.common.eco_route_concurrent_redundant_via_mode application option to reserve_space fc_shell> set_app_options \\ -name route.common.eco_route_concurrent_redundant_via_mode \\ -value reserve_space To control the effort used to reserve space for the redundant vias during ECO routing, set the route.common.eco_route_concurrent_redundant_via_effort_level application option.\n Note: Using concurrent soft-rule-based redundant via insertion during ECO routing can impact timing and design rule convergence.\n In general, you should use this method only when you used near 100 percent redundant via insertion during initial routing.\n 628 Inserting Redundant Vias Feedback 3.\n Route the block.\n During routing, Zroute reserves space for the redundant vias and fixes hard design rule violations.\n 4.\n Perform postroute redundant via insertion.\n During postroute redundant via insertion, Zroute inserts the redundant vias in the reserved locations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Modifying Voltage Areas"}, {"role": "assistant", "content": "After you have created voltage areas, you can make the following modifications to a voltage area: Change the power domains associated with the voltage area To change the power domains associated with a voltage area, use the -add_power_domains and -remove_power_domains options with the set_voltage_area command.\n Change the voltage area name To change the name of the voltage area, use the -name option with the set_voltage_area command.\n Change the voltage area region To add shapes to a voltage area, use the create_voltage_area_shape command.\n To remove shapes from a voltage area, use the remove_voltage_area_shapes command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading DEF Files"}, {"role": "assistant", "content": "To read the floorplan information from a DEF file, use the read_def command.\n fc_shell> read_def block.def Note: When possible, use DEF v5.8 or later, as this version supports more types of physical objects and obstructions than previous versions.\n By default, the read_def command Annotates the floorplan information onto the current block To annotate the information onto a different block, use the -design option to specify the block name.\n Preserves the existing floorplan information In incremental mode, The placement area is imported based on the current core area and site rows in the DEF files Physical constraints that can have only one value are overwritten by the value from the latest DEF file; for example, port location and macro location are overwritten.\n Physical constraints that can have accumulated values are recomputed; that is, core area can be recomputed based on the existing value and the site row definitions in the latest DEF file.\n Placement keepouts from different DEF files are accumulated and the final keepout geometry is computed internally during synthesis.\n To remove the existing floorplan information before annotating the floorplan information from the DEF file, use the -no_incremental option.\n In this mode, the placement area is imported based on the site rows in the DEF files.\n Uses rule-based name matching for macros and ports 104 Importing the Floorplan Information Feedback Rule-based name matching automatically resolves name differences by using the tool's intelligent name matching capability.\n By default, when rule-based name matching is enabled, the following characters are considered equivalent: Hierarchical separators { / _.\n } For example, a cell named a.b_c/d_e is automatically matched with the string a/b_c.d/e in the DEF file.\n Bus notations { [ ] __ ( ) } For example, a cell named a [4] [5] is automatically matched with the string a_4__5_ in the DEF file.\n To disable rule-based name matching and require exact name matches between the DEF file and the block, set the file.def.rule_based_name_matching application option to false For more information, see \"Rule-Based Name Matching\" in the Fusion Compiler Data Model User Guide Ignores any objects in the DEF file that do not exist in the block, except for PG objects To allow new non-PG objects to be created from the DEF file, use the -add_def_only_objects option to specify the types of objects to create.\n Specify one or more of the following keywords: cells The tool creates the cells that exist only in the DEF file and connects their power and ground pins as defined in the DEF file; it does not connect the signal, clock, or tie pins even if these connections are defined in the DEF file.\n The tool also does not create new hierarchical cells; any hierarchy specified in the DEF file must already exist in the block.\n nets The tool creates the signal, clock, and tie nets that exist only in the DEF file and connects them to the ports specified in the DEF PINS section; it does not connect the nets to any other ports or pins in the netlist even if these connections 105 Importing the Floorplan Information Feedback are defined in the DEF file.\n The tool does not create new hierarchical nets; any hierarchy specified in the DEF file must already exist in the block.\n ports The tool creates the signal, clock, and tie ports that exist only in the DEF file and connects them to the nets specified in the DEF PINS section.\n all The tool creates the non-PG cells, nets, and ports that exist only in the DEF file, as if you had specified cells nets, and ports"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting the Clock-Gating Style"}, {"role": "assistant", "content": "Use the set_clock_gate_style command to select the type of integrated clock-gating cell you want to use.\n The following options are available: Option Description -test_point Specifies the test point position with respect to the latch within the integrated clock gate.\n Valid values are none before (the default), and after 294 Setting Up Clock Gating Feedback Option Description -observation_output Specifies that the library clock-gating cell must have an observation output pin.\n Valid values are true and false -target Specifies the type of target sequential elements.\n Valid values are pos_edge_flip_flop and neg_edge_flip_flop.\n The default is both.\n -objects Objects to which the clock gate applies."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Number of Clock-Gate Levels"}, {"role": "assistant", "content": "The number of clock-gate levels is the count of clock gates between a clock source and a register.\n Standard clock-gate insertion provides one level of clock-gate insertion.\n However, designs often contain preexisting clock gates, in which case the design might contain multiple levels of clock gates.\n 309 Controlling the Number of Clock-Gate Levels Feedback You can modify the default clock-gate insertion operation by allowing additional levels of clock gating, by limiting the number of clock-gate levels, or both."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Timing Optimization Effort"}, {"role": "assistant", "content": "By default, the tool focuses on improving the timing and power QoR during concurrent clock and data optimization.\n You can change the effort level for timing optimization by setting the ccd.timing_effort application option to low or high.\n The default is medium This setting affects concurrent clock and data optimization performed during the final_opt stage of the clock_opt command and the route_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting the Wire Length"}, {"role": "assistant", "content": "To report the total wire length at any stage of the routing flow, use the consolidated report_wirelength command.\n This command supports all net types, except power ground nets, by default such as signal nets, clock nets.\n It also supports non-stripe power ground nets by option control.\n This command generates a report, which includes the following information in the form of two tables, as shown in the figure: Total wire length per layer with separate global and detailed routing lengths Total wire length by both horizontal and vertical direction 576 Analyzing the Routing Results Feedback In the generated report, Virtual value means the estimated routing wire length for each net.\n For each net, the engine provides a virtual routing length before real routing.\n It remains even after route_auto BestAvailable means the sum of wire length of all nets irrespective of the stage they are in the current design.\n This command also supports slanting wires and counts the real length of an angle wire in total and counts the projection length of the x-axis and y-axis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Interrupting or Terminating Command Processing"}, {"role": "assistant", "content": "If you enter the wrong options for a command or enter the wrong command, you can interrupt command processing and remain in fc_shell.\n interupting comandscomandsinteruptingterminatingterminating comands To interrupt or terminate a command, press Ctrl+C.\n Some commands and processes cannot be interrupted.\n To stop these commands or processes, you must terminate fc_shell at the system level.\n When you terminate a process or the shell, no data is saved.\n When you use Ctrl+C, keep the following points in mind: If a script file is being processed and you interrupt one of its commands, the script processing is interrupted and no further script commands are processed.\n If you press Ctrl+C three times before a command responds to your interrupt, fc_shell is interrupted and exits with this message: Information: Process terminated by interrupt."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling the Power Integrity Features"}, {"role": "assistant", "content": "The Fusion Compiler tool provides the following techniques for ensuring power integrity of the design: Dynamic power shaping (DPS), which reduces transient power by utilizing concurrent clock and data optimization (useful skew) techniques.\n Voltage-drop-aware placement, which use the voltage (IR) drop values of cells to identify areas of high power density and spread the cells with high voltage drop values to reduce the power density of such areas.\n 195 Setting Up for Power-Related Features Feedback To set up for the recommended power integrity flow, perform the following steps: 1.\n Enable the power integrity flow by setting the opt.common.power_integrity application option to true When you do so, the Fusion Compiler uses the following techniques during the different stages of the design flow: a.\n Dynamic power shaping (DPS) during the final_opto stage of the compile_fusion command b.\n Voltage-drop-aware placement during the clock_opt command 2.\n (Optional) Specify that the tool should not reduce the voltage drop at the expense of the timing QoR by reducing the power integrity effort level by setting the opt.common.power_integrity_effort application option to low The default is high, and by default the tool tries to reduce the voltage drop to less than eight percent of the supply voltage at the expense of the timing QoR.\n 3.\n (Optional) Specify a maximum voltage drop threshold by using the opt.common.ir_drop_threshold application option.\n The default is eight percent of the supply voltage.\n If you change the default effort level by setting the opt.common.power.integrity_effort application option to low the tool ignores the threshold specified with the opt.common.ir_drop_threshold application option.\n 4.\n Specify settings for dynamic power shaping as described in Setting Up for Dynamic Power Shaping 5.\n Specify settings for voltage-drop-aware placement as described in Setting Up for Voltage-Drop-Aware Placement 6.\n (Optional) Enable IR-driven sizing, which uses the RedHawk dynamic voltage drop analysis results to identify cells involved in voltage drop violations, and then tries to replace those cells with cells having smaller leakage current.\n To enable this feature, set the clock_opt.flow.enable_irdrivenopt application option to true, in addition to setting the opt.common.power_integrity application option to true Instead of using the recommended power integrity flow setting, you can manually enable dynamic power shaping or voltage-drop-aware placement for the compile_fusion or clock_opt commands as described in Manually Enabling Dynamic Power Shaping and Voltage-Drop-Aware Placement 196 Setting Up for Power-Related Features Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tap Assignment"}, {"role": "assistant", "content": "A regular multisource clock tree has tap drivers that are driven by a clock mesh and drive clock-gating cells and sinks.\n If you insert these tap drivers before you run the compile_fusion command, the tool can assign sinks to these drivers such that it improves the overall timing QoR of the block.\n It also allows the tool to improve the timing of clock-gating paths.\n To perform regular multisource clock tree synthesis integrated with placement and optimization, use the following steps: 1.\n Specify the placement and optimization constraints and settings.\n 2.\n Specify the clock tree constraints and settings.\n 400 Implementing Multisource Clock Trees Feedback 3.\n Perform the following steps for multivoltage designs: a.\n Enable multivoltage support by setting the cts.multisource.enable_full_mv_support application option to true b.\n Enable the addition of physical feedthrough cells, which belong to a voltage area physically but not logically, by setting the opt.common.allow_physical_feedthrough application option to true c.\n Run the check_mv_design command and fix all multivoltage issues.\n 4.\n Enable cell electromigration fixing by setting the cts.multisource.cell_em_aware application option to true 5.\n Insert the tap drivers by using the create_clock_drivers command, as described in Inserting Clock Drivers 6.\n Create the clock mesh by using the create_clock_straps command, as described in Creating Clock Straps 7.\n Insert the mesh drivers by using the create_clock_drivers command, as described in Inserting Clock Drivers 8.\n Build the global clock tree structure by using the synthesize_multisource_global_clock_trees command, as described in Synthesizing the Global Clock Trees 9.\n Route the connections between the clock mesh and the tap drivers by using the route_clock_straps command, as described in Routing to Clock Straps 10.\n Analyze the clock mesh by using the analyze_subcircuit command, as described in Analyzing the Clock Mesh 11.\n Specify options and settings for tap assignment as described in Specifying Tap Assignment Options and Settings 12.\n Enable integrated tap assignment by setting the compile.flow.enable_multisource_clock_trees application option to true and run the compile_fusion -from initial_place command.\n fc_shell> set_app_options \\ -name compile_flow.flow.enable_multisource_clock_trees -value true fc_shell> compile_fusion -initial_place 13.\n Synthesize the entire clock tree, from the clock root, by using the following command: fc_shell> clock_opt -from build_clock -to route_clock During this step, the tool builds the local subtrees that are driven by the tap drivers.\n It also fixes DRC violations beyond ignore exceptions of the multisource clock tree, if applicable.\n You can also synthesize other clocks in the design that are not synthesized.\n 401 Implementing Multisource Clock Trees Feedback For more information about the clock_opt command, see Synthesizing, Optimizing, and Routing Clock Trees With the clock_opt Command 14.\n Analyze the clock tree results as described in Analyzing the Clock Tree Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mapping ECO Cells to Logically Equivalent Spare Cells"}, {"role": "assistant", "content": "When the tool maps an ECO cell, it looks for a spare cell with the same library cell name.\n If it is unable to find such a spare cell, the ECO cells remains unmapped.\n To identify and map such ECO cells to logically equivalent (LEQ) spare cells, use the following steps: 1.\n Identify the ECO cells that do not have matching spare cells by using the check_freeze_silicon command.\n 2.\n Find logically equivalent spare cells for these ECO cells by using the create_freeze_silicon_leq_change_list command.\n Specify The names of the unmapped ECO cells by using the -cells option A name for the output file by using the -output option This output file is a Tcl script with netlist editing commands.\n The commands replace each ECO cell with logically equivalent spare cells, which can be a Single spare cell with the same logical functionality, but a different library cell name Combination of up to two spare cells that give the same logical functionality 3.\n View the output Tcl file to ensure that the ECO mapping is satisfactory, and it if necessary.\n 4.\n Source the Tcl file in the tool to replace the ECO cells with their logical equivalents."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Identification of Shift Registers"}, {"role": "assistant", "content": "During compile, the tool can automatically identify shift registers in the design.\n The compile_fusion -to initial_opto command maps the first register to a scan cell and the other cells to nonscan cells, as shown in this figure.\n ___ RST SI SE CLK SO This capability improves the sequential design area and reduces congestion because of fewer scan-signals for routing.\n To disable this capability, set the compile.seqmap.identify_shift_registers application option to false.\n The default is true 237 Controlling Mapping and Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Signal Electromigration"}, {"role": "assistant", "content": "The comandsreport_signal_emreport_signal_em comand report_signal_em command performs signal electromigration analysis for each net by calculating the current on every edge and comparing this data with the constraints set by the read_signal_em_constraints command.\n For example, fc_shell> report_signal_em -violated -verbose 555 Analyzing and Fixing Signal Electromigration Violations Feedback The report_signal_em command performs a timing update, if needed, and analyzes all nets for electromigration.\n The -verbose option causes the report to show detailed electromigration analysis information, which usually produces a very large report when used by itself.\n To get a report with a reasonable size, use the -violated option as well, which limits the report to only the nets with electromigration violations.\n To limit the analysis to specific nets, use the -nets option.\n set_em_options comandcomandset_em_options You can specify settings for electromigration analysis by setting the application options shown in the following table.\n Table 34 Application Options for Signal Electromigration Analysis Application option Default Description em.net_delta_temperature 5.0 Specifies the delta temperature used for RMS limit lookup.\n em.net_duration_condition_for_peak 0.0 Specifies the duration value for peak current checking.\n em.net_global_rms_relaxation_factor 1.0 Specifies the global relaxation factor for the RMS limit specified in the constraints file.\n em.net_metal_line_number Specifies the metal line number used to look up the relaxation factor in the RMS constraint factor table provided in the constraints file.\n em.net_min_duty_ratio Specifies the minimum duty ratio for computing the peak current.\n em.net_use_waveform_duration false When false, the command uses current integral based duration.\n When true, the command uses current waveform based duration.\n em.net_violation_rule_types \"\" Specifies the type of constraint rules to use.\n When you perform signal electromigration analysis, the tool computes three current values: Average Root mean square Peak The default report generated by the report_signal_em command lists the number of nets with electromigration violations and the types of constraints violated (mean, absolute 556 Analyzing and Fixing Signal Electromigration Violations Feedback average, RMS, or peak).\n If you use the -verbose option, the report displays detailed information about the violations, as shown in Example 25 Example 25 Verbose Electromigration Report fc_shell> report_signal_em -violated -verbose...\n Net Name: clks/trimch_macroout_cb_group_gpaf0lts1_gpu_c_0_s_0[3] Violations: RMS PEAK Flag Segment Layer BBox Coordinates Width/Cut Required AVERAGE RMS PEAK v PATH_36_392230 M6D (1450.000, 995.612 -> 1452.715, 995.652) 0.040 0.085 1.514e-02 (-) 9.650e-01 (5.231e-01) 1.365e+00 (1.349e+00) VIA_S_11051278 V5D (1449.969, 995.582 -> 1450.071, 995.682) 1 - 1.465e-02 (-) 7.380e-01 (-) 1.044e+00 (-) v PATH_35_765189 M5A (1450.001, 994.973 -> 1450.039, 995.651) 0.038 0.047 1.417e-02 (-) 6.088e-01 (4.981e-01) 8.609e-01 (1.274e+00) VIA_S_11051279 V5D (1449.969, 994.942 -> 1450.071, 995.042) 1 - 1.369e-02 (-) 5.249e-01 (-) 7.423e-01 (-) PATH_36_392231 M6D (1407.370, 994.972 -> 1450.040, 995.012) 0.040 - 1.311e-02 (-) 2.047e-01 (5.231e-01) 2.894e-01 (9.443e-01) VIA_S_11051280 V5D (1407.339, 994.942 -> 1407.441, 995.042) 1 - 1.252e-02 (-) 1.926e-01 (-) 2.723e-01 (-)...\n The report shows the segment name (Segment column), layer name (Layer column), location coordinates (Bbox Coordinates column), metal width or via cut number (Width/Cut column), the constraint value (Required column), the average, RMS, and peak current in mA for the wire segment or via at that location.\n The letter \"v\" in the Flag column indicates a violation at that location.\n A hyphen in the Required column means that there is no electromigration constraint for that metal or via layer.\n In the AVERAGE, RMS, and PEAK columns, the first value is the calculated value and the value in parenthesis is the limit imposed by the electromigration constraints, where a hyphen indicates that there is no electromigration constraint."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Corner Type"}, {"role": "assistant", "content": "The custom.route.bus_corner_type application option specifies how the tool routes the bus trunks at corners.\n Valid values are: Valid Value Description auto (Default) Automatically determines the optimal corner type for the bit or pin alignment to reduce routing congestion.\n 766 Using Custom Routing Application Options Feedback Valid Value Description cross Routes the bits so that they overlap at the corner.\n river Routes the bits so that they do not overlap at the corner."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preparing Design and Input Data for Rail Analysis"}, {"role": "assistant", "content": "Before analyzing voltage drop and current density violations in a design using the RedHawk/RedHawk-SC Fusion capability, use the set_app_options command to specify the location of the libraries and the required input files.\n Table 66 lists the application options for specifying design and input data for running RedHawk/RedHawk-SC rail analysis within the Fusion Compiler environment.\n Table 66 Application Options for Specifying Design and Input Data Application Option Description rail.lib_files Specifies the library files in.lib format.\n For example, fc_shell> set_app_options \\ -name rail.lib_files \\ -value {test1.lib test2.lib} rail.tech_file Specifies the Apache technology file for performing PG extraction and PG electromigration analysis.\n For example, fc_shell> set_app_options \\ -name rail.tech_file \\ -value ChipTop.tech Specifies the dies that are included in detailed analysis.\n For example, fc_shell> set_app_options \\ -name rail.3dic_enable_die\\ -value {DIE1 true DIE2 true...} 877 Preparing Design and Input Data for Rail Analysis Feedback Table 66 Application Options for Specifying Design and Input Data (Continued) Application Option Description Specifies user-defined Instance Power File (IPF) for providing power to pins.\n For example, fc_shell> set_app_options \\ -name rail.instance_power_file\\ -value {E1 FILE1 DIE2 FILE2...} rail.apl_files Specifies the Apache APL files, which contain current waveforms and intrinsic parasitics for performing dynamic rail analysis.\n For example, fc_shell> set_app_options \\ -name rail.apl_files -value \\ {cell.current current \\ cell.cdev cap} rail.switch_model_files Specifies the RedHawk switch cell model files for performing dynamic rail analysis.\n For example, fc_shell> set_app_options \\ -name rail.switch_model_files \\ -value {switch.model} rail.macro_models Specifies the macro model files.\n For example, fc_shell> set_app_options \\ -name rail.macro_models \\ -value {gds_cell1 mm_dir1 \\ gds_cell2 mm_dir2} rail.lef_files (Optional) Specifies a list of LEF files.\n When not specified, the tool generates one using the data in the design library.\n rail.def_files (Optional) Specifies a list of DEF files.\n When not specified, the tool generates one using the data in the design library.\n rail.pad_files (Optional) Specifies a list of pad location files.\n When not specified, you need to specify the ideal voltage sources by running the create_taps command.\n rail.sta_file (Optional) Specifies the static timing file (STA), which contains the final slew and delay information.\n When not specified, the tool generates the static timing window information using the data in the design library.\n rail.spef_files (Optional) Specifies a list of SPEF files, which contain the detailed parasitic resistive and capacitive loading data of the signal nets.\n When not specified, the Fusion Compiler tool generates the SPEF file using the data in the design library.\n 878 Preparing Design and Input Data for Rail Analysis Feedback Table 66 Application Options for Specifying Design and Input Data (Continued) Application Option Description rail.effective_resistance_ instance_file (Optional) Specifies the instance file, which lists the cell instances for effective resistance calculation.\n rail.generate_file_type (Optional) Specifies the type of the script file to generate for RedHawk Fusion or RedHawk-SC Fusion rail analysis.\n The available file types are: tcl (default): Generates the file in Tcl format.\n The default file name is set_user_input.tcl python : Generates the file in python format.\n The default file name is input_files.py.\n The python script file is supported only in RedHawk-SC Fusion rail analysis flow.\n This application option is required when you run the RedHawk-SC rail analysis with a customized python script file.\n For more information, see Supporting RedHawk-SC Customized Python Script Files Example: fc_shell> set_app_options \\ -name rail.generate_file_type -value python rail.generate_file_variab les This application option is supported in RedHawk-SC only.\n Specifies the preferred user variables when a customized python script file is used for RedHawk-SC rail analysis.\n This application option is required when the script contains non-standard collateral python variable names.\n See Supporting RedHawk-SC Customized Python Script Files for details.\n Supported file types are: LEF DEF SPEF TWF PLOC Example: fc_shell> set_app_options \\ -name rail.generate_file_variables -value \\ {PLOC ploc LEF lef_files DEF def_files \\ SPEF spef_files TWF tw_files} rail.enable_new_rail_scena rio (Optional) Enables RedHawk Fusion or RedHawk-SC Fusion rail analysis with multiple rail scenario.\n The default is false.\n See Running Rail Analysis with Multiple Rail Scenarios for details.\n rail.enable_parallel_run_r ail_scenario (Optional) Enables distributed RedHawk Fusion or RedHawk SC Fusion analysis within the analysis flow.\n 879 Preparing Design and Input Data for Rail Analysis Feedback Table 66 Application Options for Specifying Design and Input Data (Continued) Application Option Description rail.scenario_name (Optional) Specifies the scenario for RedHawk or RedHawk-SC Fusion rail analysis.\n The tool honors the specified design scenario for the IR-driven features in power integrity flow, such as IR-driven placement, IR-driven concurrent clock and data optimization, and IR-driven optimizationSee Running Rail Analysis with Multiple Rail Scenarios for details..\n rail.dump_icc2_results_st yle -value 2.0 Specifies how to load the results with the new Ansys map style."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using an IC Validator Parameter File"}, {"role": "assistant", "content": "You can customize the metal fill insertion by using an IC Validator parameter file.\n For pattern-based metal fill insertion, you pass the parameter file to the IC Validator tool by setting the signoff.create_metal_fill.user_defined_options application option.\n fc_shell> set_app_options \\ -name signoff.create_metal_fill.user_defined_options \\ -value {-D INDESIGN_USER_DEFINED_PARAM_FILE= file_name For track-based metal fill insertion, you pass the parameter file to the IC Validator tool by using the -track_fill_parameter_file option with the signoff_create_metal_fill command.\n fc_shell> signoff_create_metal_fill -track_fill true \\ -track_fill_parameter_file file_name When you run track-based metal fill insertion, the IC Validator tool writes a parameter file named track_fill_params.rh into the run directory.\n This file contains the default settings for the supported parameters.\n You can modify this file as necessary and use it on subsequent signoff_create_metal_fill runs.\n Note: In some cases, the IC Validator behavior can be controlled by either an IC Validator parameter or an application option.\n In these cases, if both are specified, the IC Validator parameter setting overrides the application option setting.\n Table 50 shows the commonly used parameters supported in the parameter file.\n Unless otherwise specified, these parameters apply only to track-based metal fill insertion.\n The mx or vx prefix in the parameters refers to the mask name, which can be found in the layer section of the technology file.\n 719 Inserting Metal Fill With IC Validator In-Design Feedback For example, if layer M11 has the mask name metal12 in the technology file, the prefix m12 would replace mx in the parameters below.\n Therefore, the M11 layer would have the parameters m12_spare_fill m12_fill_staggering, and so on.\n Table 50 IC Validator Metal Fill Insertion Parameters Parameter Default Description Metal fill insertion mode parameters _sparse_fill Controls whether metal fill insertion uses sparse mode (1) or dense mode (0) for the specified metal layer.\n Note: If you use the -fill_all_tracks true option, the default changes to 0.\n _fill_staggering 0.075 microns Controls staggering for fill patterns.\n _ignore_route_guide Controls whether the IC Validator tool honors (0) or ignores (1) routing guides on the specified layer during metal fill insertion.\n _ignore_system_blockage Controls whether the IC Validator tool honors (0) or ignores (1) system blockages on the specified layer during metal fill insertion.\n _via_enclosure Derived from ContactCode section Specifies the minimum metal enclosure values for vias.\n Fill size and spacing parameters _fill_width defaultWidth Specifies the width of the metal fill shapes.\n _min_fill_length Derived from minArea Specifies the minimum length of the metal fill shapes.\n _max_fill_length 5 microns Specifies the maximum length of the metal fill shapes.\n Decreasing this value can increase the via density at the expense of decreasing the metal density.\n _fill2fill_side_ spacing Specifies the minimum spacing between fill shapes.\n _fill2route_side_ spacing Specifies the minimum spacing between metal fill and net shapes.\n 9.\n Attribute setting from the Layer section of the technology file 720 Inserting Metal Fill With IC Validator In-Design Feedback Table 50 IC Validator Metal Fill Insertion Parameters (Continued) Parameter Default Description _fill2fill_end_ spacing Specifies the minimum end-to-end spacing between fill shapes.\n _fill2route_end_ spacing Specifies the minimum end-to-end spacing between metal fill and net shapes.\n _fill2Blockage_x _fill2Blockage_y Specifies the minimum spacing between fill shapes and blockages.\n _fill2routeGuide_x _fill2routeeGuide_y Specifies the minimum spacing between fill shapes and routing guides.\n _fill2chipBoundary_x _fill2chipBoundary_y Specifies the minimum spacing between fill shapes and the chip boundary.\n _min_area_with_via Specifies the minimum fill area on which vias can be created.\n _EXCLUDED_CELLS_ OVERSIZE_VALUE 0.2 microns Specifies the minimum spacing between the macros specified in the _EXCLUDED_CELLS parameter and fill shapes.\n _EXCLUDED_CELLS {} Specifies the macros that use the spacing defined in the _EXCLUDED_CELLS_OVERSIZE_VALUE parameter.\n _iso_via_distance 3.0 microns Specifies the maximum distance within which a neighboring via must exist.\n _min_spacing minSpacing Specifies the minimum spacing between vias.\n Be careful when changing the value of these parameters.\n A value smaller than the default can cause DRC violations, while a value larger than the default negatively impacts the via density.\n _per_metal Specifies the maximum number of via fill shapes contained in a metal fill shape.\n You can use this parameter to increase the via density.\n However, changing the default can cause many metal fill shapes to be connected to each other, which can increase the overall capacitance for the nearby signal nets.\n Exclude layer parameters 721 Inserting Metal Fill With IC Validator In-Design Feedback Table 50 IC Validator Metal Fill Insertion Parameters (Continued) Parameter Default Description _exclude_layer_ datatype -1 Creates an exclude layer with the specified data type.\n The default setting of -1 prevents the creation of an exclude layer.\n Fill output mode parameters _compress_fill _compress_fill Controls whether the fill is compressed (1) or uncompressed (0) for the specified layer.\n Note: If you use the -mode add option, compression is not performed regardless of the setting of this parameter.\n _fill_datatype _fill_datatype Specifies the data type of the inserted fill shapes.\n output_colored_fill Controls whether fill shapes are assigned mask constraints in blocks that use double-patterning technology.\n Note: If you use the -output_colored_fill true option, the default changes to 1.\n _fill_datatype_ color1 _fill_datatype_ color1 _fill_datatype_ color2 _fill_datatype_ color2 Specifies the data type of the inserted colored fill shapes.\n Note: This parameter is used only colored fill is enabled.\n Density calculation parameters exclude_bounding_box_ blockage_for_density_ computation Controls whether the regions specified by the -excluded_coordinates option are excluded from the density computation.\n exclude_route_guides_ for_density_computation Controls whether routing guides are excluded from the density computation.\n exclude_system_metal_ blockages_for_density_ computation Controls whether system metal blockages are excluded from the density computation.\n 722 Inserting Metal Fill With IC Validator In-Design Feedback Table 50 IC Validator Metal Fill Insertion Parameters (Continued) Parameter Default Description _density_gradient_ window 10 windowSize Specifies the window size used for density gradient checking.\n You can also control the window size by setting the signoff.report_metal_density.gradient_windo w_size application option.\n Note: If the windowSize attribute is not specified in the technology file and the signoff.report_metal_density.gradient_wi ndow_size application option is not set, the tool uses a default of 50 microns.\n _max_density_window 50 microns Specifies the window size used for maximum density checking.\n _max_open_area_rule 10 Specifies the maximum size of a square area that contains no polygons and does not interact with any polygons.\n _min_density 10 minDensity Specifies the minimum percentage of metal allowed in the window.\n You can also control the window size by setting the signoff.report_metal_density.min_density application option.\n Note: If the minDensity attribute is not specified in the technology file and the signoff.report_metal_density.min_density application option is not set, the tool uses a default of 10 percent.\n _min_density_window 10 windowSize Specifies the window size used for minimum density checking.\n You can also control the window size by setting the signoff.report_metal_density.density_window application option.\n Note: If the windowSize attribute is not specified in the technology file and the signoff.report_metal_density.density_win dow application option is not set, the tool uses a default of 50 microns.\n 10.\n This parameter applies to timing-driven metal fill insertion, whether pattern-based or track-based.\n 723 Inserting Metal Fill With IC Validator In-Design Feedback Table 50 IC Validator Metal Fill Insertion Parameters (Continued) Parameter Default Description _window_step_size Half the window size Specifies the step size in the x- and y-directions used for density checking.\n The first value is the x-direction step size.\n The second value is the y-direction step size.\n These can be the same or different values.\n You can also control the step size by setting the signoff.report_metal_density.density_window"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Signoff Design Rule Checking"}, {"role": "assistant", "content": "Signoff design rule checking runs the IC Validator tool within the Fusion Compiler tool to check the routing design rules defined in the foundry runset.\n To perform signoff design rule checking, run the signoff_check_drc command, as described in Performing Signoff Design Rule Checking.\n In addition, you can use the signoff_fix_drc command to automatically fix the DRC violations detected by the signoff_check_drc command.\n For more information, see Automatically Fixing Signoff DRC Violations Note: An IC Validator license is required to run the signoff_check_drc and signoff_fix_drc commands.\n 572 Analyzing the Routing Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Placement Blockages During Boundary Cell Insertion"}, {"role": "assistant", "content": "If your technology has minimum jog or minimum separation requirements, you can create placement blockages for these requirements during boundary cell insertion with the compile_boundary_cells command by using the following options with the set_boundary_cell_rules command: -min_horizontal_jog If a horizontal edge of a macro, including its hard keepout margin, hard placement blockage, or voltage area, including its guard band, is less than the specified value, the compile_boundary_cells -add_placement_blockage command creates a placement blockage to prevent a violation.\n -min_vertical_jog If a vertical edge of a macro, including its hard keepout margin, hard placement blockage, or voltage area, including its guard band, is less than the specified value, the compile_boundary_cells -add_placement_blockage command creates a placement blockage to prevent a violation.\n -min_horizontal_separation If the continuous horizontal placement area is less than the specified value, the compile_boundary_cells -add_placement_blockage command creates a placement blockage to prevent a violation.\n -min_vertical_separation If the continuous vertical placement area is less than the specified value, the compile_boundary_cells -add_placement_blockage command creates a placement blockage to prevent a violation.\n Note: By default, the compile_boundary_cells command checks the specified rules, but does not create the placement blockages.\n To create the placement blockages, you must use the -add_placement_blockage option with the compile_boundary_cells command.\n This feature is supported only by the compile_boundary_cells command; it is not supported by the compile_targeted_boundary_cells command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Power Optimization for the clock_opt Command"}, {"role": "assistant", "content": "The Fusion Compiler tool can optimize both dynamic and static (leakage) power.\n Dynamic power This is the energy dissipated due to the voltage or logic transitions in the design objects, such as cells, pins, and nets.\n The dynamic power consumption is directly proportional to the number and frequency of transitions in the design.\n Static (leakage) power This is the energy dissipated even when there are no transitions in the circuit.\n This is also known as leakage power and depends on the device characteristics.\n The main contributor to leakage power is the sub-threshold-voltage leakage in the device.\n At lower technology nodes, leakage power consumption contributes significantly to the total power consumption of the circuit.\n The following topics describe how to enable the different types of power optimization the tool performs: Performing Conventional Leakage-Power Optimization Performing Dynamic-Power Optimization Performing Total-Power Optimization"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Synthesizing the Top-Level"}, {"role": "assistant", "content": "To synthesize the top-level, perform the following steps: 1.\n Read in the top-level design generated after the rebuild step as described in Partitioning and Planning the Full Chip Design 2.\n Set appropriate settings and link the top-level design as shown in the following example: fc_shell> set_label_switch_list \\ -reference {BLOCK1 BLOCK2} PostCompile fc_shell> set_attribute -objects {BLOCK1.nlib BLOCK2.nlib} \\ -name use_hier_ref_libs -value true fc_shell> set_top_module TOP When a subblock has been saved in the design library using labels, use the set_label_switch_list command to specify which label to link to.\n The set_top_module command links the specified top-level module.\n 3.\n Apply any block-specific constraints and settings required for synthesizing the top block and read in the test models for the subblocks as shown in the following example: fc_shell> read_test_model BLOCK1.ctl fc_shell> read_test_model BLOCK2.ctl fc_shell> create_test_protocol 4.\n Insert DFT logic and synthesize the top-level design by using the following commands: fc_shell> compile_fusion -to initial_opto fc_shell> insert_dft fc_shell> compile_fusion -from initial_place 823 Performing Hierarchical Synthesis Using ETMs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Routing Guides"}, {"role": "assistant", "content": "To remove routing guides from the current block, use the remove_routing_guides command.\n To remove specific routing guides, specify the routing rules, either as a list or collection, such as that returned by the get_routing_guides command.\n To remove all routing guides, specify the -all option.\n For example, to remove the new_width_rule routing rule, use the following command: fc_shell> remove_routing_rules new_width_rule"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generic ECO Flow for Timing or Functional Changes"}, {"role": "assistant", "content": "Use this flow to incorporate timing or functional ECO changes when you have the flexibility to add new cells and move or delete existing cells.\n This flow is recommended if you have not taped out your design.\n The unconstrained ECO flow consists of the following steps: 1.\n Update the design with the ECO changes by using one of the following methods: Using the eco_netlist command, as described in Making ECO Changes Using the eco_netlist Command Using netlist editing Tcl commands, as described in Making ECO Changes Using Netlist Editing Commands 2.\n Update the placement by using the place_eco_cells command, as described in Placing ECO Cells 3.\n Add filler cells to the empty spaces in the site array, as described in Inserting Filler Cells To reduce runtime, use the -post_eco option when you Insert metal filler cells with the create_stdcell_fillers command, and the tool marks the inserted filler cells as post-ECO cells.\n Remove filler cells with DRC violations with the remove_stdcell_fillers_with_violation command, and the tool performs DRC checking only for the post-ECO cells.\n 4.\n Update the routing by using the route_eco command, as described in Performing ECO Routing, or by manually rerouting the affected nets.\n 949 Freeze Silicon ECO Flow Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimization"}, {"role": "assistant", "content": "To improve correlation with the postroute stage of the design flow, the tool can perform global routing, perform extraction based on the global routes, and use this parasitic information when performing optimization.\n If the tool detects that the technology used by the design is an advanced technology node that is less than 16 nm, the tool enables this feature by default.\n To enable it for any technology, set the opt.common.enable_rde application option to true When enabled, the tool performs route-driven parasitic estimation during the final_opt stage of the compile_fusion and clock_opt commands.\n The parasitic information is 180 Specifying Settings for Preroute Optimization Feedback stored in the design library and used during subsequent optimization steps.\n If you enable this feature, you should enable it for all subsequent preroute optimization steps in the design flow.\n During route-driven estimation, the tool honors the capacitance and resistance scaling factors specified with the -early_cap_scale -late_cap_scale -early_res_scale and -late_res_scale options of the set_extraction_options command.\n When route-driven estimation is enabled, the tool ignores the setting of the opt.common.use_route_aware_estimation application option, which enables global- route-layer-based (GRLB) RC estimation."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Improvement"}, {"role": "assistant", "content": "The following topics provide information settings you can use to improve performance, power, and area (PPA) of a design: Enabling High-Effort Timing Mode Enabling Enhanced Delay Optimization to Improve Total Negative Slack Enabling High-Effort Area Mode Enabling the Embedded Area Optimization Flow"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Redundant Via Rates"}, {"role": "assistant", "content": "After redundant via insertion, whether concurrent or postroute, Zroute generates a redundant via report that provides the following information: The via conversion rate for nondefault vias The via conversion rate for nondefault vias is listed at the top of the report as the total optimized via conversion rate.\n 630 Inserting Redundant Vias Feedback The optimized via conversion rate for each layer The optimized via conversion rate includes both double vias and DFM-friendly bar vias, which have a single cut but a larger metal enclosure.\n The tool reports two values for the via conversion rate: The total optimized via conversion rate This value is computed based on the total via count, which includes both fixed vias and routed vias.\n Fixed vias are vias that cannot be optimized by the router, such as unrouted vias and user-defined vias.\n The optimized via conversion rate based on the total routed via count This value is computed based only on the routed via count, which includes only those vias that can be optimized by the router.\n Note: The optimized via conversion rate is not useful if you are using bar vias.\n The distribution of optimized vias by weight for each layer To determine the via conversion rate for conversions above a certain weight, you must add the reported conversion rates for those weights.\n For example, in Example 29, the via conversion rate for weight 5 and above for layer V03 is 10.75+64.50=75.25%.\n Note: The conversion rate for unweighted vias is reported as \"Un-optimized.\" The total double via conversion rate for the block Note: The redundant via rate reported by the report_design command differs from the redundant via rate reported by Zroute during redundant via insertion or the check_routes command.\n This difference occurs because the report_design command reports the double via rate for both PG vias and signal vias, while Zroute reports the double via rate only for signal vias.\n In addition, Zroute bases the conversion rate only on the redundant via mapping.\n Example 29 shows an example of the redundant via report.\n Example 29 Redundant Via Report Total optimized via conversion rate = 96.94% (1401030 / 1445268 vias) Layer V01 = 41.89% (490617 / 1171301 vias) Weight 10 = 9.64% (112869 vias) Weight 5 = 32.25% (377689 vias) Weight 1 = 0.01% (59 vias) Un-optimized = 58.11% (680684 vias) 631 Optimizing Wire Length and Via Count Feedback Layer V02 = 76.20% (1567822/ 2057614 vias) Weight 10 = 43.51% (895270 vias) Weight 5 = 28.62% (588805 vias) Weight 1 = 4.07% (83747 vias) Un-optimized = 23.80% (489792 vias) Layer V03 = 81.87% (687115 / 839297 vias) Weight 10 = 64.50% (541369 vias) Weight 5 = 10.75% (90224 vias) Weight 1 = 6.62% (55522 vias) Un-optimized = 18.13% (152182 vias) Layer V04 = 81.60% (226833 / 277977 vias) Weight 10 = 81.45% (226418 vias) Weight 1 = 0.15% (415 vias) Un-optimized = 18.40% (51144 vias)...\n Layer V09 = 85.47% (1329 / 1555 vias) Weight 10 = 85.47% (1329 vias) Un-optimized = 14.53% (226 vias) Total double via conversion rate = 46.69% (2158006 / 4622189 vias)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking Missing Vias and Unconnected Pins"}, {"role": "assistant", "content": "Use the analyze_rail -check_missing_via command to check for missing vias and unconnected pins in the block based on the settings specified by the set_missing_via_check_options command.\n Use the -voltage_drop option if you want to run missing via and unconnected pin checks together with voltage drop analysis.\n The tool then reports all missing vias found in the geometry with voltage values in the missing via report.\n To set a voltage threshold across layers for filtering the report, use the -threshold option of the set_missing_via_check_options command.\n You can set multiple threshold values in a missing via check.\n 892 Missing Via and Unconnected Pin Checking Feedback Note: In the RedHawk-SC Fusion flow, you must specify the -check_missing_via option together with the -voltage_drop option.\n In cases you want to report missing vias with and without setting a voltage threshold in one analyze_rail run, first set the desired threshold value (for example, 0.001) and then reset the value to -1.\n Setting -threshold option to -1 disables voltage checking.\n When the missing via check is completed, open the generated error data to examine the errors in the error browser.\n For details, see Viewing Error Data Example 48 fc_shell> set_missing_via_check_options -exclude_stack_via \\ -threshold 0.0001 fc_shell> analyze_rail -voltage_drop static -check_missing_via \\ -nets {VDD VSS} The above example sets the threshold value to 0.0001 and compares voltages across two ends of a via, excluding stack vias.\n It then runs the missing via check during static rail analysis.\n The RedHawk script file includes the following commands: perform extraction -power -ground perform analysis -static mesh vias -report_missing -exclude_stack_via -threshold 0.0001 \\ -o apache.missingVias1 Example 49 fc_shell> set_missing_via_check_options -exclude_stack_via \\ -threshold -1 fc_shell> analyze_rail -voltage_drop -check_missing_via \\ -nets {VDD VSS} The above example sets the threshold value to -1 to disable the voltage checking, and runs the missing via check.\n The RedHawk script file includes the following commands: perform extraction -power -ground mesh vias -report_missing -exclude_stack_via -threshold -1 \\ -o apache.missingVias1.nothreshold Example 50 fc_shell> set_missing_via_check_options -exclude_stack_via \\ -threshold 0.001 fc_shell> set_missing_via_check_options -exclude_stack_via \\ -threshold 0.002 fc_shell> set_missing_via_check_options -exclude_stack_via \\ 893 Missing Via and Unconnected Pin Checking Feedback -threshold -1 fc_shell> analyze_rail -voltage_drop static -check_missing_via \\ -nets {VDD VSS} fc_shell> report_rail_result -type missing_vias -supply_nets \\ {VDD VSS} rpt.missing_vias Information: writing rpt.missing_vias.no_threshold done Information: writing rpt.missing_vias done In the above example, three different threshold values are set for a missing via check.\n The tool generates two missing via reports: rpt.missing_vias.no_threshold includes all missing vias found in the geometry, while rpt.missing_vias includes the vias whose voltage difference across two ends is less than 0.001 and 0.002."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Logical Power and Ground Connections"}, {"role": "assistant", "content": "After you read in the design, you must ensure that there are logical connections between the power and ground nets and the power, ground, and tie-off pins on the cells in your design.\n If your design does not already have these connections, use the connect_pg_net command to create them.\n This command creates the logical power and ground connections for leaf cells, hierarchical cells, and physical-only cells in both single- voltage and multivoltage designs.\n Before creating the logical power and ground connections, you must resolve any PG conflicts among the netlist, floorplan, and UPF specification.\n For multivoltage designs, the conflicts are resolved when you commit the power intent, as described in Loading and Applying UPF Information For single-voltage designs, you must run the resolve_pg_netx command to resolve the conflicts.\n Note that the UPF specification for a single-voltage design is the default power domain generated by the read_verilog command.\n If your design contains unmapped instances, the tool issues an information message to indicate that only mapped instances are connected.\n 117 Setting Up Multivoltage Designs Feedback The connect_pg_net command operates in two modes: Automatic In automatic mode, the command derives all power and ground nets, power and ground pins, tie-off pins, and connections from the UPF specification.\n If the supply nets do not exist, the tool creates them.\n To create the logical power and ground connections in automatic mode, use the -automatic option with the connect_pg_net command.\n Manual In manual mode, the command makes the connections that you specify.\n If a specified pin or port has an existing connection, the tool removes the existing connection and then creates the specified connection.\n The tool verifies that the connections match the power intent.\n If it finds a mismatch, the tool issues a warning but still creates the connection.\n To create logical power and ground connections in manual mode, use the -net option to specify the power or ground net and specify the pins and ports to be connected to that net as an argument to the command.\n For example, to connect the VDD power net to all pins named vdd and the VSS ground net to all pins named vss, use the following commands: fc_shell> connect_pg_net -net VDD [get_pins */vdd] fc_shell> connect_pg_net -net VSS [get_pins */vss] To connect PG nets to power and ground pins only, use the -pg option.\n To connect PG nets to tie-off pins only, use the -tie option.\n By default, if neither option is specified, the tool makes connections to all power, ground, and tie-off pins.\n These options cannot be used with an object list or with the -create_nets_only and -net options.\n Regardless of the command options used, the tool always creates connections required to build a complete PG netlist structure, such as top-level PG ports and intermediate hierarchical PG pins.\n 118 Setting Up Multivoltage Designs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Move Bounds"}, {"role": "assistant", "content": "A move bound is a fixed region within which to place a set of cells.\n It comprises one or more rectangular or rectilinear shapes, which can be abutted, disjoint, or overlapping.\n To define the boundaries of these shapes, use the -boundary option with the create_bound command (if you are creating a new move bound) or the create_bound_shape command 146 Specifying Physical Constraints for Placement and Legalization Feedback (if you are adding shapes to an existing move bound).\n Note that you can specify one or more shapes when using the create_bound command, but only a single shape in each create_bound_shape command.\n To specify the boundary of a rectangle shape, use the following format to specify its lower-left and upper-right corners: {{ llx lly } { urx ury }} To specify the boundary of a rectilinear shape, use the following format to specify the coordinates of its vertices: {{ x1 y1 } { x2 y2 } { x3 y3 } { x4 y4 }...} Move bounds can be hard, soft, or exclusive.\n To define a soft move bound, use the following syntax: create_bound -name name [-type soft] [-effort effort_level ] \\ -boundary { coordinates } [ bound_objects The default effort is ultra ; you can also specify low medium, or high For example, to define a rectangular soft move bound for the INST_1 cell instance with its lower-left corner at (100, 100) and its upper-right corner at (200, 200), use the following command: fc_shell> create_bound -name b1 -boundary {100 100 200 200} INST_1 To define a hard move bound, use the following syntax: create_bound -name name -type hard -boundary { coordinates }\\ bound_objects For example, to define a rectangular hard move bound for the INST_1 cell instance with its lower-left corner at (100, 100) and its upper-right corner at (200, 200), use the following command: fc_shell> create_bound -name b2 -type hard \\ -boundary {100 100 200 200} INST_1 To define an exclusive move bound, use the following syntax: create_bound -name name -exclusive -boundary { coordinates } \\ bound_objects For example, to define a rectangular exclusive move bound for the INST_1 cell instance with its lower-left corner at (100, 100) and its upper-right corner at (200, 200), use the following command: fc_shell> create_bound -name b3 -exclusive \\ -boundary {100 100 200 200} INST_1 147 Specifying Physical Constraints for Placement and Legalization Feedback To add shapes to an existing move bound, use the create_bound_shape command.\n To remove shapes from an existing move bound, use the remove_bound_shapes command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing DRC Violations Caused by Pin Access Issues"}, {"role": "assistant", "content": "In advanced process nodes, the distance between pins decreases, which can result in DRC violations caused by pin access issues.\n These types of DRC violations can be fixed by using keepout margins to increase the spacing between cells.\n 552 Performing Postroute Optimization Feedback If your postroute design has DRC violations, analyze the violations to determine if they are caused by pin access issues.\n If so, run the optimize_routability command to increase the spacing between cells where the DRC violations occur.\n The optimize_routability command performs the following tasks: Analyzes the cells with DRC violations to find violations where cells abut By default, the command considers all DRC violations.\n To consider only specific DRC violations, use the -drc_rules option.\n To consider only violations on specific layers, use the -layer_rules option.\n To preview the number of DRC violations and affected cells, use the -check_drc_rules option.\n When you use this option, the command generates a report but does not move any cells.\n Sets keepout margins on these cells on the side of the cell where the error occurs By default, the command uses the site width as the keepout width.\n To specify a keepout width in microns, use the -keepout_width option.\n Note: These keepout margins are in addition to any existing keepout margins on the cells; the command does not modify the existing keepout margins.\n To try to fix the DRC violations by flipping the cells instead of adding keepout margins, use the -flip option.\n Legalizes the affected cells You must use one of the following methods to complete the routes for the cells moved by the optimization: Run ECO routing by using the route_eco command.\n Run ECO routing by using the -route option with the optimize_routability command.\n To fix the DRC in the areas that have changes, set the route.common.eco_fix_drc_in_changed_area_only application option to on When you use this option, the command runs the route_eco and check_routes commands after completing the optimization.\n After moving the cells and performing ECO routing, remove the keepout margins from the cells by using the optimize_routability -remove_keepouts command.\n 553 Analyzing and Fixing Signal Electromigration Violations Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Preroute Shielding"}, {"role": "assistant", "content": "To provide the most protection for critical clock nets, perform shielding on those nets after clock tree routing but before signal net routing.\n To add shielding to the routed clock nets based on the assigned shielding rules, use the create_shields command.\n By default, the create_shields command Performs shielding on all nets that have predefined shielding rules, except those marked as frozen To explicitly specify the nets on which to perform shielding, use the -nets option.\n Does not perform shielding on wires that are less than four pitches long To specify the minimum wire length in microns on which to perform shielding for each layer, set the route.common.min_shield_length_by_layer_name application option.\n Use the following syntax to set this option: { { layer wire_length }...\n } Specify the routing layers by using the layer names from the technology file.\n If you do not specify a value for a layer, Zroute uses the default minimum length of four pitch lengths for that layer.\n Note: Wires that are less than the minimum length are not considered when computing the shielding ratio.\n 541 Shielding Nets Feedback Ties the shielding wires to the ground net If the block contains multiple ground nets or you want to tie the shielding wires to the power net, use the -with_ground option to specify the power or ground net to which to tie the shielding wires.\n If the shielding wires can be tied to multiple power or ground nets, specify the nets by setting the route.common.shielding_nets application option before running the create_shields command.\n Note: If you specify both the create_shields -with_ground option and the route.common.shielding_nets option, the tool issues a warning message and uses the route.common.shielding_nets setting.\n Performs same-layer shielding To perform coaxial shielding, use the -coaxial_above and -coaxial_below options.\n By default, the create_shields command leaves one routing track open between each used track.\n To change the default behavior, use one of the following methods: Specify the number of open tracks between coaxial shielding segments by using the following options: -coaxial_above_skip_tracks This option specifies the number of open tracks between used tracks for coaxial shielding above the shielded net segment layer ( -coaxial_above true ).\n -coaxial_below_skip_tracks This option specifies the number of open tracks between used tracks for coaxial shielding below the shielded net segment layer ( -coaxial_below true ).\n For either of these options, you can specify an integer between zero and seven.\n Specify the number of open tracks between coaxial shielding segments on a per- layer basis by using the -coaxial_skip_tracks_on_layers option To disable shielding on a specific layer, set the value to -1; otherwise, specify an integer between 0 and 7 to specify the number of tracks to skip.\n Specify the spacing between coaxial shielding segments by using the following options: -coaxial_above_user_spacing This option specifies the spacing in microns between shielding segments for coaxial shielding above the shielded net segment layer ( -coaxial_above true ).\n 542 Shielding Nets Feedback -coaxial_below_user_spacing This option specifies the spacing in microns between shielding segments for coaxial shielding below the shielded net segment layer ( -coaxial_below true ).\n You cannot use this method when performing incremental shielding.\n Note: You cannot mix these methods of specifying coaxial shielding.\n If the generated coaxial shielding wires violate minimum area or minimum length rules, Zroute automatically patches the wires to satisfy these design rules.\n Connects the shielding wires to the standard-cell power or ground pins and the standard-cell rails To prevent connections to the standard-cell power and ground pins, set the -ignore_shielding_net_pins option to true.\n To prevent connections to the standard-cell rails, set the -ignore_shielding_net_rails option to true Creates the shielding wires such that they surround the shielded routing shape To trim the shielding wires so that they align with the shielded routing shape ends, set the -align_to_shape_end option to true.\n To force Zroute to create shielding wires only in the preferred direction, set the -preferred_direction_only option to true Note that the -preferred_direction_only option does not honor route guides to change the preferred routing direction.\n When you set either of these options to true extra effort is required to connect the shielding wires to the power and ground network and any shielding wires that are not connected to the power and ground network are deleted.\n For example, to perform coaxial shielding below the shielded net segment layer on the clock nets, prevent signal routing below the shielded net segment layer, and tie the shielding wires to VSS, use the following command: fc_shell> create_shields -nets $clock_nets \\ -coaxial_below true -coaxial_below_skip_tracks 0 \\ -with_ground VSS When you run the create_shields command, it reports both the net-based and length- based average shielding ratios, as shown in the following example: Shielded 82% side-wall of (reset) Shielded 96% side-wall of (clk) Shielded 2 nets with average ratio as follows.\n 1) 89.00% (total shield ratio/number of shielded nets) 2) 87.92% (total shield length/total shielded net length) 543 Shielding Nets Feedback Note: In some cases there is a slight difference in the shielding ratios reported by the create_shields and report_shields commands.\n This is due to graph connectivity differences between the two commands.\n When the reported values differ, use the values reported by the report_shields command.\n The difference in reported values is typically less than three percent, but can be up to five percent.\n If you use the -preferred_direction_only true option when running the create_shields command, but Zroute must use some nonpreferred direction wires for shielding, the shielding ratio report specifies the percentage of nonpreferred direction wires.\n By default, the power and ground structure is not included in the shielding ratio calculation.\n To include the power and ground structure within a threshold distance in the shielding ratio calculation, set the route.common.pg_shield_distance_threshold application option, which specifies the distance threshold in microns.\n fc_shell> set_app_options \\ -name route.common.pg_shield_distance_threshold -value distance Note that this option affects only the shielding ratio calculation and does not change the routing behavior."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a Partial Placement Blockage"}, {"role": "assistant", "content": "To define a partial blockage, specify the boundary, type ( -type partial option), blockage percentage ( -blocked_percentage option), and optionally the name for the placement blockage.\n For example, to define a partial blockage with a maximum allowed cell density of 60 percent (a blocked percentage of 40), enclosed by the rectangle with corners at (10, 20) and (100, 200), use the following command: create_placement_blockage -boundary {10 20 100 200} \\ -type partial -blocked_percentage 40 To allow unlimited usage of a partial blockage area, specify a blockage percentage of zero -blocked_percentage 0 option).\n Note: Partial placement blockages are honored during placement, but not during legalization, optimization, or clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Group Bounds"}, {"role": "assistant", "content": "move boundcreating A group bound is a floating region within which to place a set of cells.\n Group bounds can be hard, soft, or dimensionless.\n To define a soft group bound, use the following syntax: create_bound -name name [-type soft] [-effort effort_level ] \\ [-dimensions { width height bound_objects The default effort is ultra ; you can also specify low medium, or high For example, to define a soft group bound for the INST_1 and INST_2 cell instances with a width of 100 and a height of 100, use the following command: fc_shell> create_bound -name b4 -dimensions {100 100} \\ {INST_1 INST_2} To define a hard group bound, use the following syntax: create_bound -name name -type hard -dimensions { width height } \\ bound_objects For example, to define a hard group bound for the INST_1 and INST_2 cell instances with a width of 100 and a height of 100, use the following command: fc_shell> create_bound -name b5 -type hard -dimensions {100 100} \\ {INST_1 INST_2} To define a dimensionless group bound, use the following syntax: create_bound -name name [-effort effort_level ] \\ bound_objects The default effort is medium ; you can also specify low high, or ultra For example, to define a dimensionless group bound for the INST_1 and INST_2 cell instances in which the tool uses a high level of effort to place the cells closer within the group bound, use the following command: fc_shell> create_bound -name b6 -effort high {INST_1 INST_2}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Rebudgeting After compile_fusion"}, {"role": "assistant", "content": "After running the compile_fusion command with THO, the block interface timing changes as compared to when the blocks were implemented individually.\n Because the blocks are now optimized based on the top-level timing picture, you must create updated timing constraints for the blocks before you continue with the clock_opt command for the blocks.\n The CCD useful skew balance point offsets might have been modified during THO.\n These offsets need to also be made block-context-specific so that the clock tree synthesis step can take them into account.\n This example shows how you can perform budgeting: fc_shell> set budget_instances \"u1/a/i1 u1/b/i2 \u2026\" fc_shell> set_budget_options -reset -all fc_shell> set_budget_options -add_blocks $budget_instances fc_shell> set_app_options -list { plan.budget.use_ccd_latency true } fc_shell> set_app_options -list { plan.budget.write_hold_budgets false } fc_shell> set_app_options -list { plan.budget.estimate_timing_mode false } fc_shell> compute_budget_constraints -setup_delay -latency_targets actual -balance false -boundary fc_shell> write_budgets -output budgets-post-compile -force -nosplit -include_balance_points -include_pin_latency"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Multivoltage Information"}, {"role": "assistant", "content": "To ensure that the design does not have any multivoltage design violations, use the check_mv_design command.\n You can restrict the types of rules to check with the check_mv_design command.\n For example, the -isolation option specifies to check isolation strategy and isolation cell rules, while the -pg_pin option specifies to check rules associated with PG pins.\n To report multivoltage information for your design, use the commands shown in the following table.\n 132 Specifying Timing Constraints and Settings Feedback Table 6 Commands for Reporting Multivoltage Information To do this Use this command Report a summary of multivoltage information report_mv_design Report information about the multivoltage cells report_mv_cells Report information about the multivoltage library cells report_mv_lib_cells Report paths with multivoltage constraints and the associated multivoltage cells report_mv_path Report the power domains report_power_domains Check whether the specified power domains are equivalent check_equivalent_power_domains Display a list of equivalent power domains get_equivalent_power_domains Report the voltage areas report_voltage_areas"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Shielding Statistics"}, {"role": "assistant", "content": "To report the shielding statistics, use the report_shields command.\n Note: In some cases there is a slight difference in the shielding ratios reported by the create_shields and report_shields commands.\n This is due to graph connectivity differences between the two commands.\n When the reported values differ, use the values reported by the report_shields command.\n The difference in reported values is typically less than three percent, but can be up to five percent.\n By default, the power and ground structure is not included in the shielding ratio calculation.\n To include the power and ground structure within a threshold distance in the shielding ratio calculation, set the route.common.pg_shield_distance_threshold application option, which specifies the distance threshold in microns.\n fc_shell> set_app_options \\ -name route.common.pg_shield_distance_threshold -value distance The default report generated by the report_shields command provides overall statistics, as shown in Reporting Shielding Statistics Example 23 Default Shielding Report fc_shell> report_shields...\n Shielded 82% side-wall of (reset) Shielded 96% side-wall of (clk) Shielded 2 nets with average ratio as follows.\n 1) 89.00% (total shield ratio/number of shielded nets) 2) 87.92% (total shield length/total shielded net length) You can output the statistics for each layer by using the -per_layer true option with the report_shields command, as shown in Example 24 Example 24 Layer-Based Shielding Report fc_shell> report_shields -per_layer true...\n Shielded 82% side-wall of (reset) Layer: M1 ratio: 0% Layer: M2 ratio: 40% 547 Performing Postroute Optimization Feedback Layer: M3 ratio: 85% Layer: M4 ratio: 80% Shielded 96% side-wall of (clk) Layer: M3 ratio: 0% Layer: M4 ratio: 96% Layer: M5 ratio: 100% Shielded 2 nets with average ratio as follows.\n 1) 89.00% (total shield ratio/number of shielded nets) 2) 87.92% (total shield length/total shielded net length)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Associating Power Strategies With Existing Multivoltage Cells"}, {"role": "assistant", "content": "The Fusion Compiler tool automatically associates power strategies with existing multivoltage cells when you run the associate_mv_cells or commit_upf command.\n If this automatic association is not correct, you can manually modify the associations by using the set_power_strategy_attribute command.\n To determine the power strategies for a power domain, use the get_power_strategies command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preserving Preexisting Clock Trees"}, {"role": "assistant", "content": "When you perform clock tree synthesis, by default, the tool removes all preexisting clock buffers and inverters.\n You can prevent this by setting the cts.compile.remove_existing_clock_trees application option to false To preserve specific preexisting clock buffers or inverters, apply a don't touch or size-only exception on them."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Manual Grouping Flow"}, {"role": "assistant", "content": "Auto grouping is based on the create_repeater_groups command.\n Use manual grouping in case the auto grouping command result does not meet the requirement.\n Check your target cell connection before placement.\n Perform the following steps for manual grouping: 1.\n Group your cells by -cells, cell order intends the cell connection.\n 2.\n Define group virtual connection by -driver_group_id or -path_drivers.\n 3.\n Specify the cutline by -cutline.\n 990 Swapping Variant Cell Feedback 1.\n To define register path connections (virtual connection) for each set of repeater groups, use the set_repeater_group command.\n To check cell connection before placement, use the set_repeater_group -check_connection command.\n If the cell connection is not placed as expected, repeat a reset repeater group for desired cell connection.\n It also adds new options to record pin pair for the -check_connection option.\n The pin_pair option is used to find cell real connection based on specified lib cell pin name.\n 2.\n Verify the path with the get_attribute report_repeater_group, and get_repeater_path_info commands.\n The get_attribute command reports the attributes of the group_repeater_driver or group_repeater_loads commands.\n The report_repeater_groups command reports group information for specified groups or all groups, and reports repeater paths for all groups if -verbose is on.\n The command get_repeater_paths_info returns cells on repeater paths that include input cells.\n 3.\n Check and report invalid paths based on real connection with the set_repeater_group -check connection command.\n 4.\n Place interconnect repeaters on route with cutline for input repeater groups."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Voltage Hotspot Analysis Examples"}, {"role": "assistant", "content": "This topic provides examples about how to use the hotspot analysis capability to identify the root cause of voltage violations.\n Cells with overlapping timing windows might switch at the same time, leading to high voltage drops.\n Figure 215 shows how to identify if the cell has overlapping timing windows.\n 944 Voltage Hotspot Analysis Feedback Figure 215 Checking High Voltage Drop Caused by Overlapping Timing Window (I) Next, run the report_hot_spots command with the -index option to find which grid has overlapping timing windows that contribute to large current.\n As shown in Figure 216 when the -index option is set to 5, the grid 5 is reported with small total current.\n When the -index option is set to 2, the grid 2 is reported with large total current.\n In this case, overlapping time windows contribute to the high effective voltage drop in grid 2.\n 945 Querying Attributes Feedback Figure 216 Checking High Voltage Drop Caused by Overlapping Timing Window (II) See Also Generating Hotspots Reporting Hotspots Removing Hotspots"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Programmable Spare Cells"}, {"role": "assistant", "content": "The Fusion Compiler tool supports programmable spare cells, also known as gate array filler cells, if they are provided by your vendor.\n These cells can be programmed by metal mask changes for ECO implementation, reducing mask costs and time-to-results.\n To insert programmable spare cells, use the following steps: 1.\n Specify the programmable spare cell that a standard cell can map to by setting the same psc_type_id attribute setting on the corresponding library cell for the standard cell and the programmable spare cell.\n The following example specifies that The standard cells named BUF1 and INV1 can map to the programmable spare cell named fill1x by setting the psc_type_id attribute to for the corresponding library cells.\n The standard cells named NAND2 and NOR2 can map to the programmable spare cell named fill2x by setting the psc_type_id attribute to for the corresponding library cells.\n fc_shell> set_attribute [get_lib_cells fill_lib/fill1x] \\ psc_type_id 1 fc_shell> set_attribute [get_lib_cells stdcell_lib/BUF1] \\ psc_type_id 1 fc_shell> set_attribute [get_lib_cells stdcell_lib/INV1] \\ psc_type_id 1 fc_shell> set_attribute [get_lib_cells fill_lib/fill2x] \\ psc_type_id 2 fc_shell> set_attribute [get_lib_cells stdcell_lib/NAND2] \\ psc_type_id 2 fc_shell> set_attribute [get_lib_cells stdcell_lib/NOR2] \\ psc_type_id 2 2.\n Insert the programmable spare cells by using the create_stdcell_fillers command.\n The following example inserts programmable spare cells named fill1x and fill2x: fc_shell> create_stdcell_fillers \\ -lib_cells {fill_lib/fill1x fill_lib/fill2x} During the ECO flow, the tool swaps an ECO cell with a programmable spare cell based on the psc_type_id attribute setting, cell width, and voltage area.\n If the tool removes an ECO cell from the design, it can reuse the corresponding programmable spare cell.\n 960 Making ECO Changes Using the eco_netlist Command Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Boundary Cell Placement Rules"}, {"role": "assistant", "content": "By default, When you run the compile_boundary_cells command, the tool places the boundary cells in their default orientation around the core area, hard macros, and hard placement blockages.\n When you run the compile_targeted_boundary_cells command, the tool places the boundary cells in their default orientation around the specified objects.\n To flip the boundary cell orientations, use one or more of the following options with the set_boundary_cell_rules command: -mirror_left_boundary_cell -mirror_right_boundary_cell -mirror_left_outside_corner_cell -mirror_right_outside_corner_cell -mirror_left_inside_corner_cell -mirror_right_inside_corner_cell -mirror_left_inside_horizontal_abutment_cell, and -mirror_right_inside_horizontal_abutment_cell.\n You cannot flip the orientation of the top and bottom boundary cells.\n In addition, when you use the compile_boundary_cells command, you can modify the following aspects of the default placement behavior: Swapping of the top and bottom inside corner cells on flipped rows Use the -do_not_swap_top_and_bottom_inside_corner_cell option with the set_boundary_cell_rules command to prevent the command from using the bottom inside corner cell on the top inside corner of flipped rows and the top inside corner cell on the bottom inside corner of flipped rows.\n Consideration of voltage areas Use the -at_va_boundary option with the set_boundary_cell_rules command to insert horizontal boundary cells on both sides of the voltage area boundaries.\n Existence of one-unit-tile gaps Use the -no_1x option with the set_boundary_cell_rules command to prevent boundary cell insertion from creating one-unit-tile gaps.\n When you use this option, the command does not insert boundary cells on a row when the row length equals two times the corner cell width plus one unit tile width.\n Note that if the row length equals two times the corner cell width, the command does insert boundary cells.\n Distance between tap cells Use the -tap_distance option with the set_boundary_cell_rules command to specify the distance in microns between the tap cells inserted on the top and bottom boundary rows.\n 596 Performing Boundary Cell Insertion Feedback Insertion of boundary cells on short rows Use the -min_row_width option with the set_boundary_cell_rules command to prevent insertion of boundary cells on short rows.\n This option defines the width threshold for inserting boundary cells on a row.\n If the row width is less than the specified value, the command does not insert boundary cells on the row.\n Insertion of boundary cells in child blocks Use the -insert_into_blocks option with the set_boundary_cell_rules command to recursively insert boundary cells in the child blocks.\n By default, the tool does not insert boundary cells in the child blocks."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Displaying the PG Electromigration Map"}, {"role": "assistant", "content": "A PG electromigration map is a visual display of the color-coded electromigration values overlaid on the physical supply nets.\n For static analysis, the map displays average electromigration values.\n For dynamic analysis, the map displays average electromigration values, peak electromigration values, or root mean square electromigration values.\n Figure 204 shows an example of the electromigration map in which problem areas are highlighted in different colors.\n Use the options to investigate the problem areas by 904 Performing PG Electromigration Analysis Feedback selecting layers or nets to display.\n For example, to examine the current value of one specific net, deselect all the nets and then select the net to display from the list.\n To analyze only the shapes on a layer, select the layer from the list.\n For a detailed procedure about how to display an electromigration map, see Displaying Maps in the GUI Figure 204 Displaying a PG Electromigration Map"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Logical Design Rule Constraints"}, {"role": "assistant", "content": "Minimum capacitance, maximum capacitance, and maximum transition are logical design rule constraints that your design must meet to function as intended.\n They are technology- specific restrictions that are specified in the logic libraries.\n However, you can specify more restrictive design rule constraints by using the constraint commands given in Table 7 During optimization, the Fusion Compiler tries to meet the design rule constraints, even if it means violating optimization constraints such as timing, power, and area goals; these design rule constraints have a higher priority.\n After optimization, you can use the reporting commands given in Table 7 to identify design rule constraint violations in a block.\n Table 7 Design Rule Commands To do this Use this command Specify the minimum allowed capacitance for input ports, library cell pins, leaf cell pins, clocks, or blocks set_min_capacitance Specify the maximum allowed capacitance for input ports, library cell pins, leaf cell pins, clocks, or blocks set_max_capacitance Specify the maximum allowed signal transition time for input ports, library cell pins, leaf cell pins, clocks, or blocks set_max_transition Remove a user-specified minimum capacitance constraint remove_min_capacitance 134 Specifying Clock Gating Constraints Feedback Table 7 Design Rule Commands (Continued) To do this Use this command Remove a user-specified maximum capacitance constraint remove_max_capacitance Remove a user-specified maximum transition constraint remove_max_transition Report minimum capacitance constraint violations report_constraints -min_capacitance Report maximum capacitance constraint violations report_constraints -max_capacitance Report maximum transition constraint violations report_constraints -max_transition Specify the connection requirements for the network that is connected to the specified ports or library cell pins For ports: set_connection_class For pins: set_attribute \\ -name connection_class Note: The maximum fanout design rule constraint is not honored by the Fusion Compiler tool.\n However, you can specify a maximum fanout for the data paths in a block by using the opt.common.max_fanout application option.\n This is a soft optimization constraint.\n During optimization the tool tries to ensure that data path cells do not drive more than the specified maximum fanout."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Commands"}, {"role": "assistant", "content": "You interact with the Fusion Compiler tool by using fc_shell commands, which are based on the Tool Command Language (Tcl) and include certain command extensions needed to implement specific Fusion Compiler functionality.\n The Fusion Compiler command language provides capabilities similar to Linux command shells, including variables, conditional execution of commands, and control flow commands.\n You can Enter individual commands interactively at the fc_shell> prompt in fc_shell Enter individual commands interactively on the console command line in the GUI Run one or more Tcl scripts, which are text files that contain fc_shell commands (see Using Tcl Scripts When entering a command, an option, or a file name, you can minimize your typing by pressing the Tab key when you have typed enough characters to specify a unique name; the Fusion Compiler tool completes the remaining characters.\n If the characters you typed could be used for more than one name, the Fusion Compiler tool lists the qualifying names, from which you can select by using the arrow keys and the Enter key.\n If you need to reuse a command from the output for a command-line interface, you can copy and paste the portion by selecting it, moving the pointer to the fc_shell command line, and clicking with the middle mouse button.\n When you run a command, the Fusion Compiler tool echoes the command output (including processing messages and any warnings or error messages) in fc_shell and, if the GUI is open, in the console log view.\n By default, the tool does not use page mode, so the output might scroll.\n To enable page mode, set the sh_enable_page_mode variable to true 46 Entering fc_shell Commands Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Shielding Checks"}, {"role": "assistant", "content": "During routing, Zroute can detect possible issues with shielding by checking for the following conditions: Signal net shapes with a shape_use attribute of shield_route PG net shapes, which might be a PG strap or rail, but have a shape_use attribute of detail_route Signal, clock, or PG nets that have a shielding nondefault rule but no associated shield shapes, which might be caused by inappropriate shape_use attributes.\n To enable these checks, set the route.common.check_shield application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Restricting Library Cell Usage"}, {"role": "assistant", "content": "By default, the Fusion Compiler tool can use all of the library cells available in the cell libraries when performing optimization or clock tree synthesis on the block.\n To restrict the cell usage, use the set_lib_cell_purpose command after the block is in memory.\n The command has a block scope and is persistent across tool sessions.\n The specified settings are restored when the block is reopened.\n To specify how the tool can or cannot use library cells, use the -include and -exclude options with the set_lib_cell_purpose command.\n Both of these options accept one or more of the following values: all cts hold optimization none The -include option sets the included_purposes attribute on the specified library cells.\n The -exclude option sets the excluded_purposes attribute on the specified library cells.\n 77 Setting Up Libraries Feedback Note: If a library cell has a dont_use attribute, it is excluded from all uses, which is the same as if you specified set_lib_cell_purpose -include none for that cell.\n When the tool performs optimization, which includes setup, hold, and logical DRC fixing, it can use library cells that have an included purpose of optimization hold, or both.\n When the tool performs clock tree synthesis, it can use library cells that have an included purpose of cts For example, to disallow the use of a set of library cells for all uses, use the following command: fc_shell> set_lib_cell_purpose -include none lib_cells To allow a set of library cells to be used only for clock tree synthesis, use the following commands: fc_shell> set_lib_cell_purpose -include none lib_cells fc_shell> set_lib_cell_purpose -include cts lib_cells To allow a set of library cells to be used for all uses except clock tree synthesis, use the following command: fc_shell> set_lib_cell_purpose -exclude cts lib_cells To use the asterisk wildcard character (*) to query a collection of cells, you must use the get_lib_cells command.\n However, the set_lib_cell_purpose command excludes synthetic modules by default.\n Therefore, you should use the set_synlib_dont_use command to exclude synthetic modules.\n For example, fc_shell> set_lib_cell_purpose \\ -include none [get_lib_cells */*01_*_AB] Warning: The'set_lib_cell_purpose' command cannot be used on synthetic library cell'standard:*OPMOD.DW01_ADD_AB.timing'.\n (NDMUI-511)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Library Configuration"}, {"role": "assistant", "content": "Library configuration allows you to specify which vendor libraries to use as reference libraries for the current design.\n You specify the technology file, physical libraries, and logic libraries by using the search_path and link_library variables, and then you use the create_lib or set_ref_libs command to assemble the cell libraries.\n 76 Setting Up Libraries Feedback During library configuration, The Fusion Compiler tool automatically calls the Library Manager tool without user intervention to generate cell libraries, as shown in the following figure:.frame files ASCII technology file.db files Cell libraries Synthesis The tool saves the generated cell libraries to disk and adds them to the reference library list of the design library.\n These cell libraries are the same as when the cell libraries are created during library preparation in the Library Manager tool.\n For more information, see the Configuring Cell Libraries topic in the Fusion Compiler Data Model User Guide"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Clock Tree References"}, {"role": "assistant", "content": "The buffer and inverter cells that can be used to build a clock tree and the reference cells of the preexisting gates of the clock tree are referred to as clock tree references To specify the clock tree references, use the set_lib_cell_purpose -include cts command.\n Ensure that the list of cells you specify as clock tree references meets the following criteria: The list contains at least one buffer or one inverter The list contains the library cells of the preexisting gates If they are not included in the list, the tool is unable to resize these preexisting gates during clock tree synthesis and optimization.\n You can automatically derive equivalent cells for all the preexisting clock tree cells that are not buffers or inverters and specify them as clock references by using the derive_clock_cell_references command, as described in Deriving Clock Tree References for Preexisting Gates For multivoltage designs with always-on buffering requirements, the list contains always-on cells The library cells in the reference list do not have a dont_touch attribute If library cells have the dont_touch attribute set on them, they are not used by clock tree synthesis even if you specify them as clock tree references.\n To ensure that clock tree synthesis uses only the specified set of cells and that these cells are not used by any optimization step other than clock tree synthesis, run the following commands: fc_shell> set cts_cells list_of_cells fc_shell> set_lib_cell_purpose -exclude cts [get_lib_cells] fc_shell> set_lib_cell_purpose -include none [get_lib_cells $cts_cells] fc_shell> set_lib_cell_purpose -include cts [get_lib_cells $cts_cells]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Area Recovery in Regions of High Utilization"}, {"role": "assistant", "content": "For designs that cannot be legalized due to areas of high utilization, you can specify that the tool perform area recovery in regions where the utilization is high by setting the opt.common.small_region_area_recovery application option to true When you enable this feature, the tool performs the area recovery during the compile_fusion and clock_opt commands.\n However, doing so can slightly degrade the timing QoR."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Ideal Voltage Sources as Taps"}, {"role": "assistant", "content": "Taps are used to model the external voltage source environment in which the device under analysis operates; they are not part of the design itself, but can be thought of as virtual models of voltage sources.\n The locations of the ideal voltage sources and the ideal power supplies in the design are required to achieve accurate rail analysis results.\n To create a tap, use the create_taps command.\n You can create multiple taps by running multiple create_taps commands.\n To specify a name for the created tap, use the -name option.\n If the specified name is already present in the design, the tool issues a warning message, and replaces the original tap with the new one.\n When you create multiple taps by a single invocation of the create_taps command, all of the created taps are named by using the tap_name _NNN naming convention, where NNN is a unique integer identifier and tap_name is the string argument to the -name option.\n 885 Specifying Ideal Voltage Sources as Taps Feedback You can create taps in any of the following ways: Treating top-level PG pins as taps Use the -top_pg option when the block does not have physical pad or bump information available.\n Use the -supply_net option to explicitly associate a tap to the supply (either power or ground) net connected to the object from which the tap was defined.\n To implicitly associate a tap with the supply net, run the create_taps command without the -supply_net option.\n The following example creates taps for all the top-level supply pins.\n fc_shell> create_taps -supply_net VDD -top_pg Creating taps at absolute coordinates Use the -layer and -point options to create taps at the specified coordinates.\n If there is no supply net, supply pin, or via shape at the specified location, which means there is no conductive path to the supply network, the tap has no effect on rail analysis despite being present.\n If you define a tap in a location where a tap already exists, the tool issues a warning message and replaces the original tap with the new one.\n You must specify the supply net with which this tap is associated by using the -supply_net option.\n Note: When you use the -point option with the -of_objects option, the location is relative to the origin of the specified object.\n Otherwise, it is relative to the origin of the current top-level block.\n The following example creates a tap using absolute coordinates.\n The command checks whether the coordinate location touches any layout shape.\n fc_shell> create_taps -supply_net VDD \\ -layer 3 -point {100.0 200.0} Warning: Tap point (100.0, 200.0) on layer 3 for net VDD does not touch any polygon (RAIL-305) Using existing instances as taps To create taps on specified objects, use the create_taps -of_objects command.\n Each item in the object list can be a cell or a library cell, or a collection of cells and library cells.\n By default, the tool creates the taps on the power and ground pins of the objects.\n If you specify the -point option, the tool creates the taps at the specified physical location relative to the origin of each object.\n 886 Specifying Ideal Voltage Sources as Taps Feedback Use existing instances for creating taps when analyzing a top-level design where pad cells are instantiated physically.\n Use the -supply_net option to explicitly associate a tap to the supply (either power or ground) net connected to the object from which the tap was defined.\n To implicitly associate a tap with the supply net, run the create_taps command without the supply_net option.\n The following example creates taps for each instance of the some_pad_cell library cell.\n The tool creates one tap per instance on the metal1 layer at a location of {30.4 16.3} relative to the origin of the cell instance.\n fc_shell> create_taps -of_objects [get_lib_cell */some_pad_cell]\\ -layer metal1 -point {30.4 16.3} The following example creates taps on all power and ground pins of all cell instances that match the *power_pad_cell* pattern.\n fc_shell> create_taps -of_objects [get_cells -hier \\ *power_pad_cell*] Importing a tap file If you are working with a block that does not yet have pins defined, or if the location or design of the pad cells is not finalized, you can define tap locations, layer numbers, and supply nets in an ASCII file and then import it into the tool by using the create_taps -import command.\n The supported tap file format is as follows: net_name layer_number [X-coord Y-coord] Lines starting with semicolon (;) or pound (#) symbols are treated as comments.\n The x- coordinate and y-coordinate values are specified in microns.\n For example, fc_shell> exec cat tap_file VDD 3 500.000 500.000 VSS 5 500.000 500.000 fc_shell> create_taps -import tap_file Creating taps with packages A simple package RLC (resistance-inductance-capacitance) model provides a fixed set of electrical characteristics assigned to all power and ground pads.\n To use simple package RLC models for rail analysis, you need to specify the pad location file which defines the simple RLC model by using rail.pad_files application option.\n 887 Specifying Ideal Voltage Sources as Taps Feedback For a detailed description about simple package RLC models, see the related section in the RedHawk User Manual Note: Before creating taps with simple package RLC models, you must enable the RedHawk signoff license key using the rail.allow_redhawk_license_checkout application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Interior Tap Walls"}, {"role": "assistant", "content": "An interior tap wall is a row or column of tap cells that is placed inside the boundary of the standard cell placement area of a block, a macro, hard placement blockage, or nondefault voltage area.\n Note: You can insert interior tap walls only for designs with a single site definition.\n To insert an interior tap wall, use the create_interior_tap_walls command.\n You must specify the following information: The tap cell used in the tap wall (the -lib_cell option) The specified tap cell must be a single-height cell that matches the row height and site width.\n By default, the command inserts the tap cells with the row orientation.\n To place the cells with a different orientation, use the -orientation option.\n By default, the tool uses the following naming convention for inserted tap cells: tapfiller__ library_cell_name _R _C number To identify the tap cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the tool uses the following naming convention: prefix __ library_cell_name _R _C number The side along which to insert the tap wall (the -side option) You can specify only a single side, top bottom right, or left.\n To insert a tap wall on more than one side, run the command multiple times.\n 589 Inserting Tap Cells Feedback By default, the tap cells are placed along all edges on the specified side of the standard cell placement area with no gaps between the tap cells.\n To specify the tap insertion region, use the -bbox option to specify the lower-left and upper-right corners of its bounding box: -bbox {{ llx lly } { urx ury }} When you use this option, the command inserts a tap wall along the longest edge on the specified side of the placeable area encompassed by the bounding box.\n The alignment of the tap wall depends on the number of corners of the edge segment encompassed by the bounding box.\n If the edge segment does not contain a corner, the tap wall starts at the left edge for a horizontal tap wall or the bottom edge for a vertical tap wall.\n If the edge segment contains one corner, the tap wall starts at that corner.\n If the edge segment contains two corners along the specified side, the tap wall starts at the left edge for a horizontal tap wall or the bottom edge for a vertical tap wall.\n For a horizontal tap wall with two corners, the spacing between the last two cells might be shortened to align with the right corner.\n If there is not enough space, the last cell might not abut the right corner.\n For horizontal tap walls, you can specify a gap distance between tap cells by using the -x_spacing option.\n If you specify a value smaller than the tap cell width, the command uses a spacing of zero.\n If you specify a value that is not a multiple of the site width, the command rounds it down to a multiple of the site width.\n When inserting the tap wall, the command honors the standard cell rows and sites; if the rows and sites are not defined, the command does not insert tap cells.\n Obstructions such as placement blockages, fixed cells, and macros can prevent the insertion of the tap cells and result in an incomplete or missing tap wall.\n After insertion, the command fixes the placement of the inserted tap cells.\n 590 Inserting Tap Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Available Sites for Placing ECO Cells"}, {"role": "assistant", "content": "You can report sites available for placing ECO cells by using the report_cell_feasible_space command.\n By default, the tool reports the available sites in the entire block.\n You can restrict the report to specific voltage areas by using the -voltage_areas option or to a specific rectangle or rectilinear area by using the -boundary option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Area-Based Placement Blockages"}, {"role": "assistant", "content": "An area-based placement blockage is a rectangular region in which cells cannot be placed or in which the types or number of cells is limited.\n The Fusion Compiler tool supports the following types of area-based placement blockages: Hard A hard blockage prevents the placement of standard cells and hard macros within the specified area during coarse placement, optimization, and legalization.\n 139 Specifying Physical Constraints for Placement and Legalization Feedback Hard macro A hard macro blockage prevents the placement of hard macros within the specified area during coarse placement, optimization, and legalization.\n Soft A soft blockage prevents the placement of standard cells and hard macros within the specified area during coarse placement, but allows optimization and legalization to place cells within the specified area.\n Partial A partial blockage limits the cell density in the specified area during coarse placement, but has no effect during optimization and legalization.\n get_placement_blockages comandcomandsget_placement_blockages To define placement blockages, use the create_placement_blockage command.\n At a minimum, you must specify the coordinates of the placement blockage.\n To create a rectangular placement blockage, use the -boundary option to specify the lower-left and upper-right coordinates of the rectangle.\n To create a rectilinear placement blockage, use the -boundary option to specify the coordinates of the polygon.\n You can also create multiple placement blockages by specifying the boundary polygon as a geo_mask or a collection of physical objects.\n If the resulting area resolves to multiple, noncontiguous polygons, the command creates multiple placement blockages, one corresponding to each polygon.\n By default, the create_placement_blockage command creates a hard placement blockage.\n To create another type of placement blockage, use the -type option to specify the blockage type.\n A single create_placement_blockage command can create just one type of placement blockage.\n You can optionally assign a name to a placement blockage by using the -name option.\n You can then reference that blockage by name to query or remove the placement blockage."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Dynamic-Power Optimization"}, {"role": "assistant", "content": "To set up for dynamic-power optimization during the preroute optimization stage, perform the following: 1.\n Annotate switching activity on the design, as described in Annotating the Switching Activity 2.\n Ensure that at least one scenario is enabled for dynamic-power optimization by using the set_scenario_status -dynamic_power true command.\n When you use these settings, the tool performs dynamic-power optimization during the clock_opt command.\n However, it does not perform any leakage-power optimization."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Abutting Standard Cells With Specific Filler Cells"}, {"role": "assistant", "content": "If your technology requires specific filler cells on the left or right sides of certain standard cells, use the create_left_right_filler_cells command to insert these filler cells.\n After you run the create_left_right_filler_cells command, perform standard filler cell insertion to fill the remaining gaps in the design.\n You must use the -lib_cells option to specify the rules for filler cell insertion.\n Each rule uses the following format: standard_cells } { left_filler_cells } { right_filler_cells For the standard_cells argument, You must specify a list of one or more standard cells You can use wildcards to specify the cell names If you specify multiple rules for the same standard cell, the command uses only the last rule specified for that cell.\n For the left_filler_cells and right_filler_cells arguments, At least one of these arguments must contain one or more filler library cells If only one of the arguments contains filler library cells, the tool inserts filler cells only on that side of the standard cells.\n The specified filler cells must meet the following requirements: They must have a design_type attribute of lib_cell or filler They must use the same site definition as the standard cells.\n The height of the standard cells must be an integer multiple of the filler cell heights.\n The command tries to insert the filler cells in the order that you specify; for the best results, specify them from the largest to the smallest.\n 655 Inserting Filler Cells Feedback You can use wildcards for the filler cell names.\n When you use wildcards, the order of the cells is the same as that returned by the get_lib_cells command.\n The following example inserts filler cells on the left and right sides of the SC1 standard cells and only on the left side of the SC2 standard cells.\n The left and right filler cells are specified in decreasing size order, so that the command inserts the largest possible filler cell.\n fc_shell> create_left_right_filler_cells \\ -lib_cells { { {mylib/SC1} {mylib/LF4X mylib/LF2X} {mylib/RF2X mylib/RF1X} } { {mylib/SC2} {mylib/LF2X mylib/LF1X} {} } } When the create_left_right_filler_cells command inserts the filler cells, It checks for legal locations for the filler cells, but does not check advanced rules such as minimum threshold voltage, oxide-diffusion (OD), or trimpoly (TPO) rules.\n It inserts the filler cells immediately next to the standard cells; it does not consider the intercell spacing rules.\n See Also Standard Filler Cell Insertion Controlling Cell-Based Filler Cell Insertion You can control the following aspects of the filler cell insertion with the create_left_right_filler_cells command: The region in which to insert the filler cells By default, the command inserts filler cells next to the specified standard cells in the entire block.\n Use the -boundaries option to restrict filler cell insertion to the specified regions.\n You can specify one or more rectangular or rectilinear regions.\n Use the -voltage_areas option to restrict filler cell insertion to the specified voltage areas.\n The orientation of the filler cells By default, the command uses the allowable orientations of the row to place the filler cells.\n To use the same orientation as the standard cell, use the -follow_stdcell_orientation option.\n When you use this option, the tool swaps the right and left filler cells when the cell is flipped.\n 656 Inserting Filler Cells Feedback The handling of one-unit-tile gaps By default, the command does not consider the one-unit-tile rule.\n To prevent the tool from inserting filler cells that would leave a one-unit-tile gap, use the -rules no_1x option.\n When you enable this rule, do not include filler library cells with a width of one- unit tile in the -lib_cells option; otherwise, the tool ignores this rule.\n The naming convention used to identify the inserted filler cell instances By default, the command uses the following naming convention for inserted filler cells: xofiller!\n filler_library_cell_name number To identify the filler cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the command uses the following naming convention: xofiller!\n prefix filler_library_cell_name number"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Taps"}, {"role": "assistant", "content": "To remove taps that were previously created using the create_taps command, use the remove_taps command.\n To remove specific taps, use the -filter option with the get_taps command.\n The following example removes all the supply pin taps that are of the type top_pg: fc_shell> remove_taps [get_taps -filter type==top_pg] To remove all the taps in the block, run the following command: fc_shell> remove_taps"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running IC Validator on Specific Hosts"}, {"role": "assistant", "content": "To enable IC Validator multicore processing on one or more specific hosts, use the set_host_options command to specify the following information: The host names If you do not specify a host name or submit protocol, the IC Validator tool runs on the host on which the Fusion Compiler tool is currently running.\n The number of cores Use the -num_processes or -max_cores options to specify the number of cores.\n If you use both options, the IC Validator tool uses the product of the settings as the number of cores.\n The specified number of cores applies to each specified host.\n For example, to enable the IC Validator tool to use 4 cores on the current host, use the following command: fc_shell> set_host_options -target ICV -num_processes 4 To enable the IC Validator tool to use 16 cores (8 cores each on machineA and machineB), use the following command: fc_shell> set_host_options -target ICV \\ -num_processes 2 -max_cores 4 {machineA machineB} 662 Preparing to Run IC Validator In-Design Commands Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Conventional Leakage-Power Optimization"}, {"role": "assistant", "content": "To set up for conventional leakage-power optimization during the preroute optimization stage, perform the following: 1.\n Ensure that at least one scenario is enabled for leakage-power optimization by using the set_scenario_status -leakage_power true command and the set_qor_strategy -metric leakage_power | total_power command for deciding the target of power flow.\n 2.\n (Optional) Change the effort level for power optimization by setting the set_qor_strategy -mode command to balanced or extreme_power.\n The default is balanced.\n This effort control for the power flow.\n When you use these settings, the tool performs conventional leakage-power optimization during the clock_opt command.\n However, it does not perform any dynamic-power optimization.\n 191 Setting Up for Power-Related Features Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Metal Fill"}, {"role": "assistant", "content": "After routing, you can fill the empty spaces in the block with metal wires to meet the metal density rules required by most fabrication processes.\n Before inserting metal fill, the block should be close to meeting timing and have very few or no DRC violations.\n To insert metal fill, run the signoff_create_metal_fill command, as described in Inserting Metal Fill With IC Validator In-Design Note: An IC Validator license is required to run the signoff_create_metal_fill command.\n 659 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Options for Signoff DRC Fixing"}, {"role": "assistant", "content": "Before you run the signoff_fix_drc command, configure the run by setting the application options shown in Table 44.\n To set the application options, use the set_app_options command.\n To see the current settings, use the report_app_options command.\n Table 44 Application Options for Signoff DRC Fixing Application option Default Description signoff.fix_drc.\n advanced_guidance_for_rules all Controls whether signoff DRC fixing uses advanced routing guidance.\n By default, the signoff_fix_drc command uses advanced routing guidance ( all ).\n To disable this feature, set the application option to off signoff.fix_drc.check_drc local Controls whether signoff DRC checking is performed only on those portions of the block affected by signoff DRC fixing local, which is the default) or on the entire block ( global ).\n signoff.fix_drc.\n custom_guidance (none) Enables a signoff DRC fixing run that targets double-patterning odd-cycle violations when it is set to dpt.\n For information about fixing double-patterning odd-cycle violations, see Automatically Fixing Double-Patterning Odd-Cycle Violations 685 Performing Signoff Design Rule Checking Feedback Table 44 Application Options for Signoff DRC Fixing (Continued) Application option Default Description signoff.fix_drc.\n fix_detail_route_drc global Controls whether the signoff_fix_drc command fixes routing DRC violations for the entire block ( global ) or only in the areas near the signoff DRC violations local ).\n signoff.fix_drc.\n init_drc_error_db (none) Specifies the location of the signoff DRC results from the previous run.\n By default, the signoff_fix_drc command runs the signoff_check_drc command to generate the initial signoff DRC results.\n signoff.fix_drc.\n last_run_full_chip false Controls whether the signoff DRC checking in the final repair loop runs only on those portions of the block affected by signoff DRC fixing ( false ) or on the whole block ( true ).\n signoff.fix_drc.\n max_detail_route_iterations Specifies the maximum number of search and repair loops to run after signoff DRC fixing.\n signoff.fix_drc.\n max_errors_per_rule 1000 Specifies the maximum number of DRC violations to fix per rule.\n signoff.fix_drc.run_dir signoff_fix_drc_run Specifies the run directory, which contains the files generated by the signoff_fix_drc command.\n You can specify either a relative path, in which case the directory is created under the current working directory, or an absolute path.\n signoff.fix_drc.\n target_clock_nets false Controls whether signoff DRC fixing targets data nets ( false ) or clock nets true ).\n signoff.fix_drc.\n user_defined_options (none) Specifies additional options for the IC Validator command line.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string.\n 686 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Relative Placement in a Design Containing Obstructions"}, {"role": "assistant", "content": "During placement, relative placement groups avoid placement blockages (obstructions) that are defined in the DEF file or created by the create_placement_blockage command.\n A relative placement group can be broken into pieces that straddle obstructions, yet maintain the relative placement structure.\n If the height of the obstruction is below a certain threshold, the relative placement cells are shifted vertically; otherwise, the relative placement column is shifted horizontally.\n Figure 185 shows the placement of relative placement cells in a design containing obstructions that are either defined in the DEF file or created by create_placement_blockage.\n The obstruction in columns one and two is below the 809 Performing Placement and Legalization of Relative Placement Groups Feedback threshold, so the tool shifts the cells vertically.\n The obstruction in column four is greater than the threshold, so the tool shifts all the cells of the column horizontally.\n Figure 185 Relative Placement in a Design Containing Obstructions 0 4 0 0 4 4 4 3 4 1 4 2 0 1 4 0 col 0 row 0 row 2 row 4 row 3 row 1 col 1 col 2 col 4 col 3 0 3 0 2 1 4 1 3 1 0 1 1 1 2 2 4 2 3 2 0 2 2 2 1 3 4 3 3 3 1 3 2 3 0 Obstruction Obstruction"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I ECO-Aware Removal of PG Augmentation Shapes"}, {"role": "assistant", "content": "To automatically remove PG augmentation shapes that are causing DRC violations after ECO, use the -mode remove_by_drc_auto option with the signoff_create_pg_augmentation command.\n This action removes DRC violating 706 Inserting Metal Fill With IC Validator In-Design Feedback PG augmentation metal shapes or vias from design, including any floating connections created due to removal of DRC violating shape.\n For example, fc_shell> signoff_create_pg_augmentation -node <nodename> -mode remove_by_drc_auto"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Learning Data"}, {"role": "assistant", "content": "For designs with poor timing correlation between the preroute and postroute stages, you can improve the correlation by performing optimization after clock tree synthesis using machine learning (ML) data derived after detail routing.\n The machine learning concept uses the following terminology: Labels, which are the outputs you are trying to predict Features, which are the inputs that affect the outputs Model, which is the relationship between the features (inputs) and the labels (outputs) Training, which is the process of learning the relationship between the features (inputs) and the labels (outputs), based on the data collected To perform global-route-based optimization using machine learning (ML) data derived from the postroute stage, 1.\n Collect machine learning features and labels, and train the model by performing the following steps in a specific iteration, iteration N: a.\n Perform clock tree synthesis and clock routing by completing the build_clock and route_clock stages of the clock_opt command.\n b.\n Specify the output directory for the machine learning data by using the new est_delay.ml_delay_opto_dir application option.\n fc_shell> set_application_option \\ -name est_delay.ml_delay_opto_dir -value./ML c.\n Enable integrated feature extraction by setting the new est_delay.ml_delay_gre_mode application option to feature fc_shell> set_application_option \\ -name est_delay.ml_delay_gre_mode -value feature d.\n Perform global-route-based optimization by using the clock_opt -from final_opt command.\n e.\n Perform detail routing.\n f.\n Collect labels associated with the features that were previously collected during the clock_opt -from final_opt command by using the estimate_delay -training_labels command, as shown in the following example: fc_shell> estimate_delay -training_labels \"label_1\" \\ -output_dir./ML 389 Implementing Clock Trees and Performing Post-CTS Optimization Feedback The labels must be collected after detail routing, but before postroute optimization.\n g.\n Train the machine learning model for the collected features and label by using the estimate_delay -train_model command as shown in the following example: fc_shell> estimate_delay -train_model \"features_1 label_1\" \\ -output_dir./ML h.\n Continue with postroute optimization and the rest of the steps in the implementation flow.\n 2.\n Use the machine learning data to improve correlation by performing the following steps in the subsequent iteration, iteration N+1: a.\n Perform clock tree synthesis and clock routing by completing the build_clock and route_clock stages of the clock_opt command.\n b.\n Specify the output directory for the machine learning data by using the new est_delay.ml_delay_opto_dir application option.\n fc_shell> set_application_option \\ -name est_delay.ml_delay_opto_dir -value./ML c.\n Enable the machine learning model, which was derived in the previous iteration, by setting the new est_delay.ml_delay_gre_mode application option to enable fc_shell> set_application_option \\ -name est_delay.ml_delay_gre_mode -value enable d.\n Perform global-route-based optimization with the machine learning data by using the clock_opt -from final_opto command.\n e.\n Perform detail routing.\n f.\n Disable the machine learning model after you complete all the detail routing steps by using the estimate_delay -disable_model command, as shown in the following example: fc_shell> estimate_delay -disable_model -output_dir./ML g.\n Continue with postroute optimization and the rest of the steps in the implementation flow.\n When using this feature, ensure that The same scenarios are active at each step and each iteration of the flow The machine learning model is re-created if there are changes to the design, its environment, or the flow 390 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Your Baseline Run"}, {"role": "assistant", "content": "By default, the first row of data is your baseline run against which all other runs are compared.\n The name of the baseline run is highlighted in gold to mark it as the \"golden,\" or baseline, result.\n 271 Performing Design Analysis Feedback The shading of non-baseline cells indicates the direction and degree by which the data differs from the baseline: Red indicates a degradation compared to the baseline; green indicates an improvement compared to the baseline Lighter shading represents a smaller difference compared to the baseline; darker shading represents a larger difference compared to the baseline To view the delta thresholds corresponding to each shade, hover the cursor over the column headers: To change your baseline run, click the Runs button and select a new run as the baseline from the Baseline Run column, as shown in the following figure: 272 Performing Design Analysis Feedback See Also Changing the QoR Display Style Sorting and Filtering the Data Exploring the Detailed Comparison Data"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Direction"}, {"role": "assistant", "content": "You can use a routing guide to limit the number of occurrences of a specific routing pattern within the routing guide boundary on specific layers.\n Zroute tries to route the nets within the routing guide to meet this constraint; however, if the number of edges in the nonpreferred direction exceeds the specified threshold, Zroute reports a violation.\n To create this type of routing guide, use the -max_patterns option with the create_routing_guide command.\n Use the following syntax to specify the routing pattern and its threshold for each affected layer: { { layer pattern limit }...\n } In addition to using the -max_patterns option, you must also use the -layers option when you create this type of routing guide.\n Specify the same layers in the -layers option as those specified in the -max_patterns option.\n 476 Routing Constraints Feedback If you do not specify a pattern threshold for a layer, the routing pattern has no limit for that layer.\n Currently, the only supported pattern is non_pref_dir_edge, which represents the edges in the nonpreferred direction.\n For example, to limit the number of edges in the nonpreferred direction to two on M2 and to three on M4, with no limits on other layers, use the following command: fc_shell> create_routing_guide -boundary {{50 50} {200 200}} \\ -max_patterns {{M2 non_pref_dir_edge 2} {M4 non_pref_dir_edge 3}} \\ -layers {M2 M4}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preventing Specific Clocks From Being Synthesized"}, {"role": "assistant", "content": "By default, the tool synthesizes all clocks defined with the create_clock and create_generated_clock commands.\n To prevent the tool from synthesizing a specific clock, specify it by using the cts.common.skip_cts_clocks application option.\n fc_shell> set_app_options \\ -name cts.common.skip_cts_clocks -value CK_B"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Finding and Fixing Antenna Violations"}, {"role": "assistant", "content": "In chip manufacturing, gate oxide can be easily damaged by electrostatic discharge.\n The static charge that is collected on wires during the multilevel metalization process can damage the device or lead to a total chip failure.\n The phenomenon of an electrostatic charge being discharged into the device is referred to as either antenna or charge- collecting antenna problems.\n 600 Finding and Fixing Antenna Violations Feedback To prevent antenna problems, the tool verifies that for each input pin the metal antenna area divided by the gate area is less than the maximum antenna ratio given by the foundry: (antenna-area)/(gate-area) < (max-antenna-ratio) This check is based on the global and layer-specific antenna rules defined for the block and the antenna properties of the cells in the block.\n The antenna flow consists of the following steps: 1.\n Define the antenna rules.\n 2.\n Specify the antenna properties of the pins and ports.\n 3.\n Analyze and fix the antenna violations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Application Options"}, {"role": "assistant", "content": "The Fusion Compiler tool uses application options to control the tool behavior.\n Application options use the following naming convention: category [.\n subcategory ].\n option_name where category is the name of the engine affected by the application option.\n Some application option categories have subcategories to further refine the area affected by the application option.\n Application options have either a global scope or a block scope.\n Block-scoped application options apply only to the block on which they are set.\n They are saved in the design library and are persistent across tool sessions.\n Global-scoped application options apply to all blocks, but only within the current session.\n They are not saved in the design library; you must specify them in each fc_shell session.\n You might want to consider adding the global settings to your.synopsys_fc.setup file.\n To get a list of available application options, use the get_app_options command.\n By default, this command lists all application options.\n To restrict the reported application options, provide a pattern string as an argument to the command.\n For example, to list all available application options, use the following command: fc_shell> get_app_options To list all available timer application options, use the following command: fc_shell> get_app_options timer.* To generate a report of application options, use the report_app_options command.\n For detailed information about application options, see Application Options in the Fusion Compiler Data Model User Guide See Also Using Setup Files"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Concepts"}, {"role": "assistant", "content": "This topic introduces the following concepts used in the Fusion Compiler tool: Power Intent Concepts UPF Flows Multiple-Patterning Concepts 37 Fusion Compiler Concepts Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading Via Definitions from a LEF File"}, {"role": "assistant", "content": "To read via definitions specified by via rule GENERATE statements in a LEF file, use the read_tech_lef command.\n This command supports the following LEF syntax: via_rule_name GENERATE [DEFAULT] LAYER lower_layer_name ENCLOSURE lower_overhang1 lower_overhang2 LAYER upper_layer_name ENCLOSURE upper_overhang1 upper_overhang2 LAYER cut_layer_name RECT llx lly urx ury SPACING x_spacing BY y_spacing The WIDTH and RESISTANCE statements are not supported."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Comparing QoR Data"}, {"role": "assistant", "content": "You can generate a web-based report to view and compare your QoR data with a QORsum report by performing the following steps: 1.\n (Optional) Configure the QoR data, which is captured and displayed in the subsequent steps, by using the set_qor_data_options command.\n To specify the most critical power scenarios in your design, use the -leakage_scenario and -dynamic_scenario options.\n The tool uses the power scenarios you specify to generate the high-level summary of the power QoR in the QORsum report.\n If you do not specify these options, it uses the active power scenario with the highest total power for both the leakage and dynamic scenario for the power QoR summary.\n These settings are only used for the power QoR summary.\n The tool uses the power information of all active power scenarios to capture and report the detailed power information in the QORsum report.\n To specify the most critical clock name and clock scenario, use the -clock_name and -clock_scenario options.\n The tool uses the clock name and scenario you specify to generate the high-level summary of the clock QoR in the QORsum report.\n If you do not specify these options, the tool identifies the most critical clock and uses it for the clock QoR summary.\n These settings are only used for the clock QoR summary.\n The tool uses all clocks to generate the detailed clock QoR information in the QORsum report.\n To specify a name to identify the run in the QORsum report, use the -run_name option.\n By default, the tool names each run with a number, such as Run1, Run2, and so on.\n You can use this option to give a more meaningful name to each run.\n You can also specify the run name by using the -run_names option when you generate the QORsum report by using the compare_qor_data command in step.\n If you do so, the tool ignores the run name specify by the set_qor_data_options -run_name command.\n 269 Performing Design Analysis Feedback The following example specifies the leakage-power scenario, dynamic-power scenario, clock scenario, and the clock to use for the corresponding summary in the QORsum report: fc_shell> set_qor_data_options \\ -leakage_scenario S1 -dynamic_scenario S2 \\ -clock_scenario S3 -clock_name sys_clk 2.\n Collect the QoR data for your report by using the write_qor_data command.\n The write_qor_data command captures QoR data related to timing, power, runtime, and other metrics.\n You can run the write_qor_data command multiple times, at each stage of the design flow at which you want to capture QoR data.\n Use the -label and specify a value to indicate at which stage of the flow you are capturing the data.\n By default, the write_qor_data command captures data relevant to a placed and optimized design.\n You can specify the -report_group option with any of the five supported value ( unmapped mapped placed cts routed ) to tune the set of reports being captured, based on the state of the flow where you are capturing the data.\n For finer-grain control, use the -report_list option to explicitly specify each report you want to generate.\n The write_qor_data command captures a standard set of QoR data to disk from most of the common tool reports like the report_qor and report_power.\n If there is additional custom data to capture that is not part of the command collection, use the capture_qor_data command to capture fully custom QoR data or GUI layout images to include in the web-based QORsum report.\n This can be used to supplement the standard QoR data captured by the write_qor_data command, or to create fully custom QORsum reports.\n Related commands include define_qor_data_panel that lets you create a new panel in the QORsum report for viewing QoR data, and set_qor_data_metric_properties, that lets you customize the properties of any metric column in any QORsum report panel, so you can control things like the style of coloring, or the thresholds for coloring when comparing data.\n 3.\n Generate the QORsum report by using the compare_qor_data command.\n This command takes the data captured by one or more runs of the write_qor_data command and creates a web-based report for viewing and comparing those results.\n You must specify the location of the output of each of the write_qor_data runs from the previous step by using -run_locations option.\n Each path location corresponds to the run result that you want to compare.\n You can assign a specific name to identify the run in the QORsum report by using the -run_names option.\n If you do so, the tool ignores the run name specify by using the set_qor_data_options -run_name command.\n By default, the tool names each run by a number, such as run1, run2, and so on.\n 270 Performing Design Analysis Feedback You can specify the output directory by using the -output option.\n By default, the tool writes the report to a directory named compare_qor_data.\n To overwrite exiting output data, use the -force option.\n By default, the tool does not overwrite existing output data.\n 4.\n View the generated QORsum report by using the view_qor_data command.\n Figure 38 QORsum Report For more information about exploring the comparison data, see the following topics: Setting Your Baseline Run Changing the QoR Display Style Sorting and Filtering the Data Exploring the Detailed Comparison Data"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Cell Input Mode"}, {"role": "assistant", "content": "Cell input mode enables to set distance based on route placement.\n By default, repeaters are placed based on even distance on route for one repeater path.\n This mode allows you to set the -first_distance or -last_distance option to control the distance at driver side or load side.\n 1.\n Use the place_group_repeaters -cells -blockage_aware command, to internally enable auto grouping.\n To internally enable auto grouping use the create_repeater_groups -cells command and derive cutline based on distance.\n Then, define repeater group by using the set_repeater_group -group_id -cutline command, After placing group repeaters, you can query repeater groups using the report_repeater_groups command and repeater paths info using the get_repeater_paths_info command.\n 2.\n To establish cell connection based on real connection and apply distance based placement, use the place_group_repeaters -cells command.\n No repeater group is created."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using the create_tap_cells Command"}, {"role": "assistant", "content": "ad_tap_cel_aray comandcomandsad_tap_cel_aray To add a tap cell array based on the site rows, use the create_tap_cells command.\n You must specify the name of the library cell to use for tap cell insertion ( -lib_cell option) and the maximum distance, in microns, between tap cells ( -distance option).\n 582 Inserting Tap Cells Feedback For example, fc_shell> create_tap_cells -lib_cell myreflib/mytapcell -distance 30 Note: If the place.legalize.enable_pin_color_alignment_check application option is true (its default is false ), the command ensures that internal cell pins and metal of the tap cells align with a routing track of the appropriate color when inserting the tap cells and shifts the tap cells to avoid violating color alignment.\n To avoid signoff DRC errors due to this shifting, reduce the tap distance slightly when this application option is true By default, the create_tap_cells command inserts tap cells in every row for the entire block.\n The tool starts inserting the tap cells at the left edge of the row and uses the specified tap distance to determine the location of the subsequent tap cells.\n In addition, if a tap cell does not exist within the minimum tap distance (half the specified tap distance) from each row edge adjacent to the block's boundary, a hard macro, or a hard placement blockage, the tool inserts an additional tap cell.\n Figure 121 shows the default tap cell placement for a block that uses the every-row insertion pattern.\n Note that extra tap cells are added to the right of the hard macro to ensure that a tap cell exists within the minimum tap distance from the edge of the hard macro.\n Figure 121 Default Tap Cell Placement 583 Inserting Tap Cells Feedback You can modify the following aspects of the default behavior: The library cell used for tap cell insertion on rows with a mirrored (MX) orientation Use the -mirrored_row_lib_cell option to specify the library cell to use for mirrored rows.\n The pattern used to insert the tap cells Use the -pattern option to specify one of the following tap cell insertion patterns: every_row (the default) This pattern inserts tap cells in every row.\n For this pattern, the tap distance specified with the -distance option should be approximately twice the maximum diffusion-to-tap value specified in the technology design rules.\n every_other_row This pattern inserts tap cells only in the odd-numbered rows.\n For this pattern, the tap distance specified with the -distance option should be approximately twice the maximum diffusion-to-tap value specified in the technology design rules.\n stagger This pattern inserts tap cells in every row with the tap cells in even rows offset by half the offset value ( -offset option) relative to the odd rows, which produces a checkerboard-like pattern.\n For this pattern, the tap distance specified with the -distance option should be approximately four times the maximum diffusion-to-tap value specified in the technology design rules.\n The offset from the left edge of the row Use the -offset option to shift the pattern startpoint to the right by the specified distance in microns.\n The handling of fixed cells By default, tap cells are inserted at the computed tap locations, regardless of whether a fixed cell occupies that location.\n Use the -skip_fixed_cells option to prevent the insertion of tap cells in locations occupied by fixed cells.\n By default, when you use this option, the command considers the fixed cell as a blockage and breaks the row at the fixed cell, which can result in a tap cell being inserted on each side of the fixed cell.\n To prevent tap cells from overlapping fixed cells without breaking the row, use the -preserve_distance_continuity option with the -skip_fixed_cells option.\n When you use both options, the command shifts the tap cell to avoid overlap with the fixed cell.\n The -preserve_distance_continuity option shifts only those tap cells whose computed tap location is occupied by an instance of one of the specified library cells.\n 584 Inserting Tap Cells Feedback For example, the following command shifts tap cells whose computed tap location is occupied by a fixed instance of the mylib/cell1 library cell: fc_shell> create_tap_cells -lib_cell mylib/tap -distance 30 \\ -skip_fixed_cells -preserve_distance_continuity mylib/cell1 When you use the -skip_fixed_cells option, you can also specify the minimum horizontal spacing between the boundary and a corner tap cell that is above or below a blocked area by using the -min_horizontal_periphery_spacing option.\n This option specifies the minimum number of unit tiles between the boundary and an affected corner tap cell.\n Figure 122 shows how using this option affects the tap cell placement both with and without boundary cells.\n Figure 122 Tap Cell Boundary Row Spacing -min_horizontal_periphery_spac -min_horizontal_periphery_spac The addition of extra tap cells You can use one or both of the following methods to prevent the insertion of extra tap cells: Use the -row_end_tap_bypass option to specify that the boundary cells contain taps, so additional tap cells are not inserted at the boundary.\n Note that the command does not verify that the block has boundary cells or that the boundary cells actually contain taps.\n Use the -at_distance_only option to allow the insertion of tap cells only at the specified tap distance, half of the tap distance, or one fourth of the tap distance (for the stagger pattern only).\n Note that using this option can cause DRC violations.\n The regions in which to insert tap cells Use the -voltage area option to restrict the tap cell insertion to the specified voltage areas.\n 585 Inserting Tap Cells Feedback The naming convention used to identify the inserted tap cell instances By default, the tool uses the following naming convention for inserted tap cells: tapfiller!\n library_cell_name number Use the -separator option to change the separator character from its default of \"!.\" To identify the tap cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the tool uses the following naming convention: tapfiller!\n prefix library_cell_name number"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Custom Vias"}, {"role": "assistant", "content": "To define a custom via, use the following create_via_def syntax: create_via_def -shapes { { layer coordinates } [ mask_constraint ]}...\n } [-lower_mask_pattern alternating | uniform] [-upper_mask_pattern alternating | uniform] [-force] via_def_name In the -shapes option, you must specify shapes for one via layer and two metal layers, which are the enclosure layers for the via.\n You can specify multiple shapes per layer.\n For example, to create a custom via definition, use a command similar to the following: fc_shell> create_via_def design_H_shape_via \\ -shapes { {VIA12 {0.035 -0.035} {0.100 0.035}} {VIA12 {-0.100 -0.035} {-0.035 0.035}} {METAL1 {-0.130 -0.035} {0.130 0.035}} {METAL2 {-0.100 -0.065} {-0.035 0.065}} {METAL2 {0.035 -0.065} {0.100 0.065}} {METAL2 {-0.100 -0.035} {0.100 0.035}} } To overwrite an existing via definition, use the -force option; otherwise, the command fails if the specified via definition already exists.\n 445 Inserting Via Ladders Feedback If you are using double-patterning technology, you can assign mask constraints to the shapes or the enclosure layers, but not both.\n To assign mask constraints to the shapes, use the mask_one mask_two, or mask_three keywords for the mask_constraint arguments when specifying the -shapes option.\n You would use this method if the mask constraints follow an arbitrary pattern.\n When you create a via with the create_via command, the via shapes inherit the mask constraints specified in the via definition.\n If the mask constraint you specify for an enclosure layer when you create a via differs from the mask constraint specified for the first shape in the via definition, the specified mask constraint determines the mask-shift used for all shapes on that layer.\n For example, fc_shell> create_via_def VIA12 \\ -shapes { {M1 {-0.037 -0.010} {-0.017 0.01} mask_two} {M1 {0.017 -0.010} {0.037 0.01} mask_one} {VIA1 {-0.037 -0.01} {0.037 0.01} mask_two} {M2 {-0.044 -0.010} {0.044 0.010} mask_one} } fc_shell> create_via -net n1 -via_def VIA12 \\ -origin {100.100 200.320} To assign mask constraints to the enclosure layers, use the -lower_mask_pattern and -upper_mask_pattern options.\n You can specify either uniform or alternating as the mask pattern.\n In either case, you specify the mask constraint for the first shape when you create a via with the create_via command.\n If you specify uniform, all shapes on the layer use the specified mask constraint.\n If you specify alternating, the colors alternate from shape to shape after the first shape.\n For example, fc_shell> create_via_def VIA12 \\ -shapes { {M1 {-0.010 -0.030} {0.027 0.050}} {M1 {0.047 -0.030} {0.084 0.050}} {VIA1 {0.000 0.000} {0.074 0.020}} {M2 {-0.030 0.000} {0.104 0.020}} } \\ -lower_mask_pattern uniform fc_shell> create_via -via_def VIA12 -origin {000.100 200.320} -lower_mask_constraint mask_two To report information about the via definitions, use the report_via_defs command.\n This command reports the shapes that comprise the via definition but does not report the upper and lower mask patterns."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Implementing a Regular Multisource Clock Tree"}, {"role": "assistant", "content": "To implement a regular multisource clock tree, use the following steps: 1.\n Specify your clock tree constraints and settings.\n 2.\n Perform the following steps for multivoltage designs: a.\n Enable multivoltage support by setting the cts.multisource.enable_full_mv_support application option to true b.\n Enable the addition of physical feedthrough cells, which belong to a voltage area physically but not logically, by setting the opt.common.allow_physical_feedthrough application option to true c.\n Run the check_mv_design command and fix all multivoltage issues.\n 3.\n Enable cell electromigration fixing by setting the cts.multisource.cell_em_aware application option to true 4.\n Insert the tap drivers by using the create_clock_drivers command, as described in Inserting Clock Drivers 5.\n Create the clock mesh by using the create_clock_straps command, as described in Creating Clock Straps 6.\n Insert the mesh drivers by using the create_clock_drivers command, as described in Inserting Clock Drivers 7.\n Build the global clock tree structure by using the synthesize_multisource_global_clock_trees command, as described in Synthesizing the Global Clock Trees 8.\n Route the connections between the clock mesh and the tap drivers by using the route_clock_straps command, as described in Routing to Clock Straps 9.\n Analyze the clock mesh by using the analyze_subcircuit command, as described in Analyzing the Clock Mesh 10.\n Specify options and settings for tap assignment as described in Specifying Tap Assignment Options and Settings 399 Implementing Multisource Clock Trees Feedback 11.\n Perform tap assignment by using the synthesize_multisource_clock_taps command, which Merges equivalent clock cells to remove any artificial boundaries between clusters of sinks Assigns endpoints to the closest tap driver and split cells along the path honoring any sink groups defined Copies the UPF and SDC constraints and the user-specified attributes onto the newly created cells across the active scenarios 12.\n Synthesize the entire clock tree, from the clock root, by using the following command: fc_shell> clock_opt -from build_clock -to route_clock During this step, the tool builds the local subtrees that are driven by the tap drivers.\n It also fixes DRC violations beyond ignore exceptions of the multisource clock tree, if applicable.\n You can also synthesize other clocks in the design that are not synthesized.\n For more information about the clock_opt command, see Synthesizing, Optimizing, and Routing Clock Trees With the clock_opt Command 13.\n Analyze the clock tree results as described in Analyzing the Clock Tree Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mapping of Synchronous Enable Logic to a MUX"}, {"role": "assistant", "content": "When the RTL contains synchronous enable logic, the compile_fusion command maps the enable logic to library cells with a synchronous enable pin.\n When the library cells with a synchronous enable pin are not available, the compile_fusion command maps the pushed-out synchronous logic to a MUX, as shown in this figure.\n 236 Controlling Mapping and Optimization Feedback To enable the mapping to MUXs, set the map_sync_enable_to_mux attribute on the SEQGEN cells before compile.\n For example, fc_shell> set_attribute \"A1/B/reg[30] mid/sub1/Q_reg[0]\" \\ -name map_sync_enable_to_mux -value true fc_shell> set_attribute \"mid3/apbif_reg/Q_reg[4]\" \\ -name map_sync_enable_to_mux -value true fc_shell> compile_fusion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Total-Power Optimization"}, {"role": "assistant", "content": "Total power optimization considers the combined leakage- and dynamic-power cost during optimization.\n To setup for total-power optimization, 1.\n Setup for leakage-power optimization by performing the following steps: a.\n Ensure that at least one scenario is enabled for leakage-power optimization by using the set_scenario_status -leakage_power true command.\n 2.\n Setup for dynamic-power optimization by performing the following steps: a.\n Annotate switching activity on the design, as described in Annotating the Switching Activity b.\n Ensure that at least one scenario is enabled for dynamic-power optimization by using the set_scenario_status -dynamic_power true command.\n When you use this setting, the tool performs total-power optimization during the clock_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Assigning Nets to a Routing Corridor"}, {"role": "assistant", "content": "To assign nets and supernets to a routing corridor, use the add_to_routing_corridor command.\n You must specify the routing corridor and the nets or supernets to add to it.\n You can assign a net or supernet to only one routing corridor and that routing corridor must cover all pins connected to the associated nets.\n In addition, the supernets must belong to the same block as the routing corridor.\n For example, to define a routing corridor named corridor_a and assign the nets named n1 and n2 to this routing corridor, use the following commands: fc_shell> create_routing_corridor -name corridor_a \\ -boundary { {10 10} {20 35} } \\ -min_layer_name M2 -max_layer_name M4 fc_shell> create_routing_corridor_shape -routing_corridor corridor_a \\ -boundary { {20 25} {40 35} } \\ -min_layer_name M2 -max_layer_name M4 fc_shell> create_routing_corridor_shape -routing_corridor corridor_a \\ -boundary { {40 10} {50 35} } \\ -min_layer_name M2 -max_layer_name M4 fc_shell> add_to_routing_corridor corridor_a [get_nets {n1 n2}] 492 Routing Constraints Feedback Note: You can also assign nets or supernets to the routing corridor by using the -object option when you use the create_routing_corridor command to create the routing corridor."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Aligning by the Left Edges"}, {"role": "assistant", "content": "By default, the Fusion Compiler tool aligns the leaf cells by aligning the left edges.\n To explicitly specify this alignment method, use the -alignment left option of the set_rp_group_options command.\n Figure 175 shows cells that are left aligned.\n Figure 175 Bottom-Left-Aligned Relative Placement Group U4 U3 U2 U1 row 3 row 2 row 1 row 0 col 0"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Deriving Clock Tree Exceptions From Ideal Clock Latencies"}, {"role": "assistant", "content": "If you have set ideal clock latencies for specific sinks in your design, you can use the derive_clock_balance_points command to convert these ideal latency settings to clock tree exceptions.\n The derive_clock_balance_points command converts ideal latencies specified with the set_clock_latency command on clock sink pins to set_clock_balance_points commands.\n Use the derive_clock_balance_points command before clock tree synthesis, when the design has ideal clocks.\n By default, the derive_clock_balance_points command Generates balance point constraints for all ideal primary clocks of all active scenarios that are enabled for setup analysis, hold analysis, or both.\n It does not generate balance points for generated clocks.\n To generate the balance points for Specific primary clocks, use the -clocks option.\n All active scenarios of specific corners, use the -corners option.\n Calculates a reference latency for each primary ideal clock, which is the sum of the ideal source and network latency specified on the clock with the set_clock_latency command.\n To specify a different reference latency value, use the -reference_latency option.\n Applies the derived clock balance point constraints to the design.\n To generate an output file containing set_clock_balance_points commands, instead applying it to the design, use the -output option.\n Balance points that the tool derives are clock and corner specific.\n Ensure that appropriate set_clock_latency constraints are set for all clocks for all modes used for clock tree synthesis in at least the worst corner.\n The tool uses the following formula to derive the delay values for the corresponding set_clock_balance_points commands: (Clock balance point delay value at the sink) = (Reference latency of the clock) - (Total ideal clock latency at the sink) The total ideal clock latency at the sink is the sum of the source latency of the clock and the ideal network latency for the sink.\n 351 Defining the Clock Trees Feedback For example, assume you have the following timing constraint settings: fc_shell> set_clock_latency -source 0.5 [get_clocks clk] fc_shell> set_clock_latency 1.0 [get_clocks clk] fc_shell> set_clock_latency 1.5 [get_pins reg1/CK] fc_shell> set_clock_latency 0.5 [get_pins reg2/CK] If you run the derive_clock_balance_points command, the tool derives the following clock balance point constraints: fc_shell> set_clock_balance_points -delay -0.5 \\ -balance_points [get_pins reg1/CK] -clock clk -corners worst fc_shell> set_clock_balance_points -delay 0.5 \\ -balance_points [get_pins reg2/CK] -clock clk -corners worst To avoid conflicts, do not manually apply any clock balance points for a clock that you derive balance points with the derive_clock_balance_points command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Deriving Mask Colors"}, {"role": "assistant", "content": "At advanced technology nodes, mask colors must be assigned to wires and vias to ensure correct processing of the net shapes during mask synthesis.\n The route_detail command and other routing commands in the tool usually add the necessary mask colors during routing.\n For net shapes that do not have a color assignment, use the derive_mask_constraint command to derive the color mask for the specified wires and vias from the nearest underlying tracks.\n In case of wide wires that occupy multiple tracks, the command takes the mask color opposite to the next unoccupied track.\n The following example derives the mask color for the net shapes of the net1 net.\n fc_shell> derive_mask_constraint \\ [get_shapes -of_objects [get_nets net1]] 578 Inserting and Removing Cut Metal Shapes Feedback Use options to the derive_mask_constraint command to control how the mask colors are derived.\n Derive cut mask constraints for the specified nets or vias.\n fc_shell> derive_mask_constraint -derive_cut_mask \\ [get_vias -within {{600 600} {700 700}}] Derive mask constraints from overlapping or touching pins or ports.\n fc_shell> derive_mask_constraint -follow_pin_mask \\ [get_shapes -of_objects [get_nets net1]] Derive the mask constraint from the wider overlapping or touching object rather than the wire track.\n fc_shell> derive_mask_constraint -follow_wider_object_mask \\ [get_shapes -of_objects [get_nets net1]] See Also Multiple-Patterning Concepts"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Starting the CLI"}, {"role": "assistant", "content": "The CLI interface is a text-only environment in which you enter commands at the command-line prompt.\n It is typically used for scripts, batch mode, and push-button operations.\n Before you start the command-line interface, ensure that the path to the bin directory is included in your $PATH variable.\n To start fc_shell, Enter the fc_shell command in a Linux shell.\n fc_shell You can include other options on the command line when you start the shell.\n For example, you can use -file script_file_name to execute a script -x command to execute a command -output_log_file file_name to create a log file of your session -help to display a list of the available options (without starting the shell) At startup, the tool : 1.\n Creates a command log file.\n 2.\n Reads and executes the setup files.\n 3.\n Executes any script files or commands specified by the -file and -x options, respectively, on the command line.\n 4.\n Displays the program header and fc_shell> prompt in the shell.\n See Also Using the Command Log File Using Setup Files Using Tcl Scripts 45 Entering fc_shell Commands Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling High-Effort Timing Mode"}, {"role": "assistant", "content": "In most cases, you can achieve better timing QoR by enabling high-effort timing mode for compile.\n To enable this mode, set the compile.flow.high_effort_timing application option to Running high-effort timing mode during compile can increase runtime because the tool performs multiple passes of placement and optimization to obtain optimal timing results."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Checkpoint Behaviors"}, {"role": "assistant", "content": "You can define two types of checkpoint behaviors: reports and actions.\n Define a checkpoint report to generate one or more reports supported by the tool or custom reports you create yourself.\n Define a checkpoint action to execute any kind of flow change before, 54 Adding Changes to a Script With Checkpoints Feedback after, or in place of the code block enwrapped by a checkpoint.\n For example, you might set an application option to a specific value before a particular checkpoint.\n Define these behaviors in your checkpoint.config.tcl file, which is automatically sourced by the checkpoint system.\n Defining Checkpoint Reports To define a checkpoint report, use the create_checkpoint_report command in your checkpoint.config.tcl file.\n Specify a unique name for the report and define the Tcl commands to generate the report.\n The following example defines a checkpoint report named timing, which writes the output of the report_qor and report_timing commands to disk: create_checkpoint_report timing { set name [get_current_checkpoint -name] set pos [get_current_checkpoint -position] report_qor -nosplit >./checkpoint/$name.$pos.qor.rpt report_qor -summary -nosplit >>./checkpoint/$name.$pos.qor.rpt report_timing -nosplit -max_paths 10 \\ >./checkpoint/$name.$pos.path.rpt Notice the use of the get_current_checkpoint command with the -name and -position options to give the generated reports a meaningful name.\n When these reports are generated, their names reflect the checkpoint that triggered them get_current_checkpoint -name ), as well as whether they were generated before or after the checkpoint ( get_current_checkpoint -position ).\n For example, if this checkpoint report is executed after a checkpoint named checkpoint_A, the generated reports are saved to the checkpoint directory, and the name of the QoR report is checkpoint_A.after.qor.rpt.\n The next example defines a checkpoint report named app_options, which writes all your non-default application options to disk: create_checkpoint_report app_options { set name [get_current_checkpoint -name] set pos [get_current_checkpoint -position] report_app_options -non_default \\ >./checkpoint/$name.$pos.app_options.rpt Defining Checkpoint Actions To define a checkpoint action, use the create_checkpoint_action command in your checkpoint.config.tcl file.\n Specify a unique name for the action and define the Tcl commands that constitute the action.\n 55 Adding Changes to a Script With Checkpoints Feedback The following example defines a checkpoint action named gropto, which enables global- route based buffering: create_checkpoint_action gropto { set_app_options -name place_opt.initial_drc.global_route_based \\ -value true The next example defines a checkpoint action named placer_high_effort_cong, which runs high-effort congestion reduction: create_checkpoint_action placer_high_effort_cong { set placer_command [get_current_checkpoint -script] set cong_option \"-congestion_effort high\" eval $placer_command $cong_option Notice the use of the get_current_checkpoint -script command and option, which retrieves the command originally enwrapped by the checkpoint and sets its congestion effort to high ( -congestion_effort high ).\n The -script option is typically used to define actions that replace the contents of a command.\n In this example, the action modifies the -congestion_effort option of the command that is enwrapped by the checkpoint associated with this action."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Synthesis"}, {"role": "assistant", "content": "By default, the clock_opt command does not consider voltage drop information when inserting clock buffers.\n Therefore, the tool might place clock buffers in locations with high PG resistance, which increases the voltage drop.\n To prevent this, you can use the 372 Implementing Clock Trees and Performing Post-CTS Optimization Feedback RedHawk Fusion feature to analyze the PG network and use this information with the clock_opt command, as shown in the following flow: 1.\n Use the RedHawk Fusion feature to analyze the PG network by using the analyze_rail -min_path_resistance command.\n 2.\n Load the RedHawk Fusion results by using the open_rail_result command.\n 3.\n Enable voltage-drop-aware clock tree synthesis by setting the clock_opt.flow.enable_voltage_drop_aware application option to true 4.\n Run the clock_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preventing Connections to Register QN Pins"}, {"role": "assistant", "content": "During sequential mapping, the tool can map registers to library cells that have both Q and QN pins, if doing so improves the QoR.\n However, you can prevent the tool from using the QN pin of such registers by setting the compile.seqmap.disable_qn_usage application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tool"}, {"role": "assistant", "content": "The Fusion Compiler tool provides a set of Tcl commands to run Custom Router in the Fusion Compiler environment.\n These commands define routing constraints for adding wires on one or more nets at the block level or adding differential pair routing, bus routing, shielding, and other routing features.\n A set of application options is also available for specifying the parameters for performing custom routing.\n For more information about how to define routing constraints and application options, see Defining Routing Constraints and Using Custom Routing Application Options The route_custom command uses the specified routing constraints, as well as information from the technology file and the design, to perform automatic routing using the Custom Router.\n For more information about using the route_custom command, see Routing With the Custom Router Custom Router supports the following constraints: Net shielding and differential pairs Matched length Variable width and space Pin width matching and tapering Custom Router supports the following Fusion Compiler nondefault routing rules: Routing layers and vias Routing width and spacing Routing grids Inter- and intra-group spacing Taper halo Routing blockage 747 Before Using Custom Router Feedback Routing corridors Shielding Figure 153 shows the basic Custom Router flow.\n Figure 153 Basic Custom Router Flow Define routing constraints Perform custom routing Block with routed power nets and unrouted clock trees Technology file with design rule definitions Perform postroute optimization Analyze routing results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing THO During route_opt or hyper_route_opt"}, {"role": "assistant", "content": "By performing THO at the end of the implementation flow, you have the best optimization potential because you optimize the complete design.\n The route_opt and hyper_route_opt commands perform postroute optimization on the top and blocks together.\n ECO routing after optimization is performed on all subblocks that are open for editing.\n 865 Transparent Hierarchy Optimization Feedback THO optimization is completely integrated with the route_opt and hyper_route_opt commands.\n Follow this example to use the hyper_route_opt or route_opt command on a single host: fc_shell> init_hier_optimization -flow post_route fc_shell> route_opt or hyper_route_opt fc_shell> commit_hier_optimization When using the route_opt command, it is possible to perform the ECO routing operations, which have to occur after each route_opt command in parallel, reducing overall runtime.\n You must set up the host options as shown in the Setting up Transparent Hierarchy Optimization section.\n The hier_route_eco command performs the ECO routing in the blocks as shown in the following example.\n fc_shell> init_hier_optimization -flow post_route -detached_hier_route_eco fc_shell> route_opt fc_shell> hier_route_eco fc_shell> commit_hier_optimization Note: When the hyper_route_opt command is used in this way, the tool ignores the setting and does not distribute the ECO routing.\n 866 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Previewing Repeater Groups"}, {"role": "assistant", "content": "Use the -preview option to preview repeater group locations before insertion.\n The repeaters are represented by annotation objects at the same locations where they are to be inserted, with the same width and height as a repeater lib cell, and with the group ID eco_preview_ id Note: Before previewing the repeater groups again, you must first remove the annotation objects using either the gui_remove_annotations or gui_remove_all_annotations command.\n 988 Querying Group Repeater Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using the DRC Query Commands"}, {"role": "assistant", "content": "You can get information about DRC violations by using the get_drc_errors command to create a collection of DRC violations and then using the get_attribute command to query the attributes of the errors.\n Some attributes that provide information about DRC errors are type_name bbox objects, and shape.\n Note that the availability of attribute values depends on the error type and the verification method used.\n For a list of all attributes associated with DRC errors, use the list_attributes -application -class drc_error command.\n Before you run the get_drc_errors command, you must load the error data files that you want to query.\n To determine the error data files attached to the current block, use the get_drc_error_data command.\n You must use the -all option to include both the opened and unopened error data files in the result.\n fc_shell> get_drc_error_data -all 577 Saving Route Information Feedback To load an error data file, use the open_drc_error_data command.\n fc_shell> open_drc_error_data zroute.err To determine the error data types included in the error data file, use the get_drc_error_types command.\n fc_shell> get_drc_error_types -error_data zroute.err By default, the get_drc_errors command creates a collection that contains all DRC violations contained in the specified error data file.\n Use the -filter option to restrict the returned errors.\n For example, to return only \"Diff net spacing\" errors, use the following command: fc_shell> get_drc_errors -error_data zroute.err \\ -filter {type_name == \"Diff net spacing\"} To get the nets associated with an error, use the get_attribute command.\n For example, fc_shell> get_attribute [get_drc_errors -error_data zroute.err 859] \\ objects {u0_1/n237}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Handling Inaccurate Constraints During Clock Tree Synthesis"}, {"role": "assistant", "content": "In the early stages of the implementation of a design, the constraints can be inaccurate or too restrictive.\n Running clock tree synthesis on such a design can lead to long runtime or poor clock tree QoR.\n You can run clock tree synthesis on such a design, but still get usable results in a reasonable runtime.\n To do so, set the following application variable before you begin clock tree synthesis: fc_shell> set_app_options \\ -name cts.common.enable_dirty_design_mode -value true When you use this application option setting, the tool Ignores dont_touch and dont_touch_network attribute settings on clock nets.\n Removes maximum transition and maximum capacitance constraints if they are too tight.\n Removes the maximum net length constraint if it is less than 50 microns.\n Ignores clock cell spacing rules if the horizontal spacing requirement is more than three times the site height and the vertical spacing requirement is more than twenty times the site height.\n Ignores nondefault routing rules if the width plus the spacing requirement of the routing rule is more than ten times the default width plus the default spacing.\n Reports balance point delay values that are large enough to cause an increase in clock insertion delay."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Via Ladder Association File"}, {"role": "assistant", "content": "The command generates a script file that defines the association between the library cell pins and the via ladder rules.\n This script file contains set_via_ladder_candidate commands for the library cell pins.\n By default, the generated script file is named auto_perf_via_ladder_association.tcl.\n To specify a different file name, use the -association_file option.\n 453 Inserting Via Ladders Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Changing the Block From Abstract to Design View"}, {"role": "assistant", "content": "To change a block from its abstract to its design view, use the change_abstract command and specify the view you are changing to by using the -view option.\n When you change a block from its abstract view to its design view, remove the existing constraints and apply full-chip timing constraints.\n The following example changes the BLK1 block from its abstract view to its design view and applies full-chip timing constraints.\n 1.\n Remove any existing timing constraints: fc_shell> remove_scenarios -all fc_shell> remove_modes -all fc_shell> remove_corners -all 839 Linking to Subblocks With Multiple Labels Feedback 2.\n Use the change_abstract command to change from the abstract view to the design view: fc_shell> change_abstract -view design -references BLK1 3.\n Apply the full-chip scenario creation script: fc_shell> source full_chip_scenario_creation.tcl If the abstract view for a block has changed in its design library, you can reload the new abstract view by using the change_abstract -reload command.\n To report the abstract views the design is linking to, use the report_abstracts command.\n More information about specifying reference libraries and linking to abstract views at the top level, see SolvNet article 2436119, Setting Up Designs for Hierarchical Place and Route"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing the Routing Results"}, {"role": "assistant", "content": "You can analyze the routing results by reporting on the cell placement and routing statistics.\n The following topics describe how to perform these tasks: Generating a Congestion Report Generating a Congestion Map Performing Design Rule Checking Using Zroute Performing Signoff Design Rule Checking Performing Design Rule Checking in an External Tool Performing Layout-Versus-Schematic Checking Reporting the Routing Results Reporting the Wire Length Using the DRC Query Commands"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Prechecks"}, {"role": "assistant", "content": "Fusion Compiler can perform compile prechecks to prevent compile failures and allow the compile_fusion command to quickly exit with error messages when incomplete (or inconsistent) setup or constraint issues are encountered.\n This capability is on by default, but these checks can also be enabled by the compile_fusion -check_only command.\n The compile_fusion command and the compile_fusion -check_only command perform the prechecks listed in the following table and issue error messages accordingly.\n A check mark (X) indicates the precheck is performed.\n Table 19 Prechecks Performed During the Compile Flow Code Message Default compile prechecks compile_fusion -check_only OPT-3000 Design is not linked or has link issues.\n OPT-3001 Cell is not resolved after linking.\n OPT-3002 Cell is physical hierarchy and not allowed in compile.\n OPT-3003 Cell is logical hierarchy and not allowed in compile.\n OPT-3005 Design is not present.\n OPT-3006 Current instance hierarchy is not the top.\n OPT-2001 Could not initialize scenario settings.\n OPT-2002 Missing parasitic information for corners or missing TLUPlus information.\n OPT-4000 Design does not have a floorplan or a valid floorplan.\n OPT-4001 Design does not have a valid die area.\n OPT-4002 Macro does not have placement.\n information.\n OPT-4004 Design port does not have placement information.\n OPT-4010 Pad connected to port does not have placement information.\n OPT-4008 Design has no site rows defined.\n OPT-4009 Design has no tracks defined.\n OPT-1008 Layer does not have a preferred direction.\n 215 Performing Unified Physical Synthesis Feedback Table 19 Prechecks Performed During the Compile Flow (Continued) Code Message Default compile prechecks compile_fusion -check_only OPT-1006 Library analysis failure - cannot find buffers and inverters.\n OPT-1007 Library analysis failure - No technology data.\n OPT-4012 Design has 1 duplicate.\n Run check_duplicates for more details.\n Compile Precheck Examples The following two examples show the compile logs with and without compile prechecks.\n When the -check_only option is set, the compile_fusion command issues error messages for any failed precheck condition.\n Example 14 Compile Log With Compile Prechecks  Begin compile flow  (FLW-3001) ->Compile in progress: 1.0% (FLW-3778) Error: Layer M1 does not have a preferred direction (OPT-1008)...\n Error: Layer MRDL does not have a preferred direction (OPT-1008)...\n Warning: Technology layer 'M1' setting 'routing-direction' is not valid (NEX-001)...\n Warning: Technology layer 'MRDL' setting 'routing-direction' is not valid (NEX-001) Example 15 Compile Log Without Compile Prechecks  End logic optimization  (FLW-3001) ->Compile in progress: 27.0% (FLW-3778) ->Compile in progress: 28.0% (FLW-3778) ->Compile in progress: 28.5% (FLW-3778) Information: Corner max_corner: no PVT mismatches.\n (PVT-032) Warning: Technology layer 'M1' setting 'routing-direction' is not valid (NEX-001)...\n Warning: Technology layer 'MRDL' setting 'routing-direction' is not valid (NEX-001) Information: Design Average RC for design top (NEX-011) 216 Controlling Mapping and Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mapping Combinational Multibit Cells"}, {"role": "assistant", "content": "Combinational multibit cells are library cells, where a single cell implements multiple logic functions.\n The Fusion Compiler tool: Banks single-bit combinational cells to multibit combinational cells.\n Debanks multibit combinational cells as needed to improve QoR.\n Figure 36 Combinational Multibit Library Cells To enable combinational multibit mapping during the initial_opto and final_opto stages, use the opt.common.enable_multibit_combinational_cells application option with the set_app_options command: fc_shell> set_app_options -name opt.common.enable_multibit_combinational_cells -value true 253 Performing Multibit Optimization Feedback Note: By default, the tool debanks the multibit combinational cells.\n Figure 37 Combinational Multibit Library Cell Flow To print the combinational multibit cells created for each library reference, use the -combinational option with the report_multibit command, as shown in the following example: fc_shell> report_multibit -combinational #Outputs Reference Number of instances Single-bit Equivalent 2 combo_mbit_lib_cell1 257 514 4 combo_mbit_lib_cell2 57 228 To check the compatible single-bit equivalent cell of combinational multibit library cells, use the -combinational option with the check_multibit_library command, as shown in the following example: fc_shell> check_multibit_library -combinational Combinational Compatibility Equivalent Singlebit Multibit LibCell LibCell combo_mbit_lib_cell1 Compatible combo_sbit_lib_cell1 Don't use Mismatch combo_sbit_lib_cell2 254 Running Concurrent Clock and Data Optimization Feedback combo_mbit_lib_cell2 PVT mismatch combo_sbit_lib_cell3"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Timing Constraints and Settings"}, {"role": "assistant", "content": "Timing constraints describe the timing requirements of a design.\n An essential part of timing constraints are accurately specified clocks and clock effects, such as latency and uncertainty.\n When you specify clocks, the tool automatically constrains the paths between the registers driven by these clocks.\n However, you can change the default behavior of these timing paths by specifying timing exceptions such as paths that should not be analyzed (false paths), paths that require multiple clock cycles (multicycle paths), and so on.\n In addition, you can constrain the boundary timing paths by specifying input and output delays for input and output ports.\n The Fusion Compiler tool uses on-chip variation (OCV) mode to perform timing analysis, which models the effects of variation in operating conditions across the chip.\n This mode performs a conservative timing analysis that allows both minimum and maximum delays to apply to different paths at the same time.\n For a setup check, it uses maximum delays for the launch clock path and data path and minimum delays for the capture clock path.\n For a hold check, it uses minimum delays for the launch clock path and data path and maximum delays for the capture clock path.\n A block might operate under several different conditions, such as different temperatures and voltages, and might operate in several different functional modes.\n For timing analysis, each set of conditions is represented by a corner and each functional mode is represented by a mode.\n A scenario is a combination of a corner and mode used to perform timing analysis and optimization.\n Before you start working with a block, you must define the modes, corners, and scenarios that are used for the block, as well as the delay calculation 133 Specifying Logical Design Rule Constraints Feedback model and routing layers to use.\n The routing layer information you specify is used for RC estimation during timing analysis.\n For detailed information about specifying Clock and clock effects, see the \"Defining Clocks\" topic in the Fusion Compiler Timing Analysis User Guide Exceptions for timing paths and constraints for boundary paths, see the \"Constraining Timing Paths\" topic in the Fusion Compiler Timing Analysis User Guide Modes, corners, and scenarios, see the \"Defining Modes, Corners, and Scenarios\" topic in the Fusion Compiler Timing Analysis User Guide Operating conditions and on-chip variation (OCV) related settings, see the \"Specifying Operating Conditions\" topic in the Fusion Compiler Timing Analysis User Guide Parasitic information for RC estimation and extraction, see the \"Performing Parasitic Extraction\" topic in the Fusion Compiler Timing Analysis User Guide Routing layers, see Specifying the Routing Resources"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Track Assignment"}, {"role": "assistant", "content": "Before you run track assignment, Define the common routing application options For information about the common routing application options, see the route.common_options man page.\n Define the global routing application options For information about the track assignment application options, see the route.track_options man page.\n Complete global routing To perform standalone track assignment, run the route_track command.\n 531 Routing Signal Nets Feedback The main task of track assignment is to assign routing tracks for each global route.\n During track assignment, Zroute performs the following tasks: Assigns tracks in horizontal partitions.\n Assigns tracks in vertical partitions.\n Reroutes overlapping wires.\n After track assignment finishes, all nets are routed but not very carefully.\n There are many violations, particularly where the routing connects to pins.\n Detail routing works to correct those violations.\n Note: Because track assignment replaces the global routes with actual metal shapes, the block no longer contains global routes after track assignment completes.\n By default, the route_track command is not timing-driven or crosstalk-driven.\n To enable timing-driven mode, set the route.track.timing_driven application option.\n To enable crosstalk-driven mode, set the route.track.crosstalk_driven and time.si_enable_analysis application options to true At the end of track assignment, Zroute reports a summary of the wire length and via count.\n Example 20 shows a track assignment report.\n Example 20 Track Assignment Report Wire length and via report: Number of M1 wires: 215327 : 0 Number of M2 wires: 1124740 VIA12SQ_C: 1067462...\n Total number of wires: 2508734 vias: 2769482 Total M1 wire length: 924480.9 Total M2 wire length: 4147032.0...\n Total wire length: 21281278.0 Longest M1 wire length: 1541.7 Longest M2 wire length: 926.0...\n 532 Routing Signal Nets Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Freeze Silicon ECO Flow"}, {"role": "assistant", "content": "Use this flow if your cell placement is fixed, and you can only change the metal and via mask patterns.\n This flow is recommended if you have taped out your design and you want to avoid the expense of generating a whole new mask set.\n To perform the freeze silicon ECO flow, your block must contain spare cells.\n You can add spare cells to a block, anytime during the design flow, by using one of the following methods: Manually instantiate spare cells, as described in Manually Instantiating Spare Cells Automatically add spare cells after placement by using the add_spare_cells command, as described in Automatically Adding Spare Cells Add programmable spare cells during the chip finishing stage by using the create_stdcell_fillers, as described in Adding Programmable Spare Cells The freeze silicon ECO flow consists of the following steps: 1.\n Enable ECO changes in the freeze silicon mode by setting the design.eco_freeze_silicon_mode application option to true 2.\n Update the design with the ECO changes by using one of the following methods: Using the eco_netlist command, as described in Making ECO Changes Using the eco_netlist Command Using netlist editing Tcl commands, as described in Making ECO Changes Using Netlist Editing Commands 3.\n Analyze the mapping of ECO cells to spare cells by using the check_freeze_silicon command.\n 4.\n Automatically map all the ECO changes to spare cells by using the place_freeze_silicon command or manually map each ECO cell to a specific spare cell by using the map_freeze_silicon command, as described in Placing and Mapping ECO Cells to Spare Cells 5.\n Update the routing by using the route_eco command, as described in Performing ECO Routing, or by manually rerouting the affected nets."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Diodes During Detail Routing"}, {"role": "assistant", "content": "One way to protect gates from antenna effects is to provide a discharge path for the accumulated charge to leave the net.\n However, the discharge path should not allow current to flow during normal chip operation.\n Discharging can be accomplished by inserting a reverse-biased diode on the net close to the gate that is being protected.\n To enable diode insertion during detail routing, set the route.detail.insert_diodes_during_routing application option to true To control diode insertion, set the following application options: To specify a preference for fixing antenna violations by using diode insertion rather than layer hopping, set the route.detail.antenna_fixing_preference application option to use_diodes To require fixing of antenna violations by using diode insertion, disable layer hopping by setting the route.detail.hop_layers_to_fix_antenna application option to false By default, when you enable diode insertion, Zroute can fix an antenna violation either by adding a new diode or by using an existing spare diode.\n Zroute determines which method to use, based on which is closest to the required location: an empty location for a new diode or an existing spare diode.\n To specify a preference for using a new diode or using an existing spare diode, set the route.detail.diode_preference application option to new or spare respectively.\n To reset the diode preference to the default behavior, set the route.detail.diode_preference application option to none If you want Zroute to use only one of these methods, set the route.detail.diode_insertion_mode application option to new to force the insertion of new diodes or to spare to force the use of existing spare diodes.\n To reset the diode insertion method to the default behavior, set the route.detail.diode_insertion_mode application option to new_and_spare Note: To take advantage of spare diodes for antenna violation fixing, you need to add the spare diodes either before or after standard-cell placement and before routing the areas where antenna violations might occur.\n When inserting new diodes, Zroute selects the diodes from the reference libraries and inserts them into existing open spaces.\n To control which diodes are used, set the route.detail.diode_libcell_names application option.\n When you specify the diode library cells, use only the cell names.\n If you include the library name, the tool does not recognize the diode cells.\n 619 Finding and Fixing Antenna Violations Feedback By default, Zroute reuses existing filler cell locations for diode insertion.\n To prevent Zroute from reusing these locations, set the route.detail.reuse_filler_locations_for_diodes application option to false Zroute considers voltage areas when inserting diode cells and also observes the logic hierarchy assignments for diode cells.\n If a pin has an antenna violation, the diode cells are inserted at the same level of logic hierarchy as the violating pin.\n If a top-level port has an antenna violation, by default, the diode cells are inserted at the top level.\n However, if the port belongs to a voltage area, you can insert the diode cells in the logic hierarchy associated with the voltage area by setting the route.detail.use_lower_hierarchy_for_port_diodes application option to true To remove the redundant diodes during routing, set the route.detail.delete_redundant_diodes_during_routing application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I User-Specified Clock-Gate Latency"}, {"role": "assistant", "content": "You cannot disable general integrated clock-gate latency estimation.\n However, you can disable the feature for specific clock gates by setting a dont_estimate_clock_latency attribute on their clock pins.\n This topic describes how to manually specify latency values on those clock gates.\n 305 Controlling Clock-Gate Latencies Feedback Specify the clock network latency by using either the set_clock_latency or set_clock_gate_latency command.\n The set_clock_gate_latency command can be used for both gate-level and RTL designs.\n The clock latency specified using the set_clock_gate_latency command is annotated on the registers during the compile_fusion command when the clock-gating cells are inserted.\n However, if you modify the latency values on the clock gates after the compilation, you must manually apply the latency values on the existing clock-gating cells using the apply_clock_gate_latency command.\n Note: After you modify the clock-gate latency using the set_clock_gate_latency command, if you compile your design using the compile_fusion command, it is not necessary to use the apply_clock_gate_latency command to apply the latency values.\n The tool annotates the specified value during compilation.\n To remove clock latency information previously set on clock-gating cells with the set_clock_gate_latency or apply_clock_gate_latency commands, use the reset_clock_gate_latency command.\n This command removes the clock latency values on the specified clocks.\n If you do not specify the clock, the clock latency values on all the clock-gating cells are removed.\n The set_clock_latency Command Use the set_clock_latency command to specify clock network latency for specific clock- gating cells.\n In Figure 55 lat_cgtoreg is the estimated delay from the clock pin of the clock-gating cell to the clock pin of the gated register and lat_reg is the estimated clock-network latency to the clock pins of the registers without clock gating.\n Figure 55 Clock Latency With Clock-Gating Design Clock- Gating Cell Register Clock tree delay Clock tree delay lat_reg lat_cgtoreg For all clock pins of registers (gated or ungated) in the design that are driven by a specific clock, use the lat_reg value for the set_clock_latency command.\n For clock pins of all the clock-gating cells, use the difference between the lat_reg and lat_cgtoreg 306 Controlling Clock-Gate Latencies Feedback values for the set_clock_latency command.\n Because the purpose of setting the latency values is to account for the different clock-network delays between the registers and the clock-gating cell, it is important to get a reasonably accurate value of the difference lat_cgtoreg ).\n The absolute values used are less important unless you are using these values to account for clock-network delay issues not related to clock gating.\n The set_clock_gate_latency Command When you use the compile_fusion command, clock gates are inserted during the compilation process.\n To specify the clock network latency before the clock-gating cells are inserted by the tool, use the set_clock_gate_latency command.\n This command lets you specify the clock network latency for the clock-gating cells as a function of the clock domain, clock-gating stage, and the fanout of the clock-gating cell.\n The latency that you specify is annotated on the clock-gating cells when they are inserted by the compile_fusion command.\n You can manually annotate the latency values on the existing clock-gating cells in your design using the apply_clock_gate_latency command.\n The set_clock_gate_latency command takes the following arguments: -clock clock_list -stage clock_gate_stage -fanout_latency fanout_list The fanout_list is a list of tuples specifying a fanout range and a delay decrement.\n In the following example, three fanout ranges are created: 1 to 5 with a latency value of 0.5, 6-15 with a latency value of 0.8, and 16 to infinity with a latency value of 0.6.\n set_clock_gate_latency -stage 1 \\ -fanout_latency {{1-5 0.5} {6-15 0.8} {16-inf 0.6}} To specify a clock latency value for clock-gated registers, use the -stage option with a value of 0.\n Because you are specifying the latency value for the clock-gated registers, the value for the -fanout_latency option should be 1-inf (1 to infinity) and the latency is the absolute clock latency value for the registers, as shown in the following example: set_clock_gate_latency -clock CLK -stage 0\\ -fanout_latency {1-inf 1.0} If the -clock option is not specified, the setting applies to all clocks in the design.\n Clock latencies using the set_clock_latency command have higher precedence and are not overwritten.\n Figure 56 shows an example of clock-gate stages and fanout.\n 307 Controlling Clock-Gate Latencies Feedback Figure 56 Clock-Gating Stages and Latency Calculations The following commands set the latency values for Figure 56 set_clock_gate_latency -stage 0 -fanout_latency {{1-inf 1.0}} set_clock_gate_latency -stage 1 -fanout_latency {{1-inf 0.3}} set_clock_gate_latency -stage 2 -fanout_latency {{1-inf 0.2}} set_clock_gate_latency -stage 3 -fanout_latency {{1-inf 0.1}} Figure 57 shows another example of fanout and latency calculations.\n 308 Controlling the Number of Clock-Gate Levels Feedback Figure 57 Latency Calculations With Varying Fanout The following commands specify the latency and fanout for Figure 57 set_clock_gate_latency -stage 0 \\ -fanout_latency {{1-inf 1.6}} set_clock_gate_latency -stage 1 \\ -fanout_latency {{1-20 0.6} {21-inf 0.8}} set_clock_gate_latency -stage 2 \\ -fanout_latency {{1-20 0.2} {21-inf 0.3}} set_clock_gate_latency -stage 3 \\ -fanout_latency {{1-30 0.1} {31-65 0.8} {66-inf 0.18}} set_clock_latency \"0.4\" {uicg_a/CK} Note that for the clock gate uicg_a, the latency value of 0.4 is assigned using the set_clock_latency command, which cannot be overwritten."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up for Voltage-Drop-Aware Placement"}, {"role": "assistant", "content": "To set up for voltage-drop-aware placement, perform the following steps: 1.\n Specify the voltage-drop-analysis type by using the rail.analysis_type application option.\n The valid values are static dynamic (default), dynamic_vcd, and dynamic_vectorless 2.\n Specify settings required to perform RedHawk voltage drop analysis, as described in Performing Voltage Drop Analysis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers at Specified Locations"}, {"role": "assistant", "content": "To add buffers at specific locations of a net, specify A list of one or more library cells to select from by using the -lib_cell option The exact locations by using the -location option With the -location option, you must specify the x- and y-coordinates and a layer with an existing routing shape at that location by using the {x1 y1 layer1....} format.\n Instead of specifying the routing layer, you can have the tool automatically detect the closest routing shape to that location by using the -detect_layer option.\n With this method, you can add cells only on one net at a time.\n The following example adds the BUF1 library cell on the net1 net at location (100, 200) and connects it to an existing route shape on the M4 layer.\n fc_shell> add_buffer_on_route net1 -lib_cell BUF1 \\ -location {100 200 M4} 965 Adding Buffers on Routed Nets Feedback By default, the tool uses eco_cell and eco_net as the name prefix of all new cells and nets.\n To specify a name prefix for the new cells and nets, use the -cell_prefix and -net_prefix options, respectively."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Global Via Ladder Constraints"}, {"role": "assistant", "content": "To define global via ladder constraints, which are referred to as via ladder rules, use the set_via_ladder_rules command to set via ladder constraints on library cell pins.\n You must specify the mapping between library cell pins and via ladder templates, as well as the pins to which to apply the mapping.\n Use the following options to specify the mapping: -master_pin_map or -master_pin_map_file These options specify the mappings for specific library pins using the following format: { { lib_cell pin via_ladder_list }}...} 455 Inserting Via Ladders Feedback To specify the mapping on the command line, use the -master_pin_map option.\n To specify the mapping in an external file, use the -master_pin_map_file option to specify the mapping file name.\n -default_ladders This option specifies the via ladder templates to use for all library pins not explicitly specified in the mapping.\n Use the following options to specify the pins to which to apply the mapping: -all_instances_of This option explicitly specifies library cell pins to which to apply the mapping.\n -all_clock_outputs Set this option to true to apply the mapping to all clock output pins.\n -all_clock_inputs Set this option to true to apply the mapping to all clock input pins.\n -all_pins_driving This option applies the mapping to all pins that drive one of the specified ports.\n To report the via ladder rules, use the report_via_ladder_rules command.\n To remove via ladder rules, use the remove_via_ladder_rules command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Global Routing"}, {"role": "assistant", "content": "Before you run global routing, Define the common routing application options For information about the common routing application options, see the route.common_options man page.\n Define the global routing application options For information about the global routing application options, see the route.global_options man page.\n To perform standalone global routing, use the route_global command.\n By default, global routing is not timing-driven.\n For information about enabling timing-driven global routing, see Timing-Driven Global Routing The global router divides a block into global routing cells.\n By default, the width of a global routing cell is the same as the height of a standard cell and is aligned with the standard cell rows.\n For each global routing cell, the routing capacity is calculated according to the blockages, pins, and routing tracks inside the cell.\n Although the nets are not assigned to the actual wire tracks during global routing, the number of nets assigned to each global routing cell is noted.\n The tool calculates the demand for wire tracks in each global routing cell and reports the overflows, which are the number of wire tracks that are still needed after the tool assigns nets to the available wire tracks in a global routing cell.\n For advanced node designs, via density can be a concern.\n To enable via density modeling, set the route.global.via_cut_modeling application option to true.\n The tool then calculates the number of vias in each global routing cell and reports via overflows.\n Global routing is done in two phases: The initial routing phase (phase 0), in which the tool routes the unconnected nets and calculates the overflow for each global routing cell The rerouting phases, in which the tool tries to reduce congestion by ripping up and rerouting nets around global routing cells with overflows The tool might perform several rerouting phases.\n At the end of each rerouting phase, the tool recalculates the overflows.\n You should see a reduction in the total number of global routing cells with overflow and in the total overflow numbers.\n The global router stops and exits from the rerouting phase when the congestion is solved or cannot be solved further or after the maximum number of phases has occurred, as defined by the -effort_level option.\n You can force the global router to perform the maximum number of phases based on the specified effort level by setting the route.global.force_full_effort application option to true.\n By default, the tool 526 Routing Signal Nets Feedback uses medium effort and performs a maximum of three rerouting phases.\n You can perform up to six rerouting phases by specifying ultra effort.\n There are five global routing effort levels: minimum low medium high, and ultra Minimum ( -effort_level minimum The minimum effort level uses two times larger global routing cells relative to the other effort levels.\n It also has a much lower congestion cost and runs only one rerouting phase.\n It should only be used for prototype routing or for an initial congestion evaluation, not for detail routing.\n Low ( -effort_level low Low effort runs a maximum of two rerouting phases with very similar congestion cost.\n It is faster in comparison to medium effort and has reasonable QoR.\n If your block is not very congested, you can use the low effort level.\n Medium ( -effort_level medium Medium effort is the default effort level and runs a maximum of three rerouting phases.\n Global routing stops after the third phase or when the overflow is resolved, whichever occurs first.\n High ( -effort_level high High effort runs up to four rerouting phases.\n If your block is congested, use the high effort level.\n Ultra ( -effort_level ultra Ultra effort runs up to six rerouting phases.\n If your block is very congested, use the ultra effort level.\n At the end of global routing, the following information is stored in the design library: The g-links and g-vias on each routed net This information is used for the next routing steps.\n After Zroute performs track assignment and detail routing, it removes these g-links and g-vias from the design library.\n The congestion data This information is used to generate a congestion map.\n By default, only the hard congestion data is saved in the design library.\n To also save the soft congestion data, set the route.global.export_soft_congestion_maps application option to true before performing global routing.\n The soft congestion data includes demand from soft nondefault spacing rules, as well as tool-generated soft rules.\n 527 Routing Signal Nets Feedback The global router reports block statistics and congestion data after the initial routing phase and after each rerouting phase.\n When global routing is complete, the global router reports a summary of the wire length and via count.\n Example 19 shows a global routing report.\n In the congestion report, the Overflow value is the total number of wires in the block that do not have a corresponding track available.\n The Max value corresponds to the highest number of overutilized wires in a single global routing cell.\n The GRCs value is the total number of overcongested global routing cells in the block.\n Example 19 Global Routing Report Start Global Route...\n...\n Design statistics: Design Bounding Box (0.00,0.00,3180.00,1154.00) Number of routing layers = 10 layer M1, dir Hor, min width = 0.05, min space = 0.05 pitch = 0.15 layer M2, dir Ver, min width = 0.06, min space = 0.06 pitch = 0.15...\n Net statistics: Total number of nets = 255165 Number of nets to route = 248716 Number of single or zero port nets = 1721 4728 nets are fully connected, of which 4728 are detail routed and 0 are global routed.\n 1648 nets have non-default rule clock_spacing...\n phase3.\n Routing result: phase3.\n Both Dirs: Overflow = 3320 Max = 3 GRCs = 4405 (0.08%) phase3.\n H routing: Overflow = 1759 Max = 2 (GRCs = 1) GRCs = 2756 (0.10%) phase3.\n V routing: Overflow = 1560 Max = 3 (GRCs = 20) GRCs = 1649 (0.06%) phase3.\n M1 Overflow = 1475 Max = 2 (GRCs = 1) GRCs = 2426 (0.09%) phase3.\n M2 Overflow = 1265 Max = 3 (GRCs = 20) GRCs = 1343 (0.05%)...\n Overflow over macro areas phase3.\n Both Dirs: Overflow = 293 Max = 2 GRCs = 300 (0.04%) phase3.\n H routing: Overflow = 133 Max = 1 (GRCs = 129) GRCs = 139 (0.03%) phase3.\n V routing: Overflow = 160 Max = 2 (GRCs = 2) GRCs = 161 (0.04%) phase3.\n M1 Overflow = 0 Max = 0 (GRCs = 0) GRCs = 0 (0.00%) phase3.\n M2 Overflow = 0 Max = 0 (GRCs = 0) GRCs = 0 (0.00%)...\n Density distribution: Layer 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 > 1.2 M1 86.6 10.5 0.37 1.46 0.02 0.44 0.18 0.14 0.07 0.03 0.10 0.00 0.00 0.02 M2 68.2 14.4 7.71 4.54 2.07 1.55 0.66 0.28 0.13 0.03 0.33 0.00 0.00 0.02...\n phase3.\n Total Wire Length = 21154552.81 phase3.\n Layer M1 wire length = 947324.93 phase3.\n Layer M2 wire length = 3959478.25...\n phase3.\n Total Number of Contacts = 2530044 phase3.\n Via VIA12SQ_C count = 1050582 phase3.\n Via VIA23SQ_C count = 856311...\n phase3.\n completed.\n 528 Routing Signal Nets Feedback Before proceeding to detail routing, display the congestion map in the GUI and check the overflow distribution.\n The congestion report and map help you to identify congested areas.\n For more information about the congestion report, see Generating a Congestion Report For more information about the congestion map, see Generating a Congestion Map"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Disabling Design Rule Checking (DRC)"}, {"role": "assistant", "content": "You can disable design rule checking (DRC) on clock, constant, scan enable, and scan clock nets by using the set_auto_disable_drc_nets command.\n To control design rule checking on specific nets in the current design, use the options with the set_auto_disable_drc_nets command as shown in Table 14 Table 14 Options for the set_auto_disable_drc_nets Command Use this option To do this -none Enable DRC for all nets.\n -all Disable DRC on all clock, constant, scan enable, and scan clock nets.\n -constant true | false Disable (set to true ) or enable (set to false ) DRC on constant nets.\n -on_clock_network true | false Disable (set to true ) or enable (set to false ) DRC on clock networks.\n -scan true | false Disable (set to true ) or enable (set to false ) DRC on scan enable and scan clock nets.\n For example, to enable design rule checking for all clock, constant, scan enable, and scan clock nets, specify the -none option: fc_shell> set_auto_disable_drc_nets -none To disable design rule checking on nets connecting to clocks and constants, set the -on_clock_network and -constant options to true, as shown in the following example and figure: fc_shell> set_auto_disable_drc_nets \\ -on_clock_network true -constant true 173 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback Figure 25 DRC Disabled Clock and Constant Nets Highlighted clkA clkB clkC clksel clkD in logic 1 const_sel clkE DRC disabled clock net DRC disabled constant net"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Floating Logical Supply Nets"}, {"role": "assistant", "content": "A floating logical supply net is a power or ground net that is not connected to any logical pin or port in the block.\n For example, a power feedthrough net created during power planning is a floating supply net.\n To create a floating supply net with the connect_pg_net command, use the following steps: 1.\n Specify the supply net type in the UPF file by using the supply_net_pg_type attribute, as shown in the following UPF file example: create_supply_net VDD set_design_attributes -elements VDD \\ -attribute supply_net_pg_type power 2.\n Enable floating supply nets by setting the mv.pg.create_floating_pg application option to true before you create supply nets with the connect_pg_net command, as shown in the following script example: # Apply the UPF load_upf $upf_input_file_name commit_upf # create logical supply nets set_app_options -as_user_default \\ -name mv.pg.create_floating_pg -value true connect_pg_net -automatic check_mv_design The tool creates the logical supply nets in the topmost hierarchy of the current UPF scope for domain-independent supply nets.\n For domain-dependent supply nets, the tool creates the logical supply nets in the topmost hierarchy of the domain.\n The tool does not create a logical supply net in the following situations: There is a conflict between the connection and the supply net type specified with the supply_net_pg_type attribute.\n The supply net is connected to a PG pin of an instance.\n The connect_pg_net command is not specified in the current or parent physical hierarchy.\n 119 Setting Up Multivoltage Designs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Routing Guides to Control the Routing Direction"}, {"role": "assistant", "content": "You can use a routing guide to control the routing direction within the routing guide boundary, either by requiring routes to be in the preferred direction within the routing guide boundary or by switching the preferred direction within the routing guide boundary.\n To force the router to route all nets in the preferred direction within the routing guide boundary, use the -preferred_direction_only option with the create_routing_guide command.\n You can use this type of routing guide to prevent wrong-way jog wires on specific layers.\n By default, this routing guide applies to all layers within the routing guide boundary.\n To require preferred direction routing only for specific layers, use the -layers option to specify the affected layers.\n 475 Routing Constraints Feedback For example, to force the router to use only the preferred direction on the M4 layer within the rectangle with its lower-left corner at (0, 0) and its upper-right corner at (100, 100), use the following command: fc_shell> create_routing_guide -boundary {{0.0 0.0} {100.0 100.0}} \\ -layers {M4} -preferred_direction_only To switch the preferred routing direction within the routing guide boundary, use the -switch_preferred_direction option with the create_routing_guide command.\n You can use this type of routing guide to allow routing over macros, which might reduce congestion for a block that contains much detour routing.\n By default, this routing guide applies to all layers within the routing guide boundary.\n To switch the preferred routing direction only for specific layers, use the -layers option to specify the affected layers.\n For example, to switch the preferred routing direction for the M1 and M2 layers within the rectangle with its lower-left corner at (0, 0) and its upper-right corner at (100, 100), use the following command: fc_shell> create_routing_guide -boundary {{0.0 0.0} {100.0 100.0}} \\ -layers {M1 M2} -switch_preferred_direction Note: If a switch-preferred-direction routing guide overlaps with a preferred- direction-only routing guide, the switch-preferred-direction routing guide takes precedence."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Matching Wire Lengths"}, {"role": "assistant", "content": "To define a group of nets or pin-to-pin connections that must have the same wire length, use the create_wire_matching command.\n By matching wire lengths, you can minimize clock skews and timing violations.\n Two types of length-matching methods are available: Pin-based: Wire lengths between pins must match.\n Figure 157 and Figure 158 show examples of pin-based wire length matching.\n In both examples, all the receivers have a matched length constraint from driver D.\n Net-based: Total length of wires of specified nets must match.\n Figure 159 shows an example of net-based wire length matching.\n In the example, the total wire length of nets pr1 and pr2 are within the specified 10-um tolerance.\n Figure 157 Receivers With Matched Wire Length From Driver D 758 Defining Routing Constraints Feedback Figure 158 Receivers With Matched Wire Length From Driver D' Figure 159 Net-Based Wire Length Matching Syntax: fc_shell> create_wire_matching -for objects -tolerance float -match_type type -exclude objects -relative -driver pin or port -force intent_name Command or Options Description create_wire_matching Creates a length-matching constraint.\n -for Name of the driver pin or port ( Figure 157 and Figure 158 ), or net group ( Figure 159 ) that must comply with the constraint.\n -tolerance Length tolerance.\n The float value must be >= 0.\n To specify the tolerance as a percentage, use the -relative option.\n -relative (Optional) Interprets a -tolerance value <=1 as a percentage.\n The option must always be used with the -tolerance option.\n 759 Defining Routing Constraints Feedback Command or Options Description -match_type (Optional) Type of length matching.\n Valid values are: length : (Default) Compares the length of each object in the constraint group to make sure they have the same total length.\n length_per_layer : Compares the per-layer length.\n -exclude (Optional) Excludes the specified pins or ports from the length matching constraint.\n -driver (Optional) Name of the driver pin or port.\n -force (Optional) Overwrites the existing constraint.\n Use the option to delete existing constraint groups.\n intent_name (Optional) Name of the constraint.\n If you do not specify a name, the command assigns a name.\n By default, the command returns an error if the assigned name already exists.\n To delete an existing constraint, use the -force option.\n After routing, a matched-length summary report is generated.\n You can use the report to troubleshoot and resolve the lengths that do not meet the set tolerance.\n The content of the report depends on the -for option that you specified: If the -for option specifies pin-based length matching, a Length Constraint Report is generated.\n See Figure 160 If the -for option specifies net-based length matching, a Routed Length report is generated.\n See Figure 161 Figure 160 Pin-Based Length Matching Report 760 Defining Routing Constraints Feedback Figure 161 Net-Based Length Matching Report In Example 34, the commands create wire matching constraints for the scenario shown in Figure 157.\n All receivers (R) have a matched length constraint from the balanced driver (D).\n Example 34 Wire Matching Constraints for All Receivers to Driver D fc_shell> create_wire_matching -for [get_nets -physical_context $net] \\ -relative -tolerance 0.01 -driver [get_pins -physical_context D/o1] fc_shell> create_wire_matching -for [get_pins \\ -physical_context {R1/a R2/a R3/a}] -tolerance 0.01 -relative In Example 35, the commands create wire matching constraints for the example in Figure 158 Example 35 Wire Matching Constraints for Receivers Connected to Driver D' fc_shell> create_wire_matching -for [get_nets -physical_context $net] \\ -tolerance 0.01 -relative -driver $driver_full_name fc_shell> create_wire_matching \\ -for [get_pins -physical_context -of_objects $net] \\ -exclude $driver_full_name -tolerance 0.01 -relative In Example 36, the command creates a constraint group named abc for the nets and bundles that match the pattern pr*.\n An absolute tolerance of 10 um is set to match the length of each object in the constraint group.\n See Figure 159 Example 36 Wire Matching Constraints for pr* Nets fc_shell> create_wire_matching abc \\ -for [get_nets -physical_context pr*] \\ -tolerance 10 {abc} In Example 37, the command creates a constraint group named def for the nets and bundles that match the pattern pr*.\n A tolerance of 10 percent is set to match the length of each object in the constraint group.\n 761 Defining Routing Constraints Feedback Example 37 Wire Matching Constraints for pr* Nets With Percent Tolerance fc_shell> create_wire_matching def \\ -for [get_nets -physical_context pr*] \\ -tolerance 0.10 -relative {def} In Example 38, the command creates a wire matching constraint named clk_match for the clk net.\n Each of the endpoints that connect to the clk net has an individual matching constraint.\n Example 38 Wire Matching Constraints for the clk Net fc_shell> create_wire_matching -for [get_pins -physical_context \\ -of_objects [get_nets -physical_context {clk}]] \\ -tolerance 0.01 -match_type length_per_layer -relative \\ -force clk_match In Example 39, the command creates a wire matching constraint named clk_match2 for all the nets in the block, except the pins whose names match the keyword u1/a.\n Example 39 Wire Matching Constraints With Exclusions fc_shell> create_wire_matching -for $nets -tolerance 0.05 \\ -exclude [get_pins -physical_context u1/a] -force clk_match2 In Example 40, the script creates a net-based wire matching constraint for the scenario shown in Figure 162.\n The cell instance has an o1 terminal that servers as an inverter pin, driving signals on net1 and net1p to the pins.\n The I2 and I3 pins are excluded from the length matching constraint.\n Example 40 Net-Based Wire Matching Constraints With Pin Exclusions # set nets to match length set nets [get_nets -physical_context {net1 net1p}] # set allowed layers set_routing_rule -min_routing_layer m7 -max_routing_layer m8 \\ -min_layer_mode allow_pin_connection -max_layer_mode hard $nets # setup Custom Router wire match constraint set exclude_pin_names [get_pins -physical_context {i2/a i3/a}] create_wire_matching -for $nets -tolerance 0.01 -relative \\ -exclude $exclude_pin_names # run Custom Router route_custom -nets $nets 762 Managing Constraint Groups Feedback Figure 162 Net-Based Wire Matching Constraints With Pin Exclusions"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Verifying the Boundary Cell Placement"}, {"role": "assistant", "content": "After inserting the boundary cells with the compile_boundary_cells command, verify the placement by using the check_boundary_cells command.\n To create an error data file to view the errors in the error browser, use the -error_view option.\n For information about using the error browser, see the Fusion Compiler Graphical User Interface User Guide This command checks the boundary cell placement for the following issues: Missing boundary or corner cells This check verifies that there are boundary and corner cells around the entire boundary, with no gaps.\n Figure 124 shows a valid placement, as well as errors caused by missing cells.\n 599 Finding and Fixing Antenna Violations Feedback Figure 124 Check for Missing Boundary or Corner Cells Note: For established nodes, boundary cells are inserted only on the left and right sides.\n In this case, the command verifies only that there are no gaps on these sides.\n Incorrect boundary or corner cells This check verifies that the library cells used for the boundary and corner cells match the cells specified by the set_boundary_cell_rules command.\n Incorrect orientation of boundary cells This check verifies that the orientation of each boundary cell matches the allowed orientations specified by the set_boundary_cell_rules command.\n Short rows and edges This check verifies that each row of boundary cells is wider than the value specified by the set_boundary_cell_rules -min_row_width option and that the horizontal edges of each blockage are greater than the value specified by the set_boundary_cell_rules -min_horizontal_jog option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Report Clock Gating Options"}, {"role": "assistant", "content": "The report_clock_gating_options command reports the clock gating settings used for the current design.\n The command output includes a table that reports minimum bitwidth and maximum fanout for each relevant object.\n A parameter to print options set up only for certain objects is also available.\n The available parameters for the command are as follows: No split: By default, long names are split in multiple lines for easier human reading.\n Enabling this option makes names print in a single line.\n Objects: A list of hierarchical objects to query.\n Ignores the rest of the objects in the design, and displays an error for each non-hierarchical cell passed with CGT-2500 and CGT-2501 warning messages.\n 299 Setting Up Clock Gating Feedback The output of the report_clock_gating_options command is shown in Figure 50 Figure 50 Output of the report_clock_gating_options Command When no gating options have been set, or when the design has been set only with specific options, the table displays the assigned options in a single row, alongside any other objects that might have been passed through the -objects parameter.\n Figure 51 shows the report_clock_gating_options command output when no options are set to specific objects.\n Figure 51 Command Output With no Options set to Specific Objects Figure 52 shows the report_clock_gating_options command output when no options are set to specific objects, but both the design and b0 have been passed as parameters for objects.\n 300 Clock Gating Flows Feedback Figure 52 Command Output With no Specific Object Options but Passed as Parameters When multiple objects are set using the same options, they appear in a single row, with the name column being divided into multiple lines if the -nosplit parameter is not used.\n Otherwise, everything occupies a single line.\n report_clock_gating_options -objects {design, obj1, obj2, obj3, obj4} Figure 53 Command Output With the Same Option set to Multiple Objects Figure 54 shows the same scenario as Figure 53, but with the -nosplit parameter: report_clock_gating_options -objects {design, obj1, obj2, obj3, obj4} -nosplit Figure 54"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Applying the Multivoltage Power Intent"}, {"role": "assistant", "content": "To learn about applying the multivoltage power intent, see Loading and Applying UPF Information Using Incomplete UPF Information Specifying UPF Constraints for Physical-Only Cells Saving UPF Information"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reserving Space for Top-Level Routing"}, {"role": "assistant", "content": "To reserve space for top-level routing, create a corridor routing blockage by using the -reserve_for_top_level_routing option when you create the routing blockage.\n During block-level implementation, a corridor routing blockage acts as a regular blockage to prevent routing in the blockage area.\n During frame view extraction, the tool removes the corridor routing blockage to allow top-level routing in this area."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing the Default Via Mapping Table"}, {"role": "assistant", "content": "By default, Zroute reads the default contact codes from the technology file and generates an optimized via mapping table.\n To see the default mapping table, use the add_redundant_vias -list_only true command.\n In most cases you achieve better results if you use a customized mapping table rather than the default mapping table.\n For information about defining a customized mapping table, see Defining a Customized Via Mapping Table If you have not previously defined a customized mapping table for the block, you can see the default mapping table by using the add_redundant_vias -list_only true command.\n Note: After you have created a customized mapping table by using the method described in Defining a Customized Via Mapping Table, this command shows the customized mapping table.\n 623 Inserting Redundant Vias Feedback Example 27 shows an example of a default via mapping table.\n Example 27 Default Via Mapping Table fc_shell> add_redundant_vias -list_only...\n Redundant via optimization will attempt to replace the following vias: VIA12SQ_C -> VIA12SQ_C_2x1 VIA12SQ_C_2x1(r) VIA12SQ_C_1x2 VIA12SQ_ C_1x2(r) VIA12SQ_C(r) -> VIA12SQ_C_2x1 VIA12SQ_C_2x1(r) VIA12SQ_C_1x2 VIA12SQ_ C_1x2(r)...\n VIA89(r) -> VIA89_C_1x2(r) VIA89_1x2(r) VIA89_1x2 VIA89_C_1x2 VIA89_C_2x1(r) VIA89_2x1(r) VIA89_2x1 VIA89_C_2x1 VIA9RDL -> VIA9RDL_2x1 VIA9RDL_1x2 624 Inserting Redundant Vias Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Global Layer Constraints"}, {"role": "assistant", "content": "To report the ignored layers, use the report_ignored_layers command.\n For example, fc_shell> report_ignored_layers **************************************** Report : Ignored Layers Design : my_design Version: J-2014.12 Date : Wed Oct 22 15:58:23 2014 **************************************** Layer Attribute Value Min Routing Layer M2 Max Routing Layer M7 RC Estimation Ignored Layers PO M1 M2 M8 M9 MRDL 200 Specifying the Routing Resources Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up Clock Gating"}, {"role": "assistant", "content": "The clock gating feature only supports latch-based integrated clock-gating cells.\n Tool- inserted clock-gating cells do not have a wrapper hierarchy.\n 293 Setting Up Clock Gating Feedback Clock-gating optimization uses the following defaults: The maximum fanout is infinite.\n The minimum bitwidth is three.\n A latch-based precontrol cell for both positive-edge and negative-edge triggered flip- flops is used as a clock-gating cell.\n If only positive-edge or negative-edge clock-gating cells are available, the tool inserts inverters on both sides of the clock-gating cell.\n You must load a design and libraries before you can set up clock-gating constraints.\n To set up clock gating, follow these steps: 1.\n Load the design and libraries 2.\n Set the style by using the set_clock_gate_style command 3.\n Set the options by using the set_clock_gating_options command 4.\n Specify objects to be included or excluded from clock gating by using the set_clock_gating_objects command 5.\n Allow other clock-gating cell types for optimization by using the following command: fc_shell> set_lib_cell_purpose -include cts [get_lib_cells...] For more information, see the following topics: Setting the Clock-Gating Style Setting Clock-Gating Options Enabling or Disabling Clock Gating on Design Objects Clock-Gating Enable Source Selection User-Driven Enable Exclusion Report Clock Gating Options"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Pin-Trunk Offset"}, {"role": "assistant", "content": "The custom.route.bus_pin_trunk_offset application option changes the default spacing between the bus trunk and the bus bit pins."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Benefits of Relative Placement"}, {"role": "assistant", "content": "Along with being technology-independent and having the ability to improve routability, relative placement provides the following benefits: Reduces the placement search space in critical areas of the design, which improves the predictability of QoR (wire length, timing, power, area) and congestion.\n Maintains relative placement during placement, optimization, clock tree synthesis, and routing.\n Provides a method for maintaining structured placement for legacy or intellectual property (IP) designs.\n 782 Relative Placement Flow Feedback Handles flat and hierarchical designs.\n Allows sizing of relative placement cells while maintaining relative placement."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing Multibit Components in the GUI"}, {"role": "assistant", "content": "Fusion Compiler uses the WordView infrastructure to map multibit components.\n To view multibit components in the GUI, you must complete the following requirements: Ensure the library contains multibit components in.ndm format.\n Enable multibit component mapping by setting the compile.flow.enable_multibit application option as follows: fc_shell> set_app_options -name compile.flow.enable_multibit \\ -value true Follow these steps to view multibit components in WordView: 1.\n Read the RTL by using the analyze and elaborate commands.\n 2.\n Run the compile_fusion -to initial_opto command.\n The tool maps the bused registers to multibit components during compile.\n 3.\n (Optional) Check the multibit component mapping information by using the report_cells command.\n For example, The RTL contains the reg_state bused register.\n 252 Performing Multibit Optimization Feedback module top (...); output [2:0] reg_state; always @(posedge clk) reg_state <= next_reg_state; endmodule The report shows that the reg_state bus register is mapped to the MB_DFF multibit component.\n fc_shell> report_cells [get_cells *reg_state_reg* -hierarchical]...\n Cell Reference Library Attributes reg_state_reg[2:0] MB_DFF my_mb_lib n"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Isolation Cells"}, {"role": "assistant", "content": "Isolation cells are used to selectively shut off the input side of the voltage interface of a power domain; they do not shift the voltage.\n Isolation cells should be instantiated at the RTL level to prevent formal verification errors.\n However, you can also insert them using the Fusion Compiler tool.\n To insert isolation cells in the current block, use the create_mv_cells command.\n The tool inserts the isolation shifters using the cell mapping and strategy defined in the UPF specification.\n When the tool inserts an isolation cell, it sets a atributesize_onlysize_only atribute size_only attribute on the level shifter and a atributesdont_touchdont_touch atribute dont_touch attribute on the port-to-level-shifter net.\n By default, the command inserts cells only from the generic library.\n If you use the -mapped option with the create_mv_cells command, the command inserts cells only from the user-provided logic library and issues an error message if a suitable cell is not available.\n 131 Setting Up Multivoltage Designs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Allowing Repeater Groups Over Macros"}, {"role": "assistant", "content": "Use the -allow_insertion_over_block option to allow repeater groups to be added on top of soft or hard macros.\n Note: If the repeater cell is an inverter, you are responsible for ensuring logical correctness.\n 986 Adding a Group of Repeaters Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Placement Attractions"}, {"role": "assistant", "content": "A placement attraction is a constraint that you can use to specify that a large group of cells be placed together in the same vicinity of the placement area.\n It is a soft constraint that the tool considers during initial placement.\n However, it has less effect during subsequent incremental placement stages.\n To specify a more restrictive placement constraint for a smaller group of cells, create a move bound or group bound by using the create_bound command.\n To define a placement attraction, use the create_placement_attraction command.\n For example, to specify that the cells from the subblocks named add1 and mult1 be placed in the same vicinity, use the following command: fc_shell> set add1_cells [get_flat_cells add1/*] fc_shell> set mult1_cells [get_flat_cells mult1/*] fc_shell> create_placement_attraction -name add1_mult1 \\ \"$add1_cells $mult1_cells\" You can use the -region option to specify A region in which to place the cells To do so, specify the lower-left and upper-right coordinates of the region, as shown in the following example: fc_shell> set U1_cells [get_flat_cells U1/*] fc_shell> create_placement_attraction -name U1 \\ -region {{0 0} {2000 1500}} $U1_cells A straight line along which to place the cells, such as an edge of a macro cell To do so, specify the coordinates of the two ends of the line, as shown in the following example: fc_shell> set U2_cells [get_flat_cells U2/*] fc_shell> create_placement_attraction -name U2 \\ -region {{1000 200} {1000 800}} $U2_cells 149 Specifying Physical Constraints for Placement and Legalization Feedback A location around which to place the cells, such as a port location To do so, specify the coordinates of the location, as shown in the following example: fc_shell> set U3_cells [get_flat_cells U3/*] fc_shell> create_placement_attraction -name U3 \\ -region {{0 700}} $U3_cells The following table shows additional commands available for changing, reporting, and removing placement attractions.\n For more information, see the command man pages.\n Table 9 Commands Related to Placement Attractions To do this Use this command Define a placement attraction create_placement_attraction Add cells to an existing placement attraction add_to_placement_attraction Remove cells from an existing placement attraction remove_from_placement_attraction Report placement attractions report_placement_attractions Find existing placement attractions get_placement_attractions Remove existing placement attractions remove_placement_attractions See Also Defining Move Bounds"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Placement Density"}, {"role": "assistant", "content": "You can control the placement density of a block as described in the following table.\n Table 10 Application Options for Controlling Placement Density To do this Use this application option Specify a maximum density that controls how densely the tool can place cells during non-congestion-driven placement place.coarse.auto_density_control (Default is -enhanced, and the tool follows a preset schedule during the flow if place.coarse.auto_density_control is not set to false.\n Disabling place.coarse.auto_density_control or manually setting place.coarse.max_density to causes uniform spreading of the cells in the core area) Specify a maximum utilization that controls how densely the tool can place cells in less congested areas that surround highly congested areas, so that the cells in the congested areas can be spread out to reduce the congestion place.coarse.congestion_driven_max_util (Default is 0.93 When specifying the maximum density or maximum utilization, choose a value between 1 and the overall utilization of the block.\n For example, if the utilization of a block is 40 percent, you can choose values between 1 and 0.4, as shown in the following example: fc_shell> set_app_options -name place.coarse.max_density -value 0.6 fc_shell> set_app_options \\ -name place.coarse.congestion_driven_max_util -value 0.8 If you do not specify a value for the maximum density or maximum utilization, the tool automatically derives a value for the maximum density and maximum utilization based on the stage of the design flow, considering the place.coarse.auto_density_control application option is not set to false By default, the place.coarse_auto_density_control application option is enabled and set to enhanced.\n This improves the total power and wire length for the design.\n Note: It is not necessary to disable the place.coarse.auto_density_control application option to override the max_density and congestion_driven_max_util values.\n User settings always take precedence over the tool derived values.\n Throughout placement, the tool prints PLACE-027 information messages indicating the values it uses for these settings.\n 155 Specifying Placement Settings Feedback Information: Automatic density control has selected the following settings: max_density 0.60, congestion_driven_max_util 0.77.\n (PLACE-027) The tool applies the maximum density and congestion-driven maximum utilization settings independently to each placeable area such as a voltage area or exclusive move bound, rather than taking an average over the entire block."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Overview of Abstract Views"}, {"role": "assistant", "content": "In an abstract view, the gate-level netlist for the block is modeled by a partial gate- level netlist that contains only the required interface logic of the block.\n All other logic is removed.\n Figure 191 shows a block and its abstract view, where the logic is preserved between The input port and the first register of each timing path The last register of each timing path and the output port 831 Overview of Abstract Views Feedback Logic associated with pure combinational input-port-to-output-port timing paths (A to X) is also preserved.\n Clock connections to the preserved registers are kept as well.\n The register-to-register logic is discarded.\n Figure 191 A Block and Its Abstract View CLK Block CLK Abstract View The interface logic of an abstract view consists of the following: All cells, pins, and nets in timing paths from input ports to registers or output ports All cells, pins, and nets in timing paths to output ports from registers or input ports Any logic in the connection from a master clock to generated clocks The clock trees that drive interface registers, including any logic in the clock tree The longest and shortest clock paths from the clock ports All pins with timing constraints that are part of the interface logic In addition to the interface logic, an abstract view contains the following information associated with the interface logic: Placement information Timing constraints Clock tree exceptions Parasitic information Transition and case values of dangling pins Power management cells and UPF constraints Nondefault routing rule association and minimum and maximum layer constraints, if any, for the nets that are retained in the abstract view 832 Creating Abstract Views Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Activity-Based Optimization"}, {"role": "assistant", "content": "If you load a SAIF file, the Fusion Compiler tool analyzes the switching activity to evaluate whether to expand a tool-inserted clock gate.\n This analysis prevents the insertion of unnecessary clock gates.\n For example, in Figure 58, clock gates A1 and A2 are each common to two paths and are therefore candidates for multilevel expansion.\n Figure 58 Before Clock-Gate Level Expansion 312 Merging Clock Gates Feedback However, if clock gate A2 is always enabled, it has a toggle rate of 0 and a static probability of 1.\n Adding another clock-gate level does not provide any benefit in this case.\n The final configuration is shown in Figure 59 Figure 59 After Clock-Gate Level Expansion If clock-gate level expansion is enabled, the Fusion Compiler tool performs activity- driven analysis by default.\n If a SAIF file is not available, disable this feature by setting the compile.clockgate.enable_activity_drivel_level_expansion application option to false (the default is true ).\n If clock-gate level expansion is disabled, the tool ignores the compile.clockgate.enable_activity_driven_level_expansion application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Concurrent Clock and Data Optimization"}, {"role": "assistant", "content": "Changing clock latencies can balance the slack in successive timing path stages to optimize clock and data paths.\n This capability is called concurrent clock and data (CCD) optimization, which can reduce total negative slacks (TNS), worst negative slacks (WNS), area, and leakage power.\n In addition, it can improve correlation between physical synthesis and place-and-route."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Physical Synthesis Design Flow Overview"}, {"role": "assistant", "content": "Figure 1 shows the basic physical synthesis design flow.\n 33 Formal Verification Feedback Figure 1 Fusion Compiler Physical Synthesis Flow RTL/ netlist Design (NDM) Ref.\n lib (NDM) Tech.\n data TLU+ files UPF files DEF/Tcl (Optional) SDC files (Optional) Set up the libraries Read RTL files Handle design mismatches and black boxes Apply multivoltage power intent Apply timing and physical constraints Set up clock-gating cells Set up DFT and insert DFT structures Insert multivoltage cells Compile the design Analyze and report QoR Export the design SDC files Design (NDM) Verilog UPF files DEF/ SCANDEF"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Swapping Variant Cell"}, {"role": "assistant", "content": "The add_group_repeater and place_group_repeater commands support variant cell in group repeater insertion and placement.\n 991 Swapping Variant Cell Feedback The following topics describe the steps in this flow Setting Constraints of Variant Cell Setting Application Option Grouping Variant Cell Running and Placing Group Repeaters Troubleshooting"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Tapering Method"}, {"role": "assistant", "content": "You specify the tapering method for a nondefault routing rule when you define the rule with the create_routing_rule command.\n By default, Zroute uses distance-based pin tapering; it uses the default routing rule within the tapering distance from the pin and uses the nondefault routing rule beyond the tapering distance.\n However, advanced process nodes are very sensitive to jogs and fat metal, and sometimes the tapering distance is not sufficient to fix the routing DRC violations on nets with nondefault routing rules.\n In these cases, you can use layer-based tapering, which targets DRC violations on nets with nondefault routing rules.\n Note: Distance-based tapering and layer-based tapering are mutually exclusive.\n If you define a routing rule that uses both a distance-based tapering option and a layer-based tapering option, the tool uses the layer-based tapering settings and ignores the distance-based tapering settings.\n When Zroute performs distance-based pin tapering, it Determines the tapering distance, which is about 10 times the mean number of tracks for all routing layers.\n To explicitly specify the tapering distance, use the -taper_distance option when you create a nondefault routing rule with the create_routing_rule command.\n Uses the same tapering distance for all pins.\n To specify a different tapering distance for driver pins, use the -driver_taper_distance option when you create a nondefault routing rule with the create_routing_rule command.\n To perform layer-based pin tapering, use the -taper_over_pin_layers or -taper_under_pin_layers option when you create a nondefault routing rule with the create_routing_rule command.\n To specify a different layer-based tapering distance for driver pins, use the -driver_taper_over_pin_layers or -driver_taper_under_pin_layers option.\n For pins on the M1 or M2 layers, use the -taper_over_pin_layers option (or the -driver_taper_over_pin_layers option for driver pins) to specify the number of layers on or above the pin layer available for tapering.\n A value of 1 enables pin tapering only on the pin layer; a larger value enables pin tapering on additional layers above the pin layer.\n For pins on upper layers, use the -taper_under_pin_layers option (or the -driver_taper_under_pin_layers option for driver pins)to specify the number of layers on or below the pin layer available for tapering.\n A value of 1 enables pin tapering only on the pin layer; a larger value enables pin tapering on additional layers below the pin layer.\n 517 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Rail Analysis Script Files"}, {"role": "assistant", "content": "You can run the analyze_rail -script_only command to generate the settings required for running rail analysis based on the information in the design library without actually executing the analysis run.\n The analyze_rail -script_only command writes data to the working directory.\n The output files that are saved to the directory are Table 67 Output data when running analyze_rail -script_only File Name Description RedHawk RedHawk-SC RedHawk GSR file Contains configuration settings for running RedHawk Fusion rail analysis Yes No LEF/DEF, SPEF, and STA files Generated if you do not specify these input files before running the analyze_rail command Yes Yes RedHawk Fusion run script file (analyze_rail.tcl) Includes the commands that are required for running rail analysis Yes No RedHawk-SC Fusion run script file (analyze_rail.py) Includes the python commands that are required for running rail analysis No Yes 880 Preparing Design and Input Data for Rail Analysis Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I H-Tree-Only Global Clock Tree Structure"}, {"role": "assistant", "content": "The following figure shows a regular multisource clock where the global clock structure does not have a clock mesh.\n The global clock structure consists only of an H-tree, which directly drives the tap drivers.\n Figure 85 Regular Multisource Clock Tree With an H-Tree-Only Global Clock Structure To implement a regular multisource clock tree structure with an H-tree-only global clock tree structure, 1.\n Specify your clock tree constraints and settings.\n 2.\n Perform the following steps for multivoltage designs: a.\n Enable multivoltage support by setting the cts.multisource.enable_full_mv_support application option to true b.\n Enable the addition of physical feedthrough cells, which belong to a voltage area physically but not logically, by setting the opt.common.allow_physical_feedthrough application option to true c.\n Run the check_mv_design command and fix all multivoltage issues.\n 3.\n Enable cell electromigration fixing by setting the cts.multisource.cell_em_aware application option to true 4.\n Specify the required settings by using the set_regular_multisource_clock_tree_options command and 402 Implementing Multisource Clock Trees Feedback perform tap insertion and global clock tree (H-tree) synthesis by using the synthesize_regular_multisource_clock_trees command, as described in Performing Automated Tap Insertion and H-Tree Synthesis 5.\n Specify options and settings for tap assignment, as described in Specifying Tap Assignment Options and Settings 6.\n Perform tap assignment by using the synthesize_multisource_clock_taps command, which Merges equivalent clock cells to remove any artificial boundaries between clusters of sinks Assigns endpoints to the closest tap driver and splits cells along the path honoring any sink groups defined Copies the UPF and SDC constraints and the user-specified attributes onto the newly created cells across the active scenarios 7.\n Synthesize the entire clock tree, from the clock root, by using the following command: fc_shell> clock_opt -from build_clock -to route_clock During this step, the tool builds the local subtrees that are driven by the tap drivers.\n It also fixes DRC violations beyond ignore exceptions of the multisource clock tree, if applicable.\n You can also synthesize other clocks in the design that are not synthesized.\n For more information about the clock_opt command, see Synthesizing, Optimizing, and Routing Clock Trees With the clock_opt Command 8.\n Analyze the clock tree results, as described in Analyzing the Clock Tree Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting and Removing Cut Metal Shapes"}, {"role": "assistant", "content": "Cut metal shapes are used in double-patterning designs to reduce the line-end minimum spacing.\n A cut metal layer and the dimensions of the cut metal shapes inserted on that layer are defined in a Layer section in the technology file.\n The width of the cut metal shapes is defined by the cutMetalWidth attribute.\n The height of the cut metal shapes is defined by either the cutMetalHeight or cutMetalExtension attribute.\n A cut metal layer corresponds to the metal layer with the same mask number.\n For example, cutMetal1 corresponds to metal1.\n For information about the technology file, see the Synopsys Technology File and Routing Rules Reference Manual After the routing is finalized, you add cut metal shapes by using the create_cut_metals command.\n This command inserts a cut metal shape between metal shapes when all of the following conditions are met: The spacing between the metal shapes in the preferred direction is cutMetalWidth There is no existing cut metal shape in the location.\n The metal shapes are on a metal layer that corresponds to a cut metal layer defined in the technology file.\n The command inserts cut metal shapes between net shapes, a net shape and a PG shape, a PG shape and an obstruction, and metal shapes within a child cell.\n After inserting 579 Inserting and Removing Cut Metal Shapes Feedback the cut metal shapes, the command propagates the color of the metal shapes to the cut metal shapes.\n When you write a DEF file for a block with cut metal shapes, you must use the -version 5.8 option with the write_def command.\n When you write a GDSII or OASIS file for a block with cut metal shapes, you must use the -connect_below_cut_metal option with the write_gds or write_oasis command.\n If the routing changes after inserting cut metal shapes, you must remove the existing cut metal shapes and reinsert them.\n To remove all cut metal shapes from a block, use the remove_cut_metals command.\n 580 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Congestion-Driven Restructuring During Placement"}, {"role": "assistant", "content": "By default, the tool restructures nets to reduce congestion during The create_placement command, except when you use the -timing_driven option The initial_place stage of the compile_fusion command You can control the congestion-driven restructuring as follows: Specify an effort level by setting the place.coarse.cong_restruct_effort application option to low medium (default), high, or ultra Prevent the tool from increasing the path depth by more than three levels of logic by setting the place.coarse.cong_restruct_depth_aware application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock Gating Flows"}, {"role": "assistant", "content": "The Fusion Compiler tool inserts clock-gating cells during the compile_fusion command.\n The following topics describe clock-gating flows: Inserting Clock Gates in Multivoltage Designs Inserting Clock Gates in an RTL Design 301 Clock Gating Flows Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing PG Electromigration Analysis"}, {"role": "assistant", "content": "Note: PG electromigration analysis is supported in both RedHawk Fusion and RedHawk-SC Fusion analysis flows.\n To analyze the current density on PG nets and identify the segments with potential electromigration issues, run the analyze_rail -electromigration command.\n The analysis results are saved in the working directory.\n To perform electromigration analysis, 1.\n Set the rail.tech_file application option to specify the Apache technology file (*.tech) that defines the layer-by-layer current density limits.\n For example, fc_shell> set_app_options -name rail.tech_file \\ -value design_data/tech/test.tech 903 Performing PG Electromigration Analysis Feedback 2.\n Run the analyze_rail command with the following options: Use the -voltage_drop and -electromigration options to enable electromigration analysis.\n Use the -nets option to specify the power and ground supply nets to analyze.\n The tool considers all the switched or internal power nets of the specified power nets in the analysis.\n You do not need to explicitly specify the internal power nets.\n (Optional) By default, the analyze_rail command automatically generates a GSR file for running RedHawk rail analysis.\n To specify an external GSR file to append to the GSR file generated in the current run, use the -extra_gsr_option_file option.\n (Optional) To specify an existing RedHawk script file that was generated in an earlier analyze_rail run, use the -redhawk_script_file option.\n When using an existing script file for rail analysis, the tool honors the settings in this script file and ignores all other currently enabled options.\n For example, if you run the analyze_rail -voltage_drop static -redhawk_script_file myscript.tcl command, the tool ignores the -voltage_drop option.\n When the -redhawk_script_file option is not specified, you must specify the nets to analyze by using the -nets option.\n 3.\n Check the analysis results, as described in Viewing PG Electromigration Analysis Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Placement Bounds"}, {"role": "assistant", "content": "To remove placement bounds from a block, use the remove_placement_blockage comandcomandsremove_placement_blockage remove_bounds command.\n To remove all placement bounds from a block, use the -all option.\n To remove specific placement bounds from a block, specify the placement bound names."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Nondefault Routing Rules"}, {"role": "assistant", "content": "To define a nondefault routing rule, use the create_routing_rule command.\n When you define a nondefault routing rule, you must specify a name for the nondefault routing rule.\n You use the name to assign the nondefault routing rule to nets or clocks.\n The following topics describe how to create nondefault routing rules for various purposes: Defining Minimum Wire Width Rules Defining Minimum Wire Spacing Rules Defining Minimum Via Spacing Rules Specifying Nondefault Vias Specifying Mask Constraints Defining Shielding Rules Reporting Nondefault Routing Rule Definitions Removing Nondefault Routing Rules Modifying Nondefault Routing Rules You can create a single routing rule that serves multiple purposes.\n In addition, you can assign multiple nondefault routing rules to a net.\n Defining Minimum Wire Width Rules You can define nondefault minimum wire width rules that are stricter than the minimum width rules defined in the technology file.\n Nondefault minimum width rules are hard constraints, which must be met during routing.\n Note: If you specify a nondefault width that violates the signalRouteMaxWidth setting in the technology file, the tool ignores the nondefault width.\n 495 Routing Constraints Feedback The minimum width defined in a nondefault routing rule applies to all metal segments, including via enclosures.\n To avoid DRC violations, ensure that the enclosures for nondefault vias meet the minimum width rule.\n To define a minimum wire width rule, use the create_routing_rule command.\n You can specify the minimum width by specifying a multiplier that is applied to the default width for each layer, by specifying the minimum width in microns for each layer, or both.\n To use a multiplier to specify the minimum width, use the following syntax: create_routing_rule rule_name [-default_reference_rule | -reference_rule_name ref_rule -multiplier_width multiplier The multiplier value must be between 0.001 and 2000.\n The default width for each layer is determined from the reference rule, which is either the default routing rule or the reference rule specified in the -reference_rule_name option.\n For example, to define a nondefault routing rule named new_width_rule that uses the default routing rule as the reference rule and defines the nondefault width as two times the default width, use the following command: fc_shell> create_routing_rule new_width_rule -multiplier_width 2.0 To specify the minimum width values for each layer, use the following syntax: create_routing_rule rule_name [-default_reference_rule | -reference_rule_name ref_rule -widths { layer width layer width layer width Specify the routing layers by using the layer names from the technology file.\n You can specify a single width value per layer.\n Zroute uses the wire width from the reference rule, which is either the default routing rule or the reference rule specified in the -reference_rule_name option, for any layers not specified in the -widths option.\n For example, to define a nondefault routing rule named new_width_rule2 that uses the default routing rule as the reference rule and defines nondefault width rules for the M1 and M4 layers, use the following command: fc_shell> create_routing_rule new_width_rule2 \\ -widths {M1 0.8 M4 0.9} If you specify both with -multiplier_width option and the -widths option, the tool uses the -widths option to determine the base width, and then applies the multiplier to that value to determine the minimum width requirement.\n For example, to define a nondefault routing rule named new_width_rule3 that uses the default routing rule as the reference rule and defines the nondefault width as 0.8 for the 496 Routing Constraints Feedback M1 layer, 0.9 for the M4 layer, and two times the default width for all other layers, use the following command: fc_shell> create_routing_rule new_width_rule3 \\ -multiplier_width 2.0 -widths {M1 0.4 M4 0.45} Defining Minimum Wire Spacing Rules You can define nondefault minimum wire spacing rules that are stricter than the rules defined in the technology file.\n Nondefault wire spacing rules can be defined as hard constraints, which must be met, or as soft constraints, which Zroute tries to meet.\n Note: The spacing rules defined in the technology file are always considered hard constraints.\n By default, Zroute checks the nondefault spacing rules between signal nets and other signal nets, PG nets, and blockages, but not between shapes of the same signal net or between signal nets and shield wires for PG nets.\n For information about modifying these checks, see Configuring Nondefault Spacing Checks To define a minimum wire spacing rule, use the create_routing_rule command.\n You can specify the minimum spacing by specifying a multiplier that is applied to the default spacing for each layer, by specifying the minimum spacings in microns for each layer, or both.\n To use a multiplier to specify the minimum spacing, use the following syntax: create_routing_rule rule_name [-default_reference_rule | -reference_rule_name ref_rule -multiplier_spacing multiplier The multiplier value must be between 0.001 and 2000.\n The default wire spacing for each layer is determined from the reference rule, which is either the default routing rule or the reference rule specified in the -reference_rule_name option.\n For example, to define a nondefault routing rule named new_spacing_rule that uses the default routing rule as the reference rule and defines the nondefault spacing as two times the default spacing, use the following command: fc_shell> create_routing_rule new_spacing_rule \\ -multiplier_spacing 2.0 To specify the minimum spacing values for each layer, use the following syntax: create_routing_rule rule_name -spacings { layer spacing 11 spacing 12...\n spacing 1n layer spacing 21 spacing 22...\n spacing 2n...\n layer spacing n1 spacing n2...spacing nn } } -spacing_weight_levels { layer weight 11 weight 12...\n weight 1n 497 Routing Constraints Feedback layer weight 21 weight 22...\n weight 2n...\n layer weight n1 weight n2...\n weight nn } } Specify the routing layers by using the layer names from the technology file.\n You can define multiple spacing values per layer.\n Zroute uses the spacing values from the reference rule, which is either the default routing rule or the reference rule specified in the -reference_rule_name option, for any layers not specified in the -spacings option.\n If you specify more than one spacing value per layer, you must assign a weight to each spacing value by using the -spacing_weight_levels option.\n The valid weight values are low medium high, and hard.\n When you assign a weight level other than hard, the spacing rule is a soft spacing rule.\n By default, Zroute does not fix soft routing rule violations.\n To fix soft routing rules, you must map the weight levels to routing effort levels, as described in Specifying the Routing Effort for Soft Spacing Violations For example, to define a nondefault routing rule named new_spacing_rule2 that uses the default routing rule as the reference rule and defines nondefault spacing rules for the M1 and M4 layers, use the following command: fc_shell> create_routing_rule new_spacing_rule2 \\ -spacings { M1 {0.12 0.24} M4 {0.14 0.28} } \\ -spacing_weight_levels { M1 {hard medium} M4 {hard medium} } If you specify both with -multiplier_spacing option and the -spacings option, the tool uses the -spacings option to determine the base spacing, and then applies the multiplier to that value to determine the minimum wire spacing requirement.\n To limit spacing to one side of the net, use the -single_side_spacing option with the create_routing_rule command.\n For example, the following command creates single-side spacing rules on the M2, M3, and M4 metal layers METAL2, METAL3, and METAL4: fc_shell> create_routing_rule new_spacing_rule3 \\ -spacings {M2 1.300 M3 1.400 M4 1.500 } \\ -single_side_spacing \\ -widths {M1 0.230 M2 0.280 M3 0.280 M4 0.280 M5 0.280 M6 0.440} 498 Routing Constraints Feedback Configuring Nondefault Spacing Checks You can configure the checking of nondefault spacing rules by enabling or disabling checks between signal nets and other objects.\n In addition, you can ignore violations of nondefault spacing rules for short parallel distances.\n To honor nondefault spacing rules between shapes of the same signal net, set the route.detail.var_spacing_to_same_net application option to true To honor nondefault spacing rules between signal nets and shield wires for PG nets For all signal nets, set the route.common.ignore_var_spacing_to_shield application option to false For specific signal nets, use the -ignore_"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling High-Fanout-Net Synthesis"}, {"role": "assistant", "content": "The tool performs high-fanout-net synthesis during the initial_drc stage of the compile-fusion command.\n To use globally routed nets to determine the topology for the buffers inserted during high-fanout synthesis, set the compile.initial_drc.global_route_based application option to true.\n After high- fanout synthesis, which is performed during the DRC fixing stage of the compile_fusion command, the global routes are deleted.\n Global-route-based buffering benefits designs with high congestion in routing channels such as the channels between banks of macros.\n This feature increases the runtime of the compile_fusion command.\n Therefore, you should enable it only for designs with highly congested routing channels."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Metal Fill With IC Validator In-Design"}, {"role": "assistant", "content": "After routing, you can fill the empty spaces in the block with fill shapes to meet the metal density rules required by most fabrication processes.\n Before inserting metal and via fill, the block should be close to meeting timing and have only a very few or no DRC violations.\n To insert metal fill, 1.\n Set up the IC Validator environment as described in Setting Up the IC Validator Environment 2.\n (Optional) Enable distributed processing by using the set_host_options command, as described in Enabling IC Validator Multicore Processing 3.\n Set the application options for metal fill insertion.\n For information about the metal fill insertion options, see Setting Options for Signoff Metal Fill Insertion 4.\n Save the block to disk.\n When you run the signoff_create_metal_fill command, the IC Validator tool uses the on-disk information for the block, not the information in memory.\n To ensure accurate information, use the save_block command to save the current state of the block before running the signoff_create_metal_fill command.\n 5.\n Perform metal fill insertion by using the signoff_create_metal_fill command as described in Performing Metal Fill Insertion The signoff_create_metal_fill command respects routing blockages defined by the create_routing_blockage command and does not insert metal fill in the blockages; however, it does not respect routing guides created by the create_routing_guide command.\n Note: If you are performing pattern-based metal fill insertion and the blockage layer numbers differ between the technology file and the foundry runset file, you must provide a layer mapping file, as described in Defining the Layer Mapping for IC Validator In-Design Commands When the IC Validator tool performs metal fill insertion, it creates an internal subdesign named block.FILL in the design view of the block and inserts the fill cells in this internal 707 Inserting Metal Fill With IC Validator In-Design Feedback subdesign.\n The fill cells are named FILL_INST_#.\n To query the fill cells, use the get_fill_cells command.\n For information about the result files generated by the signoff_create_metal_fill command, see Signoff Metal Fill Result Files After you insert metal fill, you can Display the added metal fill in the layout view in the GUI, as described in Viewing Metal Fill in the GUI Modify the metal fill, as described in Modifying Metal Fill Perform extraction for timing analysis using the real metal fill, as described in Performing Real Metal Fill Extraction"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Minimum Wire Lengths"}, {"role": "assistant", "content": "To define different minimum wire lengths for each object in a group of nets or pin-to- pin connections, use the create_length_limit command.\n Use this feature to perform length-limit routing on the nets with a single driver and multiple receivers, and run point-to- point routing between the drivers, steiners, and receivers.\n The Custom Router generates the steiner nodes in the background when the create_length_limit command is 755 Defining Routing Constraints Feedback executed.\n Each of the receivers has either a matched length constraint or an independent length constraint from the driver.\n Figure 154 shows an example of a single driver with multiple receivers, where each receiver has an individual length constraint.\n Figure 154 Receivers With Individual Wire Length Constraints From Driver D Syntax: fc_shell> create_length_limit - for objects -min_value float -exclude pins or ports -driver pin or port -force intent_name Command or Options Description create_length_limit Creates a length-limit constraint.\n -for Name of the driver pin or port, or net group that must comply with the constraint.\n -min_value (Optional) Minimum wire length.\n Default: 0 -exclude (Optional) Excludes the specified pins or ports from the length matching constraint.\n -driver (Optional) Name of the driver pin or port.\n -force (Optional) Overwrites the existing constraint.\n Use the option to delete existing constraint groups.\n intent_name (Optional) Name of the constraint.\n If you do not specify a name, the command assigns a name.\n By default, the command returns an error if the assigned name already exists.\n To delete an existing constraint, use the -force option.\n 756 Defining Routing Constraints Feedback In Example 31, the commands create five wire-length constraints, one for each of the receivers shown in Figure 154 Example 31 Five Wire-Length Constraints for the Five Receivers Connected to Driver D fc_shell> create_length_limit -for [get_nets -physical_context $net] \\ -driver [get_pins -physical_context D/o1] fc_shell> create_length_limit -for [get_pins -physical_context R1/a] \\ -min_value 38.0 fc_shell> create_length_limit -for [get_pins -physical_context R2/a] \\ -min_value 40.0 fc_shell> create_length_limit -for [get_pins -physical_context R3/a] \\ -min_value 45.0 fc_shell> create_length_limit -for [get_pins -physical_context R4/a] \\ -min_value 42.0 fc_shell> create_length_limit -for [get_pins -physical_context R5/a] \\ -min_value 41.0 In Example 32, the command creates a constraint group named abc for the nets and bundles that match the pattern pr*.\n The minimum wire length is set to 10, so the length for each of the wires in the group is at least 10 microns.\n See Figure 155 Example 32 Minimum Wire Length Constraint for pr* Nets fc_shell> create_length_limit abc -for [get_nets -physical_context pr*] \\ -min_value 10 {abc} Figure 155 Minimum Wire Length Constraint for pr* Nets In Example 33, the command creates a constraint group named gcr_length_limit_a2 for the a2/A pin.\n The minimum wire length is set to 2000.\n See Figure 156 Example 33 Minimum Wire Length Constraint for the a2/A Pin fc_shell> create_length_limit -for [get_pins -physical_context a2/A] \\ -min_value 2000.0 -force gcr_length_limit_a2 757 Defining Routing Constraints Feedback Figure 156 Minimum Wire Length Constraint for the a2/A Pin"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading Mixed Gate-Level Netlists and RTL Files"}, {"role": "assistant", "content": "You can read a combination of Verilog netlists and RTL files.\n Use the read_verilog command to read the Verilog netlists.\n Use the analyze and elaborate commands to read the RTL files.\n After all the netlist files and RTL files have been read into the tool, use the set_top_module command to link the designs to create the block for synthesis.\n The following example shows how you can read a mix of netlist and RTL files.\n As shown in this example, when you elaborate the top-level module with parameters, the top- level module name also contains the parameterized module name.\n You can control the naming style for parameterized modules using the following application options: hdlin.naming.template_naming_style hdlin.naming.template_parameter_style and hdlin.naming.template_separator_style # Read netlist files read_verilog NETLIST/bot.v # Analyze design files analyze -format sverilog -hdl_library MID RTL/mid.sv analyze -format sverilog RTL/top.svd # Elaborate top design module elaborate -parameters \"N=8,M=3\" top # Set the top level module to resolve references set_top_module top_N8_M3"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Layout-Versus-Schematic Checking"}, {"role": "assistant", "content": "To perform layout-versus-schematic (LVS) checking, which checks for inconsistencies in the physical layout, use the check_lvs command.\n By default, the check_lvs command performs the following checks for all signal, clock, and PG nets: Shorted nets A shorted net occurs when a net shapes from different nets touch or intersect.\n By default, the command Checks for shorts between net shapes in the top-level design, including shapes in top-level blockages To disable checking for shapes in top-level blockages, use the -check_top_level_blockages false option.\n Does not check for shorts between net shapes in the top-level design and net- shapes in child cells To enable this checking, use the -check_child_cells true option.\n To exclude certain types of child cells from checking, use the -exclude_child_cell_types 573 Analyzing the Routing Results Feedback option to specify one or more of the following cell types: abstract analog black_box corner cover diode end_cap fill filler flip_chip_driver flip_chip_pad lib_cell macro module pad pad_spacer physical_only and well_tap Does not check for shorts with zero-spacing blockages To enable this checking, use the -check_zero_spacing_blockages true option.\n Note: The check_lvs command supports only default routing blockages that apply to all net types and have a blockage group ID of 0.\n If the blockage applies only to specific net types or has a nonzero blockage group ID, the command ignores the blockage.\n In addition, the command ignores corridor routing blockages (which are created when you use the -reserve_for_top_level_routing option with the create_routing_blockage command) and boundary routing blockages (which are created when you use the -boundary_internal or -boundary_external options with the create_routing_blockage command).\n Open nets An open net occurs when the pins of a net are not connected by its net shapes.\n By default, the command Treats power and ground terminals as unconnected voltage sources To treat power and ground terminals as connected, use the -treat_terminal_as_voltage_source true option.\n For example, assume your block contains the layout shown in Figure 120.\n By default, the check_lvs command reports two opens for this layout.\n If you use the -treat_terminal_as_voltage_source true option, no opens are reported.\n 574 Analyzing the Routing Results Feedback Figure 120 Layout With Power and Ground Terminals Reports open nets as the bounding box of the open net and does not report floating pins To report detailed open locations, use the -open_reporting detailed option.\n Note that using this option might increase the runtime.\n To report the floating pins, use the -report_floating_pins true option.\n Floating net shapes A floating net shape occurs when a net shape is not physically connecting to a pin of its net.\n To perform a subset of these checks, use the -checks option to specify one or more of the following checks: short (shorted nets), open (open nets), and floating_routes (floating net shapes).\n To check only specific nets, use the -nets option to specify the nets of interest.\n By default, the check_lvs command reports a maximum of 20 violations for each type of error.\n To change this limit, use the -max_errors option.\n To report all violations, specify the maximum number of violations as zero ( -max_errors 0 ).\n You can view the violations reported by the check_lvs command in the GUI by using the error browser.\n For information about using the error browser, see the Fusion Compiler Graphical User Interface User Guide To reduce the runtime required by the check_lvs command, enable multithreading by using the set_host_options command, as described in Enabling Multicore Processing 575 Analyzing the Routing Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling or Disabling Clock Gating on Design Objects"}, {"role": "assistant", "content": "You can enable or disable clock gating on certain design objects by overriding all necessary conditions set by the clock-gating style.\n The set_clock_gating_objects command specifies the design objects on which clock gating should be enabled or disabled during the compile_fusion command.\n The following example excludes all registers in the subdesign ADDER, except the out1_reg bank.\n The out1_reg bank is clock gated according to the specified clock-gating style: fc_shell> set_clock_gating_objects -exclude ADDER \\ -include ADDER/out1_reg[*] 295 Setting Up Clock Gating Feedback The following example sets and then removes the inclusion and exclusion criteria specified by the -include -exclude, and -clear options: fc_shell> set_clock_gating_objects -include ADDER/out1_reg[*] \\ -exclude ADDER/out2_reg[*] fc_shell> set_clock_gating_objects \\ -clear {ADDER/out1_reg[*] ADDER/out2_reg[*]}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Ignore Pins"}, {"role": "assistant", "content": "To define one or more pins as ignore pins, use the following syntax: set_clock_balance_points [-clock clock -consider_for_balancing false -balance_points pins The -clock option is not required.\n If you do not use it, all user-defined ignore pins apply to all clocks.\n 346 Defining the Clock Trees Feedback For the CLK clock tree shown in Figure 74, assume that you want to ignore all branches of the clock tree beyond the U2 cell.\n To do so, you would use the following command: fc_shell> set_clock_balance_points -clock [get_clocks CLK] \\ -consider_for_balancing false -balance_points [get_pins U2/A] Figure 74 User-Defined Ignore Pin CLK U2 To report the user-defined ignore pins, use the remove_clock_tre_exceptions comand-stop_pinscomandsremove_clock_tre_exceptions-stop_pins report_clock_balance_points command.\n This command reports both the user-defined sink pins and the user-defined ignore pins.\n During clock tree synthesis, the tool adds guide buffers and isolates ignore pins from the rest of the clock network.\n During subsequent data path optimization, the tool fixes any existing DRC violations beyond the guide buffers.\n To remove the ignore pin definition from a pin, use the remove_clock_tre_exceptions comand-stop_pinscomandsremove_clock_tre_exceptions-stop_pins remove_clock_balance_points command.\n For example, to remove the ignore pin definition from pin U2/CLK for the CLK clock, use the following command: fc_shell> remove_clock_balance_points -clock [get_clocks CLK] \\ -balance_points [get_pins U2/CLK]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Constraints of Variant Cell"}, {"role": "assistant", "content": "To set the constraints of variant cell: 1.\n Use the set_repeater_group_constraints -type variant_cell_swapping command to set the variant for cell swapping.\n 2.\n Use the report_repeater_group_constraints command to view the report of the repeater group constraint settings, after setting the variant for cell swapping.\n The report provides the Track pattern of the variant cell group Variant site ids Honor cell group not sharing timing First track alignment 3.\n Use the remove_repeater_group_constraints command to remove the constraints and reset the settings based on the report."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Equivalent Cell Groups"}, {"role": "assistant", "content": "The Library Compiler tool supports creating variant-ready libraries from the Liberty source files.\n The physical_variant_cells attribute in the Liberty source defines the variants of a cell.\n When the physical_variant_cells attribute exists in the logic libraries, the compiled library is variant ready.\n If you logic library is not variant ready, you can define the equivalent cell variants during the library preparation stage in the Library Manager tool.\n To do so, create equivalent cell groups by using the create_cell_groups command.\n The following example adds equivalent cell groups to an existing reference library in the Library Manager tool: lm_shell> create_workspace -flow LIB.ndm lm_shell> create_cell_group -name A [get_lib_cells MY_LIB/A_*] lm_shell> create_cell_group -name B [get_lib_cells MY_LIB/B_*] 166 Specifying Legalization Settings Feedback lm_shell> check_workspace lm_shell> commit_workspace You can report the equivalent cell groups in a library by using the report_cell_groups command in either the Library Manager tool or the Fusion Compiler tool.\n This command reports equivalent cell groups that are defined in Liberty source files of variant-ready logic libraries as well as those defined by using the create_cell_groups command in the Library Manager tool."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing Metal Fill in the GUI"}, {"role": "assistant", "content": "To view the metal fill shapes in the layout view of the GUI, 1.\n Display the View Settings panel by clicking the View Settings icon ( ) in the panel area.\n Set the Level to 1.\n Select the Objects tab and enable visibility for Fill Cell objects and Area Fill metal shapes (if you do not see Area Fill in the object list, expand the Route object and Shape Use attribute).\n 2.\n Display the Hierarchy Settings panel by clicking the Hierarchy Settings icon ( ) in the View Settings panel or the menu bar.\n Set the \"View level\" to 1.\n Select \"Fill Cell\" in the \"Expanding cell types\" section.\n Figure 150 shows the View Settings and Hierarchy Settings panels with the required settings for displaying fill shapes.\n 733 Inserting Metal Fill With IC Validator In-Design Feedback Figure 150 Settings Used to Display Fill Shapes in the GUI"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Settings for the Freeze Silicon ECO Flow"}, {"role": "assistant", "content": "When you set the design.eco_freeze_silicon_mode application option to true and run the add_buffer_on_route command in the freeze silicon mode, the tool checks if a spare cell is available within a distance of five times the unit site height before adding a buffer.\n If a spare cell is not available, the tool does not add the buffer.\n To control this distance, use the -max_distance_to_spare_cell option.\n To disable this feature, use the -not_spare_cell_aware option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Instance-Based Analysis Reports"}, {"role": "assistant", "content": "Use the get_instance_result command to write the cell instances with rail data to an output text file, in the units defined with the report_units command.\n 929 Writing Analysis and Checking Reports Feedback To specify which analysis or checking types to report, use the -type option.\n The supported analysis types are: effective_voltage_drop current effective_resistance min_path_resistance, and power Here are commonly used options of the get_instance_result command: Option Description -net (Optional) Specifies the net to report.\n When not specified, the command reports data for all power nets.\n -touching (Optional) Reports cell instances that touch the specified rectangle region in the format of {{ x1 y1 } { x2 y2 }} -top value (Optional) Reports cell instances with the top N voltage drop values.\n -threshold (Optional) Reports cell instances with voltage drop values that are greater than the specified threshold.\n This option is supported by all analysis types.\n -percentage (Optional) Reports cell instances with voltage drop values that are greater than specified percentage of the ideal voltage drop value.\n This option is supported only by the voltage_drop type.\n The default is 0.1, meaning 10% of the ideal supply voltage.\n -histogram (Optional) Includes a histogram that shows the average voltage drop value per net in the report.\n -collection (Optional) Reports cell instances as a cell collection rather than a column-based text report.\n Example The following example reports instance voltage drop results within the specified area: fc_shell> get_instance_result -net VDD -type voltage_drop \\ -touching {{1610 1968} {1620 1969}} Isw2/Isw2_pktpro/U179070 -0.053533 Isw2/Isw2_pktpro/U64076 -0.0535949 Isw2/Isw2_pktpro/U83035 -0.0535949 Isw2/Isw2_pktpro/U181017 -0.0535949 Isw2/Isw2_pktpro/U103335 -0.05366 Isw2/Isw2_pktpro/U181049 -0.05366 Isw2/Isw2_pktpro/U98988 -0.05366 Isw2/Isw2_pktpro/U201986 -0.053713 Isw2/Isw2_pktpro/U181064 -0.053719 Isw2/Isw2_pktpro/U79791 -0.053809 Isw2/Isw2_pktpro/U179052 -0.054007 Isw2/Isw2_pktpro/U4120 -0.054073 Isw2/Isw2_pktpro/U20408 -0.054287 930 Writing Analysis and Checking Reports Feedback See Also Voltage Hotspot Analysis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Automatically Fixing Isolated Vias"}, {"role": "assistant", "content": "An isolated via is a via that does not have neighboring vias close enough to meet the requirements of the technology.\n To check for and fix isolated vias, 1.\n Set up the IC Validator environment as described in Setting Up the IC Validator Environment 2.\n (Optional) Enable distributed processing by using the set_host_options command, as described in Enabling IC Validator Multicore Processing 3.\n Set the application options for fixing isolated vias.\n At a minimum, you must define the maximum distance within which a neighboring via must exist so that a via is not considered an isolated via.\n To define this information for each via layer, set the signoff.fix_isolated_via.isolated_via_max_range application option, which has the following syntax: { { via_layer distance }...\n { via_layer distance } } where the via_layer argument uses the mask names, such as via1, and the distance argument is in microns.\n For information about the options available for fixing isolated vias, see Setting Options for Fixing Isolated Vias 4.\n Run isolated via checking and fixing by using the signoff_fix_isolated_via command as described in Running the signoff_fix_isolated_via Command"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Hold Time Optimization Effort"}, {"role": "assistant", "content": "By default, the tool focuses on fixing setup violations during concurrent clock and data optimization.\n However, if your design has hold violations that are difficult to fix, you can increase the effort for hold fixing by setting the ccd.hold_control_effort application option to medium high, or ultra.\n The default is low Increasing the priority of hold violations reduces the number of setup violations that are fixed.\n Therefore, the hold priority should be increased only if the hold timing is critical.\n This setting affects concurrent clock and data optimization performed during the final_opt stage of the clock_opt command and the route_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock-Gating Prerequisite Conditions"}, {"role": "assistant", "content": "Before gating the clock signal of a register, the Fusion Compiler tool checks to see if certain clock-gating conditions are satisfied.\n The tool inserts a clock gate only if all the clock-gating conditions are met: The circuit demonstrates synchronous load-enable functionality.\n The circuit satisfies the setup condition.\n The register bank or group of register banks satisfies the minimum number of bits you specify with the set_clock_gating_options -minimum_bitwidth command.\n The default minimum bitwidth is 3.\n After clock gating is complete, the status of clock-gating conditions for gated and ungated register banks appears in the clock-gating report.\n For information about the clock-gating report, see Reporting Clock-Gating Results Clock-Gating Conditions The register must satisfy the following conditions for the tool to gate the clock signal of the registers: Enable condition If the register bank's synchronous load-enable signal is a constant logic 1, reducible to logic 1, or logic 0, the condition is false and the circuit is not gated.\n If the synchronous load-enable signal is not a constant logic 1 or 0, the condition is true and the setup condition is checked.\n The enable condition is the first condition that the tool checks.\n For more information, see Clock-Gating Enable Condition Setup condition This condition applies to latch-free clock gating only.\n The enable signal must come from a register that uses the same clock as the register being gated.\n The setup condition is checked only if the register satisfies the enable condition.\n For more information, see Clock-Gating Setup Condition Width condition The width condition is the minimum number of bits for gating registers or groups of registers with equivalent enable signals.\n The default is 3.\n You can set the width condition by using the -minimum_bitwidth option of the set_clock_gating_options command.\n The width condition is checked only if the register satisfies the enable condition and the setup condition.\n 292 Setting Up Clock Gating Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Tiling Within Relative Placement Groups"}, {"role": "assistant", "content": "To control the tiling of objects within a relative placement group, use the set_rp_group_options -tiling_type command with the settings shown in the following table.\n Table 58 Controlling Placement With the set_rp_group_options -tiling_type Command To do this Use this setting Tile objects in a bit-slice pattern and preserve both the row and column alignment.\n The height of a row is determined by the tallest object in the row The width of a column is determined by the widest object in the column bit_slice (Default) Horizontally compress the objects in each row and maintain row alignment.\n horizontal_compression Vertically compress the objects in each column and preserve the column alignment vertical_compression 800 Specifying Options for Relative Placement Groups Feedback Figure 180 Bit-Slice Placement Versus Horizontal or Vertical Compression Bit-slice placement Vertical compression Horizontal compression The setting of the -tiling_type option is not propagated from a parent group to child groups."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting and Querying Self-Gating Cells"}, {"role": "assistant", "content": "By default, the report_clock_gating command automatically detects the presence of self-gates in the design and displays the corresponding information at the bottom of the report, as shown in the following example report.\n 333 Special Naming and Querying for DFT Wrapper Clock Gates Feedback Clock Gating Summary | Number of Clock gating elements | 5 | | | | | Number of Tool-Inserted Clock gates | 5 (100.00%) | | | | | Number of Pre-Existing Clock gates | 0 (0.00%) | | | | | Number of Gated registers | 48 (100.00%) | | | | | Number of Tool-Inserted Gated registers | 48 (100.00%) | | | | | Number of Pre-Existing Gated registers | 0 (0.00%) | | | | | Number of Ungated registers | 0 (0.00%) | | | | | Total number of registers | 48 | | | | | Max number of Clock Gate Levels | 2 | | | | | Number of Multi Level Clock Gates | 4 | Self Gating Summary | Number of self-gating cells | 3 | | | | | Number of self gated registers | 20 (41.67%) | | | | | Number of registers not self-gated | 28 (58.33%) | | | | | Total number of registers | 48 | Self-gating cells are also counted as clock gates in the clock gating summary table.\n In this example, there are two clock gates and three self-gates, for a total of five clock-gating elements.\n You can find all the self-gates in a design by using the get_clock_gates command.\n This command returns a collection of clock-gating or self-gating cells.\n For example, the following command returns the self-gating cells that gate registers clock by CLK: fc_shell> get_clock_gates -clock CLK -type self-gate"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating a Via Definition"}, {"role": "assistant", "content": "To create a via definition, use the create_via_def command.\n After it is created, the via definition can be used anywhere in the design, similar to a ContactCode definition in the technology file.\n The user-specified via definition is stored in the design library, so it can be used only in that design.\n The create_via_def command can define simple vias, simple via arrays, and custom vias.\n The following topics describe how to define these types of vias.\n Defining Simple Vias Defining Custom Vias"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Prerequisites for Clock Tree Synthesis"}, {"role": "assistant", "content": "This topic details the prerequisites required before running the clock tree synthesis.\n Before you run clock tree synthesis on a block, it should meet the following requirements: The clock sources are identified with the create_clock or create_generated_clock commands.\n The block is placed and optimized.\n Use the check_legality -verbose command to verify that the placement is legal.\n Running clock tree synthesis on a block that does not have a legal placement might result in long runtimes and reduced QoR.\n The estimated QoR for the block should meet your requirements before you start clock tree synthesis.\n This includes acceptable results for Congestion If congestion issues are not resolved before clock tree synthesis, the addition of clock trees can increase congestion.\n If the block is congested, you can rerun the 338 Defining the Clock Trees Feedback create_placement command with the -congestion and -congestion_effort high options, but the runtime can be long.\n Timing Maximum capacitance Maximum transition time The power and ground nets are prerouted.\n High-fanout nets, such as scan enables, are synthesized with buffers.\n The active scenarios are defined.\n By default, the Fusion Compiler tool synthesizes and optimizes all clocks in all active scenarios that are enabled for setup or hold analysis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Standalone Clock Trees Synthesis"}, {"role": "assistant", "content": "To perform standalone clock tree synthesis, use the synthesize_clock_trees command, as shown in the following example: fc_shell> synthesize_clock_trees When you use this command, the tool performs the following tasks: 1.\n Clock tree synthesis Before clock tree synthesis, the tool performs virtual routing of the clock nets and uses RC estimation to determine the clock net timing.\n 2.\n Clock tree optimization Before clock tree optimization, the tool performs global routing on the clock nets and uses RC extraction to determine the clock net timing.\n During clock tree optimization, the tool performs incremental global routing on clock nets modified during optimization.\n Note: This command does not detail route the clock trees.\n By default, this command works on all clocks in all active scenarios that are enabled for setup or hold analysis.\n You can specify the clocks to be built by using the -clock option.\n For example, to build only the CLK clock tree, use the following command: fc_shell> synthesize_clock_trees -clocks [get_clocks CLK] After clock tree synthesis, the tool sets the clocks in all modes of all active scenarios as propagated.\n 371 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Pin Access Checker Utility"}, {"role": "assistant", "content": "The pin access checker (PAC) utility helps you to identify the pin accessibility issues in the library development stage.\n This helps you to enhance the cell layout as you cannot modify the cell layout later, after the library is finalized and released to the Place and Route group.\n The routing DRCs identify the pin access issues after routing.\n When the cells are abutted or placed too close, two or multiple adjacent pins compete for common routing resources and causes routing DRCs.\n 81 Using Pin Access Checker Utility Feedback The benefits of PAC utility are listed as follows: Produces a place and route database with various permutations of abutted cell placement.\n Generates a place and route database and assesses the ability to place and pin accessibility of the library created based on the reports.\n The PAC performs various checks listed as follows: Placement of cells Number of accessible tracks for each library cell's pins Legalization check after placement Design rule check after routing All the earlier listed checks with PG routes You can use the create_pin_check_lib command to create or open a new library based on the input technology and reference libraries.\n PAC creates and stores blocks in this library.\n You must provide minimum three inputs by using the following application options with the create_pin_check_lib command: Technology file: Use the -technology option to provide the technology file information.\n Reference library: Use the -ref_libs option to provide the reference library information.\n Routing direction for metal layers: Use the set_attribute [get_layers Mx] routing_direction horizontal/vertical command to define routing direction in Tcl script.\n You must specify the name of the script using the pin_check.place.preplace_option_file application option.\n To enable the pin access check utility, you can use the check_libcell_pin_access command.\n You can use this command and the pin_check.* application option to enable the following pin access checks: Legalization Router Automatic derivation of cell spacing rule Use the -mode option with the check_libcell_pin_access command to perform multiple checks by specifying different modes.\n create_pin_check_lib myTest.nlib -ref_libs../lib/refLib.ndm -technology../tf/refTech.tf 82 Analyzing Libraries Feedback set_app_options -as_user_default -name pin_check.place.preplace_option_file -value check_libcell_pin_access -mode analyze_lib_cell check_libcell_pin_access -mode analyze_lib_pin check_libcell_pin_access -mode design_under_test If you have been using the earlier Tcl based version, you can translate your old scripts into new Fusion Compiler commands by using the translate_pin_check_ui command.\n translate_pin_check_ui -from old_script.tcl -to new_script.tcl"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reducing Signal Integrity Effects on Clock Nets"}, {"role": "assistant", "content": "The timing of a design can be improved by reducing signal integrity issues on clock nets.\n To do so, the tool can derive nondefault routing rules with larger spacing requirements and assign them to the clock nets in regions without routing congestion.\n 368 Specifying the Clock Tree Synthesis Settings Feedback To enable this feature, use the following application option setting: fc_shell> set_app_options \\ -name cts.optimize.enable_congestion_aware_ndr_promotion -value true When the tool derives a new nondefault routing rule for a clock net, the new spacing requirement is dependent on the spacing requirement of the existing routing rule of that net.\n If the existing routing rule is A nondefault routing rule with a spacing requirement of less than or equal to two times the default spacing, the spacing requirement is doubled The name of this new nondefault rule is the original name with an _ext_spacing postfix.\n A nondefault routing rule with a spacing requirement of more than two times the default spacing, the spacing requirement is increased by one default spacing The name of this new nondefault rule is the original name with an _ext_spacing postfix.\n The default routing rule, the spacing requirement is doubled The name of this new nondefault rule is default_rule_equivalent_ndr_double_spacing."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Data Optimization During the route_opt Command"}, {"role": "assistant", "content": "The concurrent clock and data optimization performed during the route_opt command can reduce the peak dynamic voltage drop without affecting the timing QoR.\n To enable this feature, set the route_opt.flow.enable_voltage_drop_opt_ccd application option to true When you enable this feature, during the route_opt command, the tool uses the RedHawk Fusion feature to identify dynamic-voltage-drop hotspots and cells rows where the cells from the hotspots can be relocated.\n Then, during optimization, the tool relocates or downsizes the cells in the hotspots to reduce the peak dynamic voltage drop without hurting the timing QoR.\n You can specify one of the following thresholds for selecting cells for optimization: A threshold for the cell voltage drop, as a percentage of the supply voltage, by using the ccd.voltage_drop_voltage_threshold application option.\n Any cell with a voltage drop that exceeds this threshold is selected for optimization.\n A threshold for the number of cells, as a percentage of the total number of cells, by using the ccd.voltage_drop_population_threshold application option.\n Cells are selected starting with the worst violator.\n During postroute optimization, the tool can perform RedHawk dynamic voltage drop analysis to identify cells involved in voltage drop violations, and then use optimization techniques on those cells to improve the dynamic voltage drop.\n You can further improve the dynamic voltage drop by enabling IR-driven sizing, which uses the RedHawk dynamic voltage drop analysis results to identify cells involved in voltage drop violations, and then tries to replace those cells with cells having smaller leakage current.\n To enable this feature, set the route_opt.flow.enable_irdrivenopt application option to true, in addition to setting the route_opt.flow.enable_voltage_drop_opt_ccd application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Discouraging Off-Grid Routing for Vias"}, {"role": "assistant", "content": "To discourage off-grid routing for vias, you can increase the cost of routing the via enclosure metal shapes off the wire track grid.\n To specify the extra cost multiplier for the metal layers on which the via enclosures are routed, set the route.common.extra_via_off_grid_cost_multiplier_by_layer_name application option.\n Use the following syntax to set this option: { { layer multiplier }...\n } Specify the layers by using the layer names from the technology file.\n The cost multiplier must be a value between 0.0 and 20.0.\n When you specify this option, the effective cost is the base cost times (1+multiplier).\n For example, assume that the technology file defines the VIA12 layer between the M1 and M2 metal layers and the VIA23 via layer between the M2 and M3 metal layers.\n To set the extra cost multiplier for the via enclosures on the M2 metal layer (and therefore the vias on the VIA12 and VIA23 via layers) to 0.5 (for an effective via cost of 1.5 times the base cost), use the following command: fc_shell> set_app_options \\ -name route.common.extra_via_off_grid_cost_multiplier_by_layer_name \\ -value {{M2 0.5}}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Filler Cells"}, {"role": "assistant", "content": "To ensure that all power nets are connected, you can fill empty space in the standard-cell rows with filler cells.\n The Fusion Compiler tool supports filler cells with and without metal 636 Inserting Filler Cells Feedback and supports both single-height and multiheight filler cells.\n Filler cell insertion is often used to add decoupling capacitors to improve the stability of the power supply.\n Note: Before inserting filler cells, ensure that the block is legalized by using the check_legality command.\n The Fusion Compiler tool can select the filler cells to use based on An ordered list of filler cell references In the standard filler cell insertion flow, you specify an ordered list of filler library cells and the tool inserts the first cell that fits in each gap.\n If your technology requires specific filler cells abutting the standard cells, you can insert these required filler cells first, and then use standard filler cell insertion to fill the remaining space.\n For details about this method, see Standard Filler Cell Insertion Threshold-voltage rules In the threshold-voltage-based flow, the tool selects the filler cells by using user-defined insertion rules, which are based the threshold-voltage types of the cells that border the gap.\n This flow is typically used only for established foundry nodes.\n For details about this method, see Threshold-Voltage-Based Filler Cell Insertion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Logic Levels in Batch Mode"}, {"role": "assistant", "content": "As an alternative to displaying logic-level histograms in the GUI, you can report logic levels by using the report_logic_levels command on the command line or in a script (batch mode).\n Note: You must have a mapped design to run logic-level reporting.\n You can use the command to report logic levels of The entire design or a selected path group All types of paths, including same-clock paths, cross-clock paths, infeasible paths, and multicycle paths in all scenarios The report contains logic distribution and timing information in the summary, logic-level distribution, and logic-level path report sections.\n By default, buffers and inverters are not reported.\n 282 Performing Design Analysis Feedback To report logic levels, 1.\n (Optional) Set a specific logic-level threshold other than the default by using the set_analyze_rtl_logic_level_threshold command.\n By default, the tool derives the logic-level threshold based on the delay values required for the paths.\n To set a logic-level threshold for the entire design, enter fc_shell> set_analyze_rtl_logic_level_threshold threshold_value To set a logic-level threshold for a specific path group, enter fc_shell> set_analyze_rtl_logic_level_threshold \\ -group path_group threshold_value The path group setting overrides the global threshold of the entire design.\n To reset all threshold values, enter fc_shell> set_analyze_rtl_logic_level_threshold -reset To reset a specific group setting, enter fc_shell> set_analyze_rtl_logic_level_threshold \\ -group path_group -reset 2.\n (Optional) Specify the fields in the summary section of the report by setting the shell.synthesis.logic_level_report_summary_format application option.\n The default contains five fields: \"group period wns num_paths max_level\".\n You can specify up to eight fields.\n For example, fc_shell> set_app_options \\ -name shell.synthesis.logic_level_report_summary_format \\ -value \"group num_paths max_level min_level avg_level\"...\n 3.\n (Optional) Specify the fields in the path group section of the report by setting the shell.synthesis.logic_level_report_group_format application option.\n The default contains five fields: \"slack ll llthreshold startpoint endpoint\".\n You can specify up to ten fields.\n For example, fc_shell> set_app_options \\ -name shell.synthesis.logic_level_report_group_format \\ -value \"slack ll ll_buf_inv clockcycles startclk endclk...\n 4.\n Report logic levels by using the report_logic_levels command.\n The following example generates a logic-level report of the clk_i path group: fc_shell> report_logic_levels -group clk_i 283 Performing Design Analysis Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Handling Design Data Using the Early Data Check Manager"}, {"role": "assistant", "content": "During the early iterations of a design cycles, the design data might be incomplete or incorrect.\n This can prevent you from implementing the design for exploration purposes and so on.\n The Fusion Compiler Early Data Check Manager allows you to specify how the tool should handle the data checks it performs during the following implementation tasks: Design planning Multivoltage design implementation Optimization Placement Legalization Hierarchical implementation of designs with physical hierarchy The following table shows the Early Data Check Manager commands available for controlling how the tool handles the data checks and for generating related information.\n Table 18 Early Data Check Manager Commands To do this Use this command Specify the policy for handling one or more data checks set_early_data_check_policy Obtain a report about data check violations report_early_data_checks Get a Tcl collection of violations that can be used in other commands get_early_data_check_records Save the settings in a file for future use write_early_data_check_config Clear the data check settings in preparation for another iteration remove_early_data_check_records You should specify the policies for handling the data checks before you begin implementation.\n The following example specifies that the tool should be strict when checking for the SCANDEF information.\n Therefore, the tool does not proceed with the create_placement command because the SCANDEF information is missing.\n 207 Applying Mega-Switch Command Settings Feedback fc_shell> set_early_data_check_policy -policy strict \\ -check place.coarse.missing_scan_def fc_shell> create_placement Information: Policy for early data check 'place.coarse.missing_scan_def' is 'error'.\n (EDC-001) Error: No valid scan def found.\n (PLACE-042) Information: Ending 'create_placement' (FLW-8001) fc_shell> report_early_data_checks -check place.coarse.missing_scan_def Check Policy Strategy Fail Count place.coarse.missing_scan_def error 1 The following example specifies that the tool should be lenient with regards to all data checks related to coarse placement.\n Therefore, the tool proceeds with the create_placement command without the SCANDEF information.\n fc_shell> set_early_data_check_policy -policy lenient \\ -check place.coarse.* fc_shell> create_placement Information: Policy for early data check 'place.coarse.missing_scan_def' is 'tolerate'.\n (EDC-001) Continuing without valid scan def.\n Start transferring placement data.\n Creating placement from scratch.\n...\n...\n For more information about the Early Data Check Manager, see the Fusion Compiler Data Model User Guide"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Diodes"}, {"role": "assistant", "content": "The -diode option of the fix_mv_design command fixes mismatches between power domains and voltage areas for diodes throughout the design.\n The fix_mv_design -diode command examines all diodes, including diodes inserted by the create_cell create_diodes, and add_port_protection_diodes commands, as well as several routing commands that insert diodes to fix antenna violations.\n If a power domain and voltage area mismatch for a diode is found, the tool uses the voltage area to explicitly assign a corresponding power domain.\n If multiple power domains exist in a single voltage area, the tool picks one of the available power domains.\n Any of the available power domains is acceptable because all diode cells are single-rail cells and all power domains in the same voltage area have the same primary supply.\n 1008 Fixing Multivoltage Violations Feedback To obtain a report of the changes that the tool recommends without making any netlist changes, use the -report_only option.\n To obtain detailed information in the report, use the -verbose option.\n These are the only two options that you can use with the -diode option.\n 1009"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Linking to Subblocks With Multiple Labels"}, {"role": "assistant", "content": "When saving a block at different stages of an implementation flow, you can use the -as blockName labelName or -label labelName option with the save_block command to specify a unique label for each version of the block you save.\n By default, during linking, the top-level block links to lower-level blocks with the same label.\n If a subblock has been saved with multiple labels, you can specify which label the top level should link to by using the set_label_switch_list command.\n The command specifies a precedence-ordered list of labels to use during linking.\n By default, the command applies to all subblocks; to specify a different block or blocks, use the -reference option.\n The following example specifies that the top level should link to the PostCompile label of the BLOCK1 and BLOCK2 subblocks: fc_shell> set_label_switch_list \\ -reference {BLOCK1 BLOCK2} PostCompile The following example specifies that the PostCompile label has a higher priority than the PreCompile label when linking any subblock at the top level.\n fc_shell> set_label_switch_list {PostCompile PreCompile} 840 Specifying the Editability of Blocks From the Top-Level Feedback You can use the set_label_switch_list command again to update the block's label switch list and then relink the block using the link_block -rebind command.\n Note the following when relinking a block: If none of the labels in the switch list are available in a subblock, or if you specify an empty switch list, the tool links the subblock to the label it was previously linked to If you have removed all the labels for a subblock, the tool links the subblock to the label of its parent block"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Blockages That Exclude Relative Placement Groups"}, {"role": "assistant", "content": "To define partial blockages that exclude relative placement groups, specify the boundary, type ( -type rp_group option), blockage percentage ( -blocked_percentage option), and optionally the name for the placement blockage.\n For example, to define a partial blockage that excludes relative placement groups, but allows a cell density of 100 percent for all other cells, use the following commands: create_placement_blockage -boundary {{10 20} {100 200}} \\ -type rp_group -blocked_percentage 0 Note: Relative placement group blockages are honored during placement, but not during legalization, optimization, or clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Placing Group Repeaters For Multibit Registers"}, {"role": "assistant", "content": "To place group repeaters for multibit registers, use the create_repeater_groups command with the -multi_bit option with the following command options: create_repeater_groups -cells | -supernet_bundles | -supernets -multi_bit -pin_mapping {{lib_cell1 {inp1 outp1} {inp2 outp2}\u2026} The -multi_bit option determines the order of a multibit repeater based on the path driver and creates the repeater groups for the multibit repeaters.\n In a design, when a net has no route defined, this option places the group repeaters based on their location.\n To verify the support for multibit register placement, use the following command: fc_shell> preplace_group_repeater -repeater_group_locations repeater_group_location_list The format for the repeater_group_location_list argument is 985 Adding a Group of Repeaters Feedback { {cell_collection, layer, location, potential routing direction, placing order}...} or { {group_id, layer, location, potential routing direction, placing order}...}."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mitigating Design Mismatches"}, {"role": "assistant", "content": "During early design development, frequent design updates can cause incomplete or inconsistent data, such as pin mismatches between a block-level design and the reference to it from a top-level design.\n To enable the tool to successfully link a block even if it has certain types of design mismatch, set a mismatch configuration for the block.\n By default, the tool cannot link any block with inconsistent or mismatching data.\n When you set mismatch configurations, the tool either ignores or fixes several different types of mismatching data and continues the linking process.\n Blocks linked with mismatching data can be used only for feasibility analysis.\n To learn how to mitigate design mismatches, see the Fusion Compiler Data Model User Guide"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Custom Routing Application Options"}, {"role": "assistant", "content": "The Fusion Compiler tool provides a set of application options to control custom routing results.\n The application options are applied globally.\n To define net-specific routing constraints to override the routing applications options, see Defining Routing Constraints To list all application options that are available for custom routing, use the following command: fc_shell> report_app_options custom.route.* To use the hybrid flow for custom routing, set the custom.route.hybrid_flow application option to on.\n This sets the values for each of hybrid flow related application options automatically.\n Table 56 lists the application options for custom routing.\n 764 Using Custom Routing Application Options Feedback Table 56 Application Options for Running Custom Routing Application option Description custom.route.bus_corner_type custom.route.bus_intra_shield_placement custom.route.bus_pin_trunk_offset custom.route.bus_split_even_bits custom.route.bus_split_ignore_width custom.route.bus_tap_off_enable custom.route.bus_tap_off_shielding Specifies constraints for bus routing.\n See Bus Routing Options custom.route.match_box Specifies the area within which the Custom Router performs length matching.\n custom.route.layer_grid_mode Specifies whether the route and corresponding parallel shields, jumpers for parallel shields, and bus shields snap to the wire tracks or the routing grid.\n See Track Adherence Options custom.route.diffpair_twist_jumper_enable custom.route.diffpair_twist_jumper_interval custom.route.diffpair_twist_jumper_offset custom.route.diffpair_twist_jumper_style Specifies constraints for differential-pair routing.\n See Differential-Pair Options custom.route.net_min_layer_mode custom.route.net_min_layer_mode_soft_cost custom.route.net_max_layer_mode custom.route.net_max_layer_mode_soft_cost Specifies the minimum and maximum layer mode and the layer cost.\n See Specifying Net-Specific Layer Constraints custom.route.routing_area Defines an area within which the Custom Router creates routes.\n Use this option if your block is large and you only need to create or modify routes within a specific area.\n custom.route.shield_connect_mesh_overlap custom.route.shield_connect_route custom.route.shield_connect_to_supply custom.route.shield_min_open_loop custom.route.shield_min_shield_seg custom.route.shield_min_signal_seg custom.route.shield_net custom.route.shield_second_net Specifies shielding constraints.\n See Shielding Options 765 Using Custom Routing Application Options Feedback Table 56 Application Options for Running Custom Routing (Continued) Application option Description custom.route.single_loop_match custom.route.single_loop_match_max_spacing custom.route.single_loop_match_min_spacing custom.route.single_loop_match_offset_layer Specifies how to extend the wire.\n See Single-Loop Matching and Using a DDR Routing Flow custom.route.skip_connect_pin_type Enables the hybrid flow custom.route.distance_to_net_pin Hybrid flow only ) When using the skip_connect_pin_type option, skips the connection if the distance between the pin and the route is <= distance_to_net_pin Specify the distance_to_net_pin option as a list of pairs.\n The syntax for each pair of values is as follows: {{ netName distance }} custom.route.balance_mode Reduces the skews caused by wire length and via cut count differences in interposer designs.\n See Balance Mode Option"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock Gating"}, {"role": "assistant", "content": "RTL clock gating is a power optimization feature provided by the Fusion Compiler tool.\n This is a high-level optimization technique that can save a significant amount of power by adding clock gates to registers that are not always enabled and have synchronous load- enable or explicit feedback loops.\n The tool gates flip-flops by extracting common enable signals shared by the flip-flops either in the same hierarchy or across hierarchies.\n This technique greatly reduces dynamic power consumption by reducing the switching activity on the clock inputs to registers and eliminating the multiplexers.\n It can also result in a smaller chip area.\n Clock gating occurs by default during the compile_fusion command using specified clock-gating settings.\n If you do not specify any clock-gating constraints, the default constraints are used.\n While you cannot disable clock gating, you can use the clock-gating commands in this section to prevent insertion of clock gates in specific blocks or the whole design.\n The tool identifies preexisting clock-gating cells during the analyze and elaborate commands.\n The tool inserts one more level of clock-gating cells at the leaf level.\n For more information, see the following topics: Introduction to Clock Gating Clock-Gating Prerequisite Conditions Setting Up Clock Gating Clock Gating Flows Replacing Clock Gates Controlling Clock-Gate Latencies Controlling the Number of Clock-Gate Levels Merging Clock Gates Setting Clock Gating Transformations Setting Routing Rules for Clock Gates Clock Gating and Multibit Registers 285 Introduction to Clock Gating Feedback Placement-Aware Clock Gating Fanin-Based Sequential Clock Gating Reporting Clock-Gating Results Reporting Clock-Gate Enable Signals Clock Gate Efficiency Reporting Self-Gating Optimization Special Naming and Querying for DFT Wrapper Clock Gates"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking Routability"}, {"role": "assistant", "content": "After placement is completed, you can use the check_routability command to check whether your block is ready for detail routing.\n By default, this command checks for Blocked standard cell ports A standard cell port is considered blocked if none of its physical pins is accessible.\n A standard cell pin is considered accessible if the pin contains a via that extends to a neighboring layer, there is a path on the pin layer that is at least as long as the search range distance, or there is a shorter path on the pin layer that ends at a via to a neighboring layer.\n By default, the search range distance is two times the layer pitch.\n To change this distance, use the -standard_cell_search_range option to specify a different pitch multiplier, up to a maximum of 10.\n If you specify a value larger than 10, the command sets the value to 10.\n By default, the tool does not check whether via connections are fully inside the standard cell pins.\n To enable this check, use the -connect_standard_cells_within_pins true option.\n To disable the checking of blocked standard cell ports, use the -check_standard_cell_blocked_ports false option.\n 464 Checking Routability Feedback Blocked top-level or macro cell ports A top-level or macro cell port is considered blocked if none of its physical pins is accessible.\n A top-level or macro pin is considered accessible if a legal path can be extended from the pin to a certain distance around it.\n This path can be just on the pin layer or can extend to a neighboring layer by a single via.\n By default, the distance is 10 times the layer pitch.\n To change this distance for same-layer paths, use the -blocked_range option to specify a different pitch multiplier, up to a maximum of 40.\n To change this distance for neighboring-layer paths through a via, use the -blocked_range_via_side option to specify a different pitch multiplier, up to a maximum of 40.\n If you specify a value larger than 40 for either of these options, the command sets its value to 40.\n By default, the command checks whether a pin is accessible in either the horizontal or vertical direction.\n To require that the pin is accessible in the preferred direction for its layer, use the -obey_direction_preference true option.\n To disable the checking of blocked top-level or macro cell ports, use the -check_non_standard_cell_blocked_ports false option.\n Out-of-boundary pins This check verifies that all pins are within the block boundary.\n To disable the checking of out-of-boundary pins, use the -check_out_of_boundary false option.\n Minimum grid violations This check verifies that all pins, including those within library cells, are on the minimum grid, as defined by the gridResolution attribute in the technology file.\n To disable the checking of minimum grid violations, use the -check_min_grid false option.\n Incorrect via definitions This check verifies that Uncolored via arrays do not have more than 20 rows or columns Custom or asymmetric simple via definitions do not have more than 1000 cuts The design does not contain more than 65535 via definitions You cannot disable these checks.\n 465 Checking Routability Feedback Invalid real metal via cut blockages This check verifies that all real metal via cut blockages match a legal cut size, as defined by the cutWidthTbl cutHeightTbl, and minWidth attributes in the technology file.\n To disable this check, use the -check_via_cut_blockage false option.\n Minimum width settings This check verifies that the nondefault minimum width and shield width settings are no larger than the maximum width defined in the technology file.\n You cannot disable these checks.\n The check_routability command also supports the following optional checks: Blocked power or ground ports To enable this check, use the -check_pg_blocked_ports true option.\n Redundant power or ground shapes To enable this check, use the -check_redundant_pg_shapes true option.\n Staggered power and ground vias that block the routing tracks To enable this check, use the -check_routing_track_space true option.\n Blocked ports on frozen nets To enable this check, use the -check_frozen_net_blocked_ports true option.\n Blocked unconnected pins To enable this check, use the -check_no_net_pins true option.\n Real metal blockages that overlap library cell pins To enable this check, use the -check_real_metal_blockage_overlap_pin true option.\n Invalid real metal via cut blockages in the library cells To enable this check, use the -check_lib_via_cut_blockage true option.\n 466 Checking Routability Feedback Shielding checks These checks detect possible issues with shielding by checking for the following conditions: Signal net shapes with a shape_use attribute of shield_route PG net shapes, which might be a PG strap or rail, but have a shape_use attribute of detail_route Signal, clock, or PG nets that have a shielding nondefault rule but no associated shield shapes, which might be caused by inappropriate shape_use attributes.\n To enable these checks, use the -check_shield true option.\n Via ladder checks These checks detect possible issues with via ladder insertion by checking for the following conditions: Library cell pins whose top-layer terminals have multiple pin shapes but do not have pattern_must_join attribute This check applies only to signal and secondary PG pins.\n Missing performance or electromigration via ladder on a pin that has the is_em_via_ladder_required attribute Via ladder application options that do not have the required settings To enable these checks, use the -via_ladder true option.\n The check_routability command supports the following additional pin connection controls that apply to all pin access checks: Pin access edges During frame view extraction, the tool annotates the frame views with information about the pin access edges.\n By default, the check_routability command ignores the pin access edges and allows pin connections at any point.\n You can restrict pin connections to the defined access edges by setting the -obey_access_edges option to true.\n You can further restrict pin connections to the access edge mark, which can be a narrow rectangle, a short line, or even a single point, by setting the -access_edge_whole_side option to true.\n In addition, the command can report unconnected pins that do not have an access edge defined.\n To enable this check, use the -report_no_access_edge true option.\n Via rotation By default, pin connections can use rotated vias.\n To disallow pin connections that use rotated vias, set the -allow_via_rotation option to false 467 Checking Routability Feedback By default, this command considers the following routing layer constraints when checking for blocked ports: The global minimum and maximum routing layer constraints set by the -min_routing_layer and -max_routing_layer options of the set_ignored_layers command These constraints can cause blocked ports only if they are defined as hard constraints.\n By default, these constraints are soft constraints.\n They are hard constraints only if the route.common.global_min_layer_mode and route.common.global_max_layer_mode application options are set to hard The net-specific minimum and maximum routing layer constraints set by the -min_routing_layer and -max_routing_layer options of the set_routing_rule command These constraints can cause blocked ports only if they are defined as hard constraints.\n By default, the net-specific minimum layer constraint is a soft constraint and the net- specific maximum layer constraint is a hard constraint.\n They are hard constraints only if the route.common.net_min_layer_mode and route.common.net_max_layer_mode application options are set to hard The clock minimum and maximum routing layer constraints set by the -min_routing_layer and -max_routing_layer options of the set_clock_routing_rules command These constraints can cause blocked ports only if they are defined as hard constraints.\n By default, the clock minimum layer constraint is a soft constraint and the clock maximum layer constraint is a hard constraint.\n They are hard constraints only if the route.common.net_min_layer_mode and route.common.net_max_layer_mode application options are set to hard The freeze layer constraints set by the route.common.freeze_layer_by_layer_name and route.common.freeze_via_to_frozen_layer_by_layer_name application options To ignore the routing layer constraints during the blocked port checks, use the -honor_layer_constraints false option.\n You can use the error browser to examine the errors detected by the check_routability command.\n By default, the error data generated by the check_routability command is named check_routability.err; to specify a different name for the error data, use the -error_data option.\n The error data is saved in the design library when you save the block.\n For information about using the error browser, see the Fusion Compiler Graphical User Interface User Guide 468 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating an Autofix Configuration File"}, {"role": "assistant", "content": "The autofix configuration file has the following format: mask_layer_name \" \" full_IC_Validator_DRC_rule_comment You can put comments in the configuration file by starting the line with the pound sign (#).\n 684 Performing Signoff Design Rule Checking Feedback If you have already run the signoff_check_drc command, you can generate a configuration file by running the $ICV_HOME_DIR/contrib/generate_layer_rule_map.pl script.\n This script has the following syntax: generate_layer_rule_map.pl -dplog IC_Validator_log_file -tech_file technology_file -o config_file_name The IC Validator log file that you specify in the -dplog option is the log file that was generated by the previous signoff_check_drc run.\n This file is called runset.dp.log and is located in the run_details subdirectory of the signoff_drc_run directory (or the directory specified by the signoff.check_drc.run_dir application option.\n To specify the location of the configuration file you created, use the signoff.fix_drc.config_file application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up for Self-Gating"}, {"role": "assistant", "content": "To set up the block for self-gating, perform the following steps before you run the compile_fusion command: 1.\n Enable self-gating by setting the compile.clockgate.self_gating application option to true fc_shell> set_app_options -name compile.clockgate.self_gating \\ -value true 2.\n Apply switching activity by using the read_saif or set_switching_activity command.\n 3.\n (Optional) Specify self-gating settings using the set_self_gating_options command.\n For more information, see Setting Self-Gating Options 4.\n (Optional) Override the tool's default behavior of selecting self-gating objects by using the set_self_gating_objects command.\n For more information, see Controlling the Selection of Self-Gating Objects"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Clock Cell Spacing Rules"}, {"role": "assistant", "content": "To define clock cell spacing rules, use the set_clock_cell_spacing command.\n At a minimum, you must specify the minimum spacing in the x-direction or the y-direction; typically you would specify the minimum spacing in both directions.\n To specify the minimum spacing in microns in the X-direction, set the -x_spacing option to a nonzero value This value is usually dependent on the library cell's drive strength and clock frequency.\n 363 Specifying the Clock Tree Synthesis Settings Feedback Y-direction, set the -y_spacing option to a nonzero value This value is usually less than half a row height.\n Note: Using a large spacing value increases the skew because the cells are spaced further away from the intended clusters of sinks.\n By default, the specified cell spacing requirements apply to all clock cells.\n To restrict the clock cell spacing rules to specific Library cells, use the -lib_cells option Clocks, use the -clocks option If adjoining clock cells both have cell spacing rules for a given direction, the sum of the spacing values applies.\n For example, if two adjoining clock cells both have a minimum cell spacing of 5 microns in the x-direction, they are placed at least 10 microns apart in the x-direction.\n You can relax the adjoining cell spacing rule by setting the cts.placement.cell_spacing_rule_style application option to maximum, in which case the tool uses the larger of the spacing settings between two adjoining cells instead of the sum of the spacing settings.\n For example, the clock cells in the previous example are placed at least 5 microns apart in the x-direction, instead of 10 microns.\n The clock cell spacing rules defined by the set_clock_cell_spacing command are honored by the synthesize_clock_trees balance_clock_groups, and clock_opt commands.\n To report clock cell spacing rules, use the report_clock_cell_spacings command.\n To remove clock cell spacing rules, use the remove_clock_cell_spacings command.\n By default, this command removes all clock cell spacing rules.\n To remove specific clock cell spacing rules, use the -lib_cells option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a group of repeaters"}, {"role": "assistant", "content": "To define a group of repeaters for cutline support, use the set_repeater_group or create_repeater_groups command.\n The following examples show the command usage.\n set_repeater_group -group_id group_id -check_connection \\ [-cells cell_list ] \\ [-cutline { {{x1 y} {x2 y}} | {{x y1} {x y2}} } ] \\ [-driver_group_id group_id ] \\ [-path_drivers pin_port_list ] \\ [-path_loads pin_port_list ] \\ [-override] [-lib_cell_input string [-lib_cell_output string [-clear] 982 Adding a Group of Repeaters Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preserving Cells and Nets During Optimization"}, {"role": "assistant", "content": "To preserve design objects during optimization, use the set_dont_touch command.\n The command places the dont_touch attribute on cells, nets, references, and subdesigns in the current design to prevent these objects from being modified or replaced during optimization.\n This table shows how the tool preserves the design objects during optimization.\n Design objects Tool behavior Cells Excludes the cells from optimization.\n Nets Preserves the connectivity of all pins to the nets.\n Modules, designs, library cells Prevents optimization of all instances that reference them.\n Hierarchical cells or modules Excludes the cells and all child cells from optimization.\n When you use the set_dont_touch command, keep the following in mind: The command prevents the ungrouping of hierarchy.\n A child cell must inherit the same dont_touch attribute from its parent module.\n For example, you cannot remove the dont_touch attribute from a child cell when its parent module is marked with the dont_touch attribute.\n Use the command on fully mapped logic only, including cells, modules, and designs, as well as nets with fully mapped surrounding logic.\n The dont_touch attribute has higher precedence over the boundary_optimization and the size_only attributes.\n To report design objects marked with the dont_touch attribute, use the report_dont_touch command.\n This command sets the dont_touch attribute on cell A.\n fc_shell> set_dont_touch [get_cells A] true 170 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback To remove the dont_touch attribute, use the remove_attributes command or the set_dont_touch command set to false, as shown in the following two commands: fc_shell> remove_attributes [get_cells A] dont_touch fc_shell> set_dont_touch [get_cells A] false The following table summaries the commands that you can use to set, remove, or report the dont_touch attribute on design objects, including modules, cells, nets, and library cells.\n Yes denotes the command operation of the dont_touch attribute is supported, while No denotes the command operation is not supported.\n Table 13 Command Support for the dont_touch Attribute on Design Objects Command Module Cell (Instance) Net Library cell set_dont_touch Yes Yes Yes Yes set_attribute Yes Yes Yes Yes define_user_attribute No No No No get_attribute Yes Yes Yes Yes remove_attributes Yes Yes Yes Yes report_dont_touch Yes Yes Yes No set_dont_touch unmapped_object No No Yes NA"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Automatic Group Bounds for Clock Gating Cells"}, {"role": "assistant", "content": "The tool can automatically generate group bounds for integrated clock gating cells and the sequential cells they drive.\n To do so, use the following application option setting: fc_shell> set_app_options -name place.coarse.icg_auto_bound \\ -value true When you enable this feature, the tool creates the automatic group bounds at the beginning of placement and removes them at the end of placement.\n The tool does not include cells that already belong to another group bound in the automatic group bounds.\n To limit the maximum number of fanouts that can be included in an automatic bound, use the icg_auto_bound_fanout_limit application option setting, as shown in the following example: fc_shell> set_app_options \\ -name place.coarse.icg_auto_bound_fanout_limit -value 30 The default fanout limit is 40.\n 154 Specifying Placement Settings Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Allowing Nonrelative Placement Cells"}, {"role": "assistant", "content": "By default, nonrelative placement cells are Not allowed within relative placement groups during coarse placement Allowed within relative placement groups during optimization and legalization To reduce congestion and improve QoR, you can allow the tool to place nonrelative placement cells within the unused areas of a specific relative placement group by using the -allow_non_rp_cells option with the set_rp_group_options command.\n You can add blockages to relative placement group by using the -blockage option with the add_to_rp_group command.\n By default, no cells are allowed within these blockages during placement, optimization, and legalization.\n To allow nonrelative placement cells within relative placement blockages and unused areas of a specific relative placement group, use the -allow_non_rp_cells_on_blockages option with the set_rp_group_options command.\n The following example allows nonrelative placement cells within the unused areas of the RP1 relative placement group: fc_shell> set_rp_group_options rp1 \\ -allow_non_rp_cells The following example allows nonrelative placement cells within the blockages and unused areas of the RP2 relative placement group: fc_shell> set_rp_group_options rp2 \\ -allow_non_rp_cells_on_blockages"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Comparing Libraries"}, {"role": "assistant", "content": "To compare libraries, perform the following steps: 1.\n Create a collection of the libraries you want to analyze, which is known as a libset, by using the create_libset command, as shown in the following example: fc_shell> create_libset -name myLibset -libs {abcd1.db abcd2.db} When you perform library analysis, you can specify the libset name, instead of specifying a list of libraries.\n In addition, the tool uses the libset name, instead of using a list of the library names, when it generates reports, plots, and so on during analysis.\n You can include a cell library in more then one libset.\n 2.\n Set up the library analysis environment by using the create_environment command.\n The create_environment command associates a predefined libset with a process label, process number, voltage, and temperature, which is then used for analyzing the libraries.\n You can specify the process label, process number, voltage, and temperature of the analysis environment by using one of the following methods: Specify the process label, process number, voltage, and temperature values by using the -ppvt option, as shown in the following example: fc_shell> create_environment -name env1 -libset myLibset \\ -ppvt {{SS1p, 1.0, 0.6, 125}} 93 Analyzing Libraries Feedback Specify a predefined operating condition from the reference library by using the -op_conds option, as shown in the following example: fc_shell> create_environment -name env2 -libset myLibset \\ -op_conds SS1p6125 Specify corners from which to infer the process label, process number, voltage, and temperature values by using the -corners option, as shown in the following example: fc_shell> create_environment -name env3 -libset myLibset \\ -corners nworst Specify that the tool infers the process label, process number, voltage, and temperature values from the scenario and UPF associated with the current design by using the -auto_infer_design option, as shown in the following example: fc_shell> create_environment -name env4 -libset myLibset \\ -auto_infer_design 3.\n (Optional) Specify a naming convention for library cells and perform lexical classification by using lexical attributes.\n A library cell naming convention can help the tool identify cell families in the subsequent steps of the flow.\n For example, assume a cell in your library is named AND2D4WSULVT.\n This name is the concatenation of the AND2, D4, WS, and ULVT strings, which represent cell characteristics that are associated to a lexical attribute as shown in the following table: Table 3 Lexical Attributes for the Naming Convention of an Example Library Column Lexical Attribute Allowed Pattern Values for Example Cell lexical_cell_prefix_name [a-zA-Z0-9]* AND2 lexical_drive1_name D[0-9]* D4 lexical_well_substrate_bias_arch itecure WS WS lexical_device_threshold_voltage ULVT | SVT | LVT | MVT ULVT 94 Analyzing Libraries Feedback You can specify the naming convention for this library by using the set_lib_cell_naming_convention command, as shown in the following example: fc_shell> set_lib_cell_naming_convention -library $lib \\ -column 1 -pattern {[a-zA-Z0-9]*} -attribute \"lexical_cell_prefix_name\" fc_shell> set_lib_cell_naming_convention -library $lib \\ -column 2 -pattern {D[0-9]*} -attribute \"lexical_drive1_name\" fc_shell> set_lib_cell_naming_convention -library $lib \\ -column 3 -pattern {WS} -attribute \"lexical_well_substrate_bias_architecure\" fc_shell> set_lib_cell_naming_convention -library $lib \\ -column 4 -pattern {ULVT|SVT|LVT|MVT} -attribute \"lexical_device_threshold_voltage\" Note: For a list of all the predefined lexical attributes, see the man page for the set_lib_cell_naming_convention command.\n After you specify the naming convention, perform lexical classification, by using the classify_lib_cell_attributes command as shown in the following example: fc_shell> classify_lib_cell_attributes -libset myLibset To report the lexical classification results, use the report_lib_cell_classification_attributes command.\n To report the library cells which are not lexical classified under the given naming convention, use the report_lexical_unclassified_lib_cells command.\n If there are lexically unclassified cells, specifies addition naming conventions and rerun lexical classification.\n 4.\n (Optional) Exclude specific cells from library analysis by using the set_use_for_library_analysis command.\n By default, the tool excludes physical-only cells during library analysis.\n However, you can exclude additional cells, such as library cells with a dont_use setting, as shown in the following example: fc_shell> set exclude_cells [filter_collection [get_lib_cells $libs/*] \"dont_use == true\"] fc_shell> set_use_for_library_analysis $exclude_cells false To report the cells that are excluded, use the report_lexical_ignored_lib_cells command.\n 5.\n Identify all library cell families by using the identify_lib_cell_families command.\n 95 Analyzing Libraries Feedback To report the tool-identified library cell families, use the report_lib_cell_families -all_initial command.\n To manually define library cell families, use the define_lib_cell_family command, and to report these user-defined cell families, use the report_lib_cell_families -all_userdef command.\n 6.\n Analyze the libraries by using the run_library_analysis command, as shown in the following example: fc_shell> run_library_analysis -name myLibset_run1 -environment env1 The name of the environment you specify with the -environment option must correspond to an environment you previously created by using the create_environment command.\n 7.\n Compare libraries by using the compare_libraries command.\n When doing so, you must specify the two libraries you want to compare by using the -ref_lib and -target_lib options.\n In addition, you must specify the name of the library analysis runs, performed by using the run_library_analysis command in the previous step, for each of these libraries.\n To do so use the -ref_lib_analysis and -target_lib_analysis options, as shown in the following example: fc_shell> compare_libraries -ref_lib $rvt_lib -ref_lib_analysis sa \\ -target_lib $lvt_lib -target_lib_analysis sa -verbose -plot When comparing libraries, you might encounter the following situations related to name matching between the cells of the reference and target libraries: The cell names in the reference and target libraries can be an exact match, as in the case when it is two different versions of the same library.\n If so, additional lexical classification is not required.\n The reference and target libraries can have the same naming convention, except less lexical attributes in one library.\n For example, assume a cell named ND2D1SVT in the reference library matches a cell named ND2D1 in the target library.\n In this case, the target library cell names do not contain a lexical_device_threshold_voltage attribute, as shown in the following table.\n Table 4 Reference and Target Library Lexical Attribute Differences Lexical Attribute Reference Library Target Library lexical_cell_prefix_name ND2 ND2 lexical_drive1_name D1 D1 96 Analyzing Libraries Feedback Lexical Attribute Reference Library Target Library lexical_device_threshold_voltage SVT In this situation, you should ignore the lexical_device_threshold_voltage attribute when comparing the two libraries.\n To do so, use the following application option settings before you run the compare_libraries command: fc_shell> set_app_options -name libra.complib.match_full_cell_name -value false fc_shell> set_app_options -name libra.complib.match_lexical_device_threshold_voltage -value false fc_shell> compare_libraries -ref_lib $rvt_lib -ref_lib_analysis sa \\ -target_lib $lvt_lib -target_lib_analysis sa -verbose -plot Note: For a complete list of application options you can use to control name matching during library comparison, see the man page for the compare_libraries command.\n The reference and target libraries can have a similar naming convention, but the lexical attributes values might not identical.\n For example, assume a cell named ND2D1SVT in the reference library matches a cell named nand2_svth_x1 in the target library.\n In this case, the reference and"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Implementing Clock Trees and Performing Post-CTS Optimization"}, {"role": "assistant", "content": "Before you perform clock tree synthesis, you should save the block.\n This allows you to refine the clock tree synthesis goals and rerun clock tree synthesis with the same starting point, if necessary.\n The following topics describe the different methods available for implementing clock trees: Performing Standalone Clock Trees Synthesis Synthesizing, Optimizing, and Routing Clock Trees With the clock_opt Command Controlling Concurrent Clock and Data Optimization 370 Implementing Clock Trees and Performing Post-CTS Optimization Feedback Splitting Clock Cells Balancing Skew Between Different Clock Trees Performing Global-Route-Based Optimization Using Machine Learning Data Routing Clock Trees Inserting Via Ladders During Clock Tree Synthesis, Optimization, and Clock Routing Marking Clocks as Propagated After Clock Tree Synthesis Performing Postroute Clock Tree Optimization Performing Voltage Optimization Marking Clock Trees as Synthesized Removing Clock Trees"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Incremental Signoff ECO Flow"}, {"role": "assistant", "content": "When you make ECO changes in the PrimeTime tool and incorporate these changes by performing the Fusion Compiler unconstrained ECO flow, it might be necessary to iterate multiple times between the tools to meet the required QoR goals.\n To reduce the overall turnaround time for the flow, you can reduce the runtime of each iteration by using the incremental signoff ECO flow.\n This flow generates incremental design data from the Fusion Compiler tool, which enables you to perform incremental extraction in the StarRC tool and incremental timing analysis and ECO in the PrimeTime tool, as shown in the following figure.\n 952 Incremental Signoff ECO Flow Feedback Figure 218 Incremental Signoff ECO Flow StarRC incremental parasitic extraction ECO change list file Fusion Compiler incremental signoff ECO flow PrimeTime timing ECO ECO change list file Incremental parasitics Incremental design data PrimeTime incremental timing analysis and ECO To perform the incremental signoff ECO flow within the Fusion Compiler tool, use the record_signoff_eco_changes command.\n This command incorporates the PrimeTime ECO into the design library, tracks all the changes made to the design, and generates the incremental files that are required to run StarRC incremental extraction and PrimeTime incremental timing analysis and ECO.\n The Fusion Compiler incremental signoff ECO flow consists of the following steps: 1.\n Open the design library by using the open_block command.\n 2.\n Incorporate the PrimeTime ECO changes and begin tracking the ECO changes to the design by using the record_signoff_eco_changes -start -input command as shown in the following example: fc_shell> record_signoff_eco_changes -start -input pt_eco.tcl 3.\n (Optional) Perform additional timing ECO changes to the design by using netlist editing commands.\n Do not perform functional ECO changes to the design.\n If you do so, the tool stops tracking the ECO changes being performed on the design.\n 953 ECO Fusion Flow Feedback 4.\n Place the ECO cells by using the place_eco_cells command.\n 5.\n Update the routing by using the route_eco command, as described in Performing ECO Routing, or by manually rerouting the affected nets.\n 6.\n Stop tracking the ECO changes and complete the incremental signoff ECO flow by using the record_signoff_eco_changes -stop command as shown in the following example: fc_shell> record_signoff_eco_changes -stop"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Advanced Legalization Algorithms"}, {"role": "assistant", "content": "To enable advanced legalization algorithms for 2D rule checking and cell interaction, which can reduce legalization runtime, set the place.legalize.enable_advanced_legalizer application option to true To specify additional advanced legalization rules that are not automatically detected, set the place.legalize.enable_advanced_legalizer_rules application option.\n When you enable the advanced legalization algorithms, by default, the tool aligns vertical pin shapes during pin access optimization to improve routability.\n However, you can specify additional strategies for pin access optimization by setting the place.legalize.optimize_pin_access_strategies application option as shown in the following table.\n Table 12 Settings for the place.legalize.optimize_pin_access_strategies Application Option To do this Use this setting Align horizontal pin shapes horizontal_align Move cells away from areas of high pin density avoid_high_pin_density Align horizontal pin shapes and move cells away from areas of high pin density horizontal_align avoid_high_pin_density During advanced legalization and legality checking, the tool can simultaneously check for DRC violations between multiple cells and PG net shapes.\n To enable this feature, set the place.legalize.enable_multi_cell_pnet_checks application option to true To enable multi cell checks at the last run of route_opt command or after the route_auto command, set the following application options to true.\n This helps to improve the runtime for QoR considerations.\n To enable the following application options, set the place.legalize.enable_multi_cell_pnet_checks application option to true place.legalize.enable_multi_cell_access_check : considers impact on a cell's pin access due to presence of abutting neighbor cells and any prerouted net PG net shapes in the vicinity.\n Default is false place.legalize.enable_multi_cell_track_capacity_check : analyzes the track capacity of the cell's pins and abutting neighbor cells.\n Track capacity estimates the sufficiency of routing tracks in the area to access all the specified pins.\n To enable this application option, set the place.legalize.enable_multi_cell_access_check application option to true.\n Default is false 164 Specifying Legalization Settings Feedback To enable multithreaded advanced legalization, perform the following steps: 1.\n Enable multithreaded advanced legalization algorithms by setting the place.legalize.enable_threaded_advanced_legalizer application option to true 2.\n Configure for multithreading as described in Configuring Multithreading To perform multithreaded advanced legality checking, 1.\n Enable advanced legalization algorithms by setting the place.legalize.enable_advanced_legalizer application option to true 2.\n Configure for multithreading as described in Configuring Multithreading 3.\n Perform legality checking using the check_legality command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Routing Corridors"}, {"role": "assistant", "content": "To report the routing corridors in your block, use the report_routing_corridors command.\n By default, the command reports all routing corridors; to report specific routing corridors, specify the routing corridors to report.\n By default, the command reports the following information for each routing corridor: its name; the shapes associated with the routing corridor, including their names, minimum routing layer, maximum routing layer, and boundary; the connectivity of the routing corridor shapes; and the nets and supernets associated with the routing corridor.\n To output a Tcl script that re-creates the routing corridors, use the -output option.\n To report the routing corridor for a specific net or supernet, use the get_routing_corridors command.\n When you run this command, you must use the -of_objects option to specify the nets of interest."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Integrated Subtree Synthesis"}, {"role": "assistant", "content": "In a structural multisource clock tree, the subtrees are driven directly by the clock mesh or through predefined drivers.\n These drivers are, in turn, driven by a global clock distribution structure such as a clock mesh or an H-tree.\n By using the compile_fusion command to synthesize and optimize the local subtrees of a structural multisource clock tree, you can improve the timing QoR of the design.\n 406 Implementing Multisource Clock Trees Feedback To implement a structural multisource clock tree using the integrated subtree synthesis capabilities, perform the following steps: 1.\n Specify your clock tree constraints and settings.\n 2.\n For multivoltage designs, Enable multivoltage support by using the following application option setting: fc_shell> set_app_options \\ -name cts.multisource.enable_full_mv_support -value true Enable the addition of physical feedthrough cells, which belong to a voltage area physically but not logically, by using the following application option setting: fc_shell> set_app_options \\ -name opt.common.allow_physical_feedthrough -value true Run the check_mv_design command and fix all multivoltage issues 3.\n Enable multicorner optimization by setting the cts.multisource.enable_multi_corner_support application option to true.\n The default is false By default, the tool uses the worst corner associated with the mode in which the subtree options are defined.\n When you enable this feature, the tool considers all corners associated with the mode in which the subtree options are defined.\n 4.\n Enable cell electromigration fixing by setting the cts.multisource.cell_em_aware application option to true 5.\n Create the clock mesh by using the create_clock_straps command, as described in Creating Clock Straps 6.\n Insert the mesh drivers by using the create_clock_drivers command, as described in Inserting Clock Drivers 7.\n Build the global clock tree structure by using the synthesize_multisource_global_clock_trees command, as described in Synthesizing the Global Clock Trees 8.\n Model the delays of the mesh nets by using the set_annotated_delay and set_annotated_transition commands.\n 9.\n Specify settings for local subtree synthesis by using the set_multisource_clock_subtree_options command.\n 407 Implementing Multisource Clock Trees Feedback You must specify The clock for synthesizing the subtrees by using the -clock option The drivers of the subtrees to be synthesized by using the -driver_objects option Optionally you can Prevent the tool from merging specific clock tree cells by using the -dont_merge_cells option Balance the levels of the local subtree by using the -balance_levels true option and specify a target number of levels, which applies to all sinks of the local subtree, by using the -target_level option Optionally, you can apply a different target number of levels to specific sink pins and clock balance points by using the set_multisource_clock_subtree_constraints command with the -pins and -target_level options.\n Specify a maximum total wire delay from any subtree driver to any of its sinks by using the -max_total_wire_delay option and the corner it applies to by using the -corner option Enable the reordering of clock-gating cells by using the -enable_icg_reordering true option When you enable this feature, the tool swaps the position of a clock-gating cell with the buffer that is driving the clock-gating cell.\n Then, the buffer is gated by the clock- gating cell, thereby reducing the dynamic power consumption.\n To perform reordering, you must Enable the scenarios used for structural multisource clock tree synthesis Annotate the switching activity for the enable pins of the clock-gating cells You can prevent specific clock-gating cells from being reordered by using the set_multisource_clock_subtree_constraints command with the -cells and -ignore_for_icg_reordering options.\n To report the settings you specified, use the report_multisource_clock_subtree_options command.\n To remove the settings you specified, use the remove_multisource_clock_subtree_options command.\n 10.\n Enable integrated structural multisource clock tree synthesis by setting the compile.flow.enable_multisource_clock_trees application option to true and build the local subtree by running the compile_fusion -from initial_place command.\n 408 Implementing Multisource Clock Trees Feedback fc_shell> set_app_options \\ -name compile_flow.flow.enable_multisource_clock_trees -value true fc_shell> compile_fusion -from initial_place 11.\n Route the connections between the clock mesh and the local subtrees by using the route_clock_straps command, as described in Routing to Clock Straps 12.\n Analyze the clock mesh by using the analyze_subcircuit command, as described in Analyzing the Clock Mesh 13.\n Enable integrated structural multisource clock tree synthesis by setting the clock_opt.flow.enable_multisource_clock_trees application option to true and synthesize the entire clock tree from the clock root by using the clock_opt -from build_clock -to route_clock command.\n fc_shell> set_app_options \\ -name clock_opt.flow.enable_multisource_clock_trees -value true fc_shell> clock_opt -from build_clock -to route_clock During this step, the tool incrementally optimizes the existing subtrees.\n 14.\n Analyze the clock tree results as described in Analyzing the Clock Tree Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Redundant Vias on Clock Nets"}, {"role": "assistant", "content": "Zroute can insert redundant vias on clock nets either during or after routing.\n This topic describes how to insert redundant vias during clock routing.\n For information about postroute redundant via insertion, see Postroute Redundant Via Insertion To insert redundant vias on clock nets during clock routing, 1.\n Specify the redundant vias in a nondefault routing rule by using the create_routing_rule command, as described in Specifying Nondefault Vias Be sure to consider both DFM and routing when you select the redundant vias; otherwise, if you select the redundant vias based only on DFM considerations, you could negatively impact the routability.\n In addition to using nondefault routing rules to define the redundant vias for clock nets, you can also use them to define stricter wire width and spacing rules and to define the tapering distance.\n For more information about nondefault routing rules, see Using Nondefault Routing Rules 2.\n Assign the nondefault routing rule to the clock nets by using the set_clock_routing_rules command.\n fc_shell> set_clock_routing_rules -rules clock_via_rule 3.\n Run clock tree synthesis.\n fc_shell> synthesize_clock_trees 4.\n Route the clock nets.\n fc_shell> route_group -all_clock_nets \\ -reuse_existing_global_route true Zroute reserves space for the redundant vias during global routing and inserts the redundant vias during detail routing."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Restricting Optimization on the Clock Network"}, {"role": "assistant", "content": "You can restrict the optimization on portions of the clock network by specifying Don't touch settings These settings identify parts of the clock tree on which clock tree synthesis and optimization is not performed.\n You can use don't touch settings to prevent the modification of a clock network beyond a specific pin, the buffering of specific nets, or the sizing of specific cells.\n For information about defining don't touch settings, see Setting Don't Touch Settings Size-only settings These settings identify clock tree cells for which the tool can perform only cell sizing.\n Note that these cells can be moved, unless they have a placement status of fixed.\n For information about defining size-only settings, see Setting Size-Only Settings"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Changes to a Script With Checkpoints"}, {"role": "assistant", "content": "When running experiments on a block, you might might modify your golden flow scripts in two ways: By making flow changes, such as setting application options, modifying constraints, or making other changes to improve the quality of results By generating reports (either additional reports or reports at new places in the flow) to help debug an issue In most flows, you apply changes through a small number of static, modifiable files.\n Here is a typical example to run the place_opt flow, where you source a pre_place_opt_settings.tcl file to add flow changes and a generate_reports.tcl file to run all your reporting at the end of the script: open_block./design:init_design source./scripts/pre_place_opt_settings.tcl remove_buffer_trees -all place_opt -from initial_place -to initial_drc create_placement -incremental -timing_driven -congestion place_opt -from initial_drc -to -initial_opto place_opt -from final_place -to final_opto source./scripts/generate_reports.tcl In some cases, complex changes require modifying your golden flow script directly, which might be discouraged or difficult to do in many design environments.\n These changes can be time consuming to implement, especially if you are implementing them at multiple stages in the design flow, across multiple blocks, or for several different flow experiments.\n The checkpoint system streamlines this process and allows you to run experiments without modifying your golden flow scripts.\n When you use the checkpoint system, you define checkpoints for important steps in your golden flow.\n These checkpoints enwrap the commands associated with the given steps.\n By default, the checkpoints run only the code they enwrap.\n That is, simply inserting checkpoints in your script does not change your flow.\n However, you can associate these checkpoints with flow changes or reports that you want to run before, after, or in place of the code the checkpoints enwrap.\n By defining these 51 Adding Changes to a Script With Checkpoints Feedback associations in a portable configuration file, you isolate your golden flow scripts from the changes you want to apply for a particular run.\n The following figure shows how you can use checkpoints to instantly apply a set of flow changes or reports to multiple designs, without modifying each design's golden flow script.\n In this case, the configuration file has been copied to each design's run directory.\n In addition, when multiple users are working on a project, each user can have an individual checkpoint.config.tcl file with his or her preferred settings: The checkpoint system also allows you to Insert flow changes and reports with more precision than you could using a typical non- checkpointed flow script Reference a single source of truth where you can find all changes that have been applied to your default golden flow Report a history of the checkpoints that were run, including the flow changes or reports that were run at those checkpoints 52 Adding Changes to a Script With Checkpoints Feedback Report runtime and memory information for each checkpoint that was run Generate unique and descriptive report names The general process for using the checkpoint system is as follows: 1.\n Insert checkpoints in your script 2.\n Configure your checkpoints by Defining the flow changes or reports you want to associate with the checkpoints Associating the flow changes or reports you defined with your checkpoints 3.\n Run your script."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Hierarchical Synthesis Flow When Floorplans are not Available"}, {"role": "assistant", "content": "To partition and plan the top-level design and create the lower-level blocks for subsequent bottom-up synthesis, when the floorplans of subblock and top-level design are not available, perform the following steps: Figure 187 Hierarchical Synthesis Flow When Floorplans are not Available 1.\n Read in the full chip design and apply constraints as shown in the following example: fc_shell> set REF_LIBS \"stdcell.ndm macro.ndm\" fc_shell> create_lib TOP -technology techfile \\ -ref_libs $REF_LIBS fc_shell> analyze -format verilog $rtl_files fc_shell> elaborate TOP fc_shell> set_top_module TOP fc_shell> load_upf fullchip.upf fc_shell> read_sdc fullchip.sdc 2.\n Identify the design partitions and split the constraints as shown in the following example: fc_shell> set_budget_options -add_blocks {BLOCK1 BLOCK2} fc_shell> split_constraints 3.\n Create the subblock design libraries with design information and enable block-specific reference library setup as shown in the following example: fc_shell> copy_lib -to_lib BLOCK1.nlib -no_design fc_shell> copy_lib -to_lib BLOCK2.nlib -no_design 819 Performing Hierarchical Synthesis Using Abstracts Feedback fc_shell> set_attribute -objects BLOCK1.nlib \\ -name use_hier_ref_libs -value true fc_shell> set_attribute -objects BLOCK2.nlib \\ -name use_hier_ref_libs -value true fc_shell> save_lib -all 4.\n Create the subblock design partitions as shown in the following example: fc_shell> commit_block -library BLOCK1.nlib BLOCK1 fc_shell> commit_block -library BLOCK2.nlib BLOCK2 fc_shell> save_lib -all 5.\n Load the UPF and SDC constraints for the unmapped subblocks and the top-level, which are generated by the split_constraints command earlier as shown in the following example: fc_shell> set_constraint_mapping_file./split/mapfile fc_shell> load_block_constraints -all_blocks -type SDC \\ -type UPF -type CLKNET fc_shell> save_lib -all 6.\n Run the compile_fusion command until logic optimization with auto floorplanning for sub blocks is complete as shown in the following example: fc_shell> compile_fusion -to logic_opto 7.\n Run the compile_fusion command until technology mapping for the top-level design is complete as shown in the following example: fc_shell> compile_fusion -to initial_map 8.\n Perform design planning operations starting from floorplan initialization, subblock and voltage area shaping, hard macro and standard cell placement, power network creation until pin assignment.\n 9.\n Run the compile_fusion command until logic optimization for the top-level design is complete as shown in the following example: fc_shell> compile_fusion -from logic_opto -to logic_opto 10.\n Perform incremental top-level only standard cell placement as shown in the following example: fc_shell> create_placement -floorplan -use_seed_locs 11.\n Perform timing estimation and budgeting steps to generate the block budgets needed for block level implementation.\n 12.\n After completing the design planning operations, rebuild the subblock and top-level design by opening the elaborated RTL NDM, loading floorplan, feedthroughs and budgets.\n 820 Performing Hierarchical Synthesis Using Abstracts Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Changing the Structures of Relative Placement Groups"}, {"role": "assistant", "content": "To modify the structures of existing relative placement groups, use the modify_rp_groups command as follows: To add a row or column to a relative placement group, use the -add_rows or -add_columns option respectively.\n To remove a row or column, use the -remove_rows or -remove_columns option respectively.\n To flip a row or column, use the -flip_row or -flip_column option respectively.\n To swap two rows or columns, use the -swap_rows or -swap_columns option respectively.\n For example, to swap the first and third columns of the my_rp_group relative placement group, as shown in Figure 183, enter fc_shell> modify_rp_groups [get_rp_groups my_rp_group] \\ -swap_columns {0 2} Figure 183 Swapping Columns of a Relative Placement Group Col 0 Col 1 Col 2 Col 0 Col 1 Col 2 Row 2 Row 2 Row 1 Row 1 Row 0 Row 0 C00 C01 C02 C21 C20 C22 C20 C21 C22 C01 C00 C02 807 Generating Relative Placement Groups for Clock Sinks Feedback To flip the second column of the my_rp_group relative placement group, as shown in Figure 184, enter fc_shell> modify_rp_groups [get_rp_groups my_rp_group] \\ -flip_column 1 Figure 184 Flipping a Column of a Relative Placement Group Col 0 Col 1 Col 2 Col 0 Col 1 Col 2 Row 2 Row 2 Row 1 Row 1 Row 0 Row 0 C10 C11 C12 C12 C11 C10"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Example Script of Hierarchical Synthesis Using ETMs"}, {"role": "assistant", "content": "The following script shows an example of the hierarchical synthesis flow: # Specify reference libraries set REF_LIBS ${std_cell}.ndm lappend REF_LIBS ${block_design}_etm.ndm create_lib -tech ${TECH_FILE} -ref_libs $REF_LIBS ${DESIGN_NAME} # Read the RTL design analyze -format verilog [list $rtl_list] elaborate ${DESIGN_NAME} #ETM.ndm in ref_lib is used to link cell instances set_top_module ${DESIGN_NAME} # Load UPF for ETM cell instance load_upf ${block_design}.upf -scope cell_instance # Read test model for ETM cell instance read_test_model ${block_design}.mapped.ctl...\n compile_fusion -to initial_opto # Query commands # List all macro cell instances get_cells -hierarchical -filter \"is_hard_macro == true\" # ref view name is \"timing\" for cell instances bound to ETM get_attribute ${CELL} is_etm_moded_cell"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing the Clock Mesh"}, {"role": "assistant", "content": "To reduce skew variation, clock mesh structures require higher timing accuracy than traditional clock structures.\n Therefore, to analyze a clock mesh structures, use the analyze_subcircuit command, which performs transistor level circuit simulation for the clock mesh and back-annotates accurate timing information.\n Before you run the analyze_subcircuit command, you must Detail route the clock mesh net.\n Have a circuit-level model for each of the gates in your clock tree and a transistor model for each of the transistors in the circuit-level models.\n Have access to a SPICE simulator such, as NanoSim, FineSim, or HSPICE.\n 423 Implementing Multisource Clock Trees Feedback For the analyze_subcircuit command, you must specify The clock mesh net you want to simulate by using the -net option.\n Alternatively, you can specify the sinks of the mesh net by using the -to option.\n If multiple clocks reach the net or the sinks you specify, use the -clock option to distinguish the clock you want to analyze.\n A name by using the -name option.\n This name is used to construct the circuit elements.\n It is also used in the name of the output files and the directory where the output is stored.\n Optionally you can specify an annotated transition on the clock port or the start point of your clock mesh.\n If you do so, the clock must be specified as propagated by using the set_propagated_clock command.\n When you run the analyze_subcircuit command, the tool performs the following steps: 1.\n Performs RC extraction and generates parasitic files.\n You can run extraction as a standalone step by using the -extraction option.\n 2.\n Generates SPICE files for simulating the clock mesh, using the parasitic files from the previous step as input.\n You can generate the SPICE files as a standalone step by using the -create_spice_deck option.\n When you do so, you can use parasitic files generated by a different extraction tool.\n If these parasitic files have a different naming convention, you can specify the appropriate file suffix by using the -spef_input_file_suffix and -rc_include_file_suffix options.\n 3.\n Runs SPICE simulation, using the SPICE files generated in the previous step as input.\n By default, the tool uses the NanoSim simulator.\n You can use the FineSim or HSPICE simulators by using the finesim or hspice setting with the -simulator option.\n You must specify the location of the circuit-level and transistor-level models by using the -driver_subckt_files and -spice_header_files options.\n You customize these settings by specifying different files for the maximum and minimum conditions within each scenario by using the -configuration option.\n You can run simulation as a standalone step by using the -run_simulation option.\n 4.\n Generates timing annotation files containing set_disable_timing set_annotated_delay, and set_annotated_transition commands, using the simulation results as input.\n 424 Implementing Multisource Clock Trees Feedback For clock mesh nets, which have multiple drivers, the set_disable_timing command is used to disable all except one of the drivers, which is called the anchor driver.\n The annotated net delay arcs are defined from the anchor driver.\n You can generate the timing annotation files as a standalone step by using the -write_annotation option.\n 5.\n Applies the annotation files generated in the previous step.\n You can apply the annotation files as a standalone step by using the -apply_annotation option.\n If you want to run some of the steps of the mesh analysis flow, such as extraction or SPICE simulation, using other tools, you can do so and run the rest of the steps of the flow using the standalone options of the analyze_subcircuit command, following the same sequence.\n The following example analyzes the clock mesh net named clk_mesh using the HSPICE simulator.\n It customizes the simulation by using different files for the minimum and maximum conditions of each scenario.\n fc_shell> analyze_subcircuit -net clk_mesh \\ -driver_subckt_files max_spice_model \\ -spice_header_files header_file \\ -configuration { \\ {-scenario_name scenario1 \\ -max_driver_subckt_files max_file1 \\ -max_spice_header_files header_max1 \\ -min_driver_subckt_files min_file1 \\ -min_spice_header_files header_min1} \\ {-scenario_name scenario2 \\ -max_driver_subckt_files max_file2 \\ -max_spice_header_files header_max2 \\ -min_driver_subckt_files min_file2 \\ -min_spice_header_files header_min2}} -simulator hspice \\ -name clk_mesh_analysis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Rail Analysis Using RedHawk-SC Fusion"}, {"role": "assistant", "content": "Similar to the RedHawk Fusion capability, RedHawk-SC Fusion supports gate-level rail analysis and checking capabilities in the Fusion Compiler environment.\n To enable the RedHawk-SC Fusion capability, you need to enable the rail.enable_redhawk_sc application option and disable the rail.enable_redhawk application option at the same time.\n For more information about RedHawk-SC Fusion, see Setting Up the Executables and Specifying RedHawk and RedHawk-SC Working Directories RedHawk Fusion and RedHawk-SC share the same set of analysis and checking commands for rail analysis, and the same GUI for examining the analysis results, except for some limitations.\n Table 65 compares the analyze_rail options that are supported in either or both of RedHawk Fusion and RedHawk-SC Fusion.\n Table 65 Comparing Analysis Features Between RedHawk Fusion and RedHawk-SC Fusion RedHawk Fusion RedHawk-SC Fusion -redhawk_script_file Supported Supported -voltage_drop Supported Supported -switching_activity Supported Supported 868 Running Rail Analysis Using RedHawk-SC Fusion Feedback Table 65 Comparing Analysis Features Between RedHawk Fusion and RedHawk-SC Fusion (Continued) RedHawk Fusion RedHawk-SC Fusion -electromigration Supported Supported -power_analysis Supported Supported -result_name Supported Supported -script_only Supported Supported -bg Supported Supported -min_path_resistance Supported Supported together with the -voltage_drop option only -effective_resistance Supported Supported together with the -voltage_drop -option only -check_missing_via Supported Supported together with the -voltage_drop option only Displaying missing via check results does not honor the IR threshold setting.\n -extra_gsr_option_file Supported Not supported -multiple_script_files Supported Not supported -submit_to_other_machines Supported Not supported Before performing rail analysis using the RedHawk-SC Fusion capability, you must specify the location of the libraries and the required input files as described in Preparing Design and Input Data for Rail Analysis.\n The following two application options are available only in RedHawk-SC Fusion: rail.toggle_rate Specify toggle rates for different cell types for rail analysis.\n For example: fc_shell> set_app_options -name rail.toggle_rate \\ -value {clock 2.0 data 0.2 combinational 0.15 \\ sequential 0.15} 869 An Overview for RedHawk Fusion and RedHawk-SC Fusion Feedback rail.em_only_tech_file Specify the electromigration rule file for performing PG electromigration analysis.\n Use this option when the electromigration rule information is defined in a separate technology file other than the one specified by the rail.tech_file application option.\n For example, fc_shell> set_app_options -name rail.em_only_tech_file \\ -value EM_ONLY.rule"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining the Search Path"}, {"role": "assistant", "content": "The Fusion Compiler tool uses a search path to look for files that are specified with a relative path or with no path.\n To specify the search path, use the set_app_var command to set the search_path application variable to the list of directories, in order, in which to look for files.\n When the tool looks for a file, it starts searching in the leftmost directory specified in the search_path variable and uses the first matching file it finds.\n You can also use the Tcl lappend command to add your directories to the default search path, which is the directory from which you invoked the tool.\n For example, fc_shell> lappend search_path./mylibdir"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Leakage Power"}, {"role": "assistant", "content": "To check your leakage power, use the report_power command.\n By default, state- dependent leakage power is used to calculate leakage power.\n To change the leakage power calculation mode, set the power.leakage_mode application option.\n For example, to set the application option to average do the following: fc_shell> set_app_options -name power.leakage_mode -value average To report threshold voltage usage, use the report_threshold_voltage_groups command.\n Classification is based on the threshold_voltage_group attribute from the reference library cells or the default_threshold_voltage_group attribute on the library.\n You can also set the attributes on the objects by using the set_attribute command.\n You can generate several types of reports with the report_threshold_voltage_groups command.\n For example, the summary report (using the -summary option) lists the number, area, and percentage of cells in each threshold voltage group.\n The default report (without using any options) shows the cell count and area based on the following groups: repeater, combinational, register, sequential, clock network, and physical-only cells.\n For the repeater, register, and clock network cell groups, you can obtain additional information by using the -detailed option.\n The -hierarchy option of the report_threshold_voltage_groups command generates a report based on the design hierarchy.\n The report shows the cell count, area, and area ratio for a top-level block and its subblocks.\n The -hierarchy option is mutually exclusive with the other report types, but can be used with the -datapath_cells_only and -standard_cells_only options.\n You can restrict the hierarchy-based report to specific threshold voltage groups by using the -hier_vt_groups option.\n You can also specify to report only the top-level cells that contain more than a specified number of constituent cells by using the -hier_threshold option.\n These options must be used with the -hierarchy option.\n If you specify a cell list, a separate report is created for each top-level cell in the list.\n 190 Setting Up for Power-Related Features Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Test Insertion and Scan Synthesis"}, {"role": "assistant", "content": "Fusion Compiler test synthesis solution enables transparent implementation of DFT capabilities into the Synopsys synthesis flow without interfering with functional, timing, signal integrity, or power requirements.\n The test solution for Fusion Compiler consists of two stages: Scan Synthesis Flow Minimizing Glitches on Asynchronous Set and Reset Lines of Scan Registers 258 Performing Test Insertion and Scan Synthesis Feedback Benefits of two-stage test insertion include Better timing, area, power, and congestion QoR for logic and DFT synthesis at the same time Better integration of power intent and DFT logic Improved congestion optimization that considers the placement for compressor and decompressor (codec) test logic Eliminating the incremental compile step to synthesize and place the DFT logic"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Making Changes to a Block After Creating an Abstract"}, {"role": "assistant", "content": "When you create an abstract view for a block with the create_abstract command, by default, the tool saves both the abstract and design views of the block and changes the design view to read-only.\n 837 Creating a Frame View Feedback You can open a read-only block and make changes to it in-memory, but you cannot save these changes by using the save_block or save_lib command.\n To save the change you make to a read-only block, use one of the following methods: Save it as a different block by using the save_block -as command.\n Re-create an abstract for the block by using the create_abstract command.\n The tool then automatically saves the design view.\n Remove the abstract by using the remove_abstract command, if you no longer need the abstract.\n This changes the design view from being read-only to editable, and you can save the block by using the save_block or save_lib command.\n If you create a read-only abstract by using the create_abstract -read_only command, the tool does not make the design view of the block read-only and you can save any subsequent changes to the block by using the save_block or save_lib command, as shown in the following example: fc_shell> create_abstract -read_only fc_shell> change_link [get_cells U25] AND2 fc_shell> save_block"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Pattern-Based Metal Fill Insertion"}, {"role": "assistant", "content": "Pattern-based metal fill insertion is the default mode for the signoff_create_metal_fill command.\n It inserts metal and via fill by using a foundry runset.\n Before running the signoff_create_metal_fill command, you must specify the runset by setting the signoff.create_metal_fill.runset application option.\n During pattern-based metal fill insertion, the signoff_create_metal_fill command performs the following tasks: 1.\n Loads the block into the IC Validator tool, as described in Reading Blocks for Signoff Metal Fill Insertion 2.\n Removes existing metal and via fill By default, the command removes the metal and via fill from the entire block.\n For information about performing incremental metal fill insertion, see Incremental Metal Fill Insertion 3.\n Inserts metal and via fill in the empty regions By default, the command uses the spacing rules defined in the technology file to perform metal fill insertion on all metal and via layers for the entire block.\n The 711 Inserting Metal Fill With IC Validator In-Design Feedback command uses the metal fill mode specified in the runset file, which is either hierarchical or flat.\n To modify the default behavior, Set one or more of the following application options before running the signoff_create_metal_fill command: signoff.create_metal_fill.apply_nondefault_rules To enable the use of nondefault spacing rules in addition to the spacing rules defined in the technology file, set this application option to true signoff.create_metal_fill.flat To force the use of the flat metal fill mode, set this application option to true Use one or more of the following command options with the signoff_create_metal_fill command: -select_layers or -all_runset_layers To restrict the layers on which to insert metal fill, use these options, as described in Specifying the Layers for Metal Fill Insertion -coordinates and -excluded_coordinates To restrict the regions on which to insert metal fill, use these options, as described in Specifying the Regions for Metal Fill Insertion 4.\n Removes floating via fill from the specified via layers and from the via layers associated with the specified metal layers Floating via fill is via fill that does not have both an upper and lower metal enclosure.\n 5.\n Saves the fill data in the design view 6.\n Writes the result files to the run directory For information about the generated result files, see Signoff Metal Fill Result Files See Also Timing-Driven Metal Fill Insertion 712 Inserting Metal Fill With IC Validator In-Design Feedback Reading Blocks for Signoff Metal Fill Insertion By default, the IC Validator tool reads the design view for the top-level block and the library cell instances, and the pin information from the frame view for the macro cell and I/O pad cell instances.\n To read the GDSII or OASIS data for specific reference cells, specify the stream files by setting the signoff.physical.merge_stream_files application option.\n When you use this option, the GDSII or OASIS data replaces the cell library view for the cells defined in the specified stream files, except for cells in the cell libraries specified with the signoff.physical.merge_exclude_libraries application option.\n To read the layout view for specific reference cells, specify the cells by setting the signoff.create_metal_fill.read_layout_views application option.\n The layout view is identical to the GDSII or OASIS data that was used to create them, but reduces the runtime for signoff design rule checking.\n Note: By default, layout views are not included in the cell libraries To save the layout views, you must set the lib.workspace.save_layout_views application option to true during library preparation, as described in the Library Manager User Guide To read the design view for specific reference cells, specify the cells by setting the signoff.create_metal_fill.read_design_views application option.\n Note: By default, design views are not included in the cell libraries To save the design views, you must set the lib.workspace.save_design_views application option to true during library preparation, as described in the Library Manager User Guide The order of precedence for child cell data is 1.\n GDSII or OASIS data specified with the signoff.physical.merge_stream_files application option 2.\n Layout views specified with the signoff.create_metal_fill.read_layout_views application option If the IC Validator tool cannot find a layout view and the cell is specified in the signoff.check_drc.read_design_views application option, it reads the design view.\n Otherwise, it reads the frame view.\n If it cannot find the frame view, the cell is ignored during design rule checking.\n 713 Inserting Metal Fill With IC Validator In-Design Feedback 3.\n Design views specified with the signoff.create_metal_fill.read_design_views application option If the IC Validator tool cannot find a design view, it reads the frame view instead.\n If it cannot find the frame view, the cell is ignored during design rule checking.\n 4.\n Frame views Specifying the Layers for Metal Fill Insertion By default, the signoff_create_metal_fill command inserts metal fill on all the metal routing layers and via fill on all the via layers.\n To modify the layers for metal fill insertion, use one of the following options: -select_layers metal_fill_layers This option restricts metal fill insertion to the specified set of metal and via layers.\n -all_runset_layers true This option enables metal fill insertion on all the fill layers specified in the runset.\n This option applies only to pattern-based metal fill insertion.\n When you specify the layers for metal fill insertion, the signoff_create_metal_fill command 1.\n Removes the existing metal and via fill from the block By default, the command removes all existing metal and via fill.\n For incremental metal fill insertion, the command removes metal and via fill only from the specified layers.\n 2.\n Inserts metal and via fill only on the specified layers 3.\n Removes floating via fill from the specified via layers and from the via layers associated with the specified metal layers For example, if you specify -select_layers {M2}, the tool removes floating via fill from the V1 and V2 layers.\n 714 Inserting Metal Fill With IC Validator In-Design Feedback Specifying the Regions for Metal Fill Insertion By default, the signoff_create_metal_fill command inserts metal and via fill for the whole chip.\n To modify the regions for metal fill insertion, use one or both of the following options: -coordinates This option restricts metal fill insertion to the specified regions.\n Note: The bounding box coordinates passed to the IC Validator tool in the METAL_FILL_SELECT_WINDOW parameter are enlarged by 1 um to avoid DRC violations on the boundary of the specified regions during metal fill insertion.\n The actual metal fill insertion occurs within the regions specified by the -coordinates option.\n In addition, when you use the -coordinates option, the signoff_create_metal_fill command always uses the flat metal fill mode.\n -excluded_coordinates This option prevents metal fill insertion in the specified regions.\n If you specify this option with the -coordinates option, the command does not perform metal fill insertion in the overlapping regions.\n To specify the coordinates, use the following format: {{x } {x }...\n {x }} Note that there must be a space between each set of coordinates.\n When you specify the regions for metal fill insertion, the signoff_create_metal_fill command 1.\n Removes all existing metal and via fill from the block For standard metal fill insertion, the command removes all existing metal and via fill.\n For incremental metal fill insertion, the command removes metal and via fill only from the specified regions.\n 2.\n Inserts metal and via fill only on the specified regions 3.\n Removes floating via fill from the specified regions For example, to remove all metal fill from the block and then fill all empty regions outside the bounding box with corners at (100,150) and (300,200), use the following command: fc_shell> signoff_create_metal_fill \\ -excluded_coordinates {{100 150} {300 200}} 715 Inserting Metal Fill With IC Validator In-Design Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using a DDR Routing Flow"}, {"role": "assistant", "content": "This topic describes how to use Custom Router to perform routing on a double data rate (DDR) design.\n Figure 165 illustrates the basic steps to create interconnects (routes) between a DDR net and the core.\n 776 Using a DDR Routing Flow Feedback Figure 165 A Basic DDR Flow Prepare input data Run custom routing Insert buffer cells Run ECO routing Define single-loop lengthening Trimming Define net bundles Define and apply routing rules route_custom -nets Set the length match route_custom -nets add_buffer_on_route route_eco -nets route_detail -incremental remove_redundant_shapes create_bundle create_routing_rule set_routing_rule Run custom routing create_wire_matching To perform routing on a DDR design with Custom Router, 1.\n Before you run Custom Router to perform routing on a DDR design, Group the nets as a bundle for length matching.\n fc_shell> create_bundle -name GRP1 [get_nets $nets] Create and apply the routing rules for the DDR nets.\n fc_shell> create_routing_rule DDR -widths { layer value \u2026} \\ -spacings { layer value \u2026 } fc_shell> set_routing_rule -rule DDR -min_routing_layer M4 \\ -max_routing_layer M5 $all_ddr_nets 777 Using a DDR Routing Flow Feedback Set two or more layers for initial routing and length matching.\n For postroute length matching, you should include two additional layers.\n For example, if you use the M4 and M5 layers for initial routing, set the M3, M4, M5, and M6 layers for postroute length matching.\n Add routing blockages as needed.\n Add routing blockages to prevent Custom Router from routing in the area that is covered by placement blockages.\n This helps avoid possible unplaceable buffers during buffer insertion.\n 2.\n Create routes for the DDR nets by running the route_custom command.\n fc_shell> route_custom -nets $all_ddr_nets 3.\n Define the routing constraints.\n Use the following application options to set the single-loop constraints.\n fc_shell> set_app_options \\ -name custom.route.single_loop_match -value true fc_shell> set_app_options \\ -name custom.route.single_loop_match_min_spacing -value 0.75 fc_shell> set_app_options \\ -name custom.route.single_loop_match_max_spacing -value 10.0 fc_shell> set_app_options \\ -name custom.route.single_loop_match_offset_layer -value true Set the wire matching constraint for the group.\n fc_shell> create_wire_matching -for [get_bundles GRP1] \\ -match_type length -tolerance 20 -force match1 fc_shell> create_wire_matching -for [get_bundles GRP2] \\ -match_type length -tolerance 20 -force match2 Set the bounding box for the wire matching routing constraint.\n fc_shell> set_app_options -name custom.route.match_box \\ -value {{1000 1000} {1500 1500}} By default, the bounding box coordinates are set to {{0 0} {0 0}}.\n When set to other values, the router limits matching routes to the area inside the box, which might result in connections that do not meet the matching constraint.\n The matching box should cover the entire available channel space.\n 4.\n Perform custom routing with length matching.\n fc_shell> route_custom -nets [get_bundles {GRP1}] 778 Using a DDR Routing Flow Feedback If you define multiple matching boxes at step 3, you need to run the route_custom command on each matching box.\n 5.\n Report the list of mismatching nets.\n grep \"Mismatch\" log_file 6.\n Reduce the number of the mismatched nets (if any) by using one of the following methods: Rebalance the net routing of one or more groups in the same channel among the available routing layers by a.\n Resetting the routing layers.\n For example, - Set the routing layers for route group A to the M3 and M4 layers, and for group B to the M5 and M6 layers, or - Set the routing layers for route groups A and B to the M3 and M4 layers, and route all mismatched nets on the M5 and M6 layers.\n b.\n Rerunning initial routing with the rebalanced routing layer settings.\n Set a larger value for the custom.route single_loop_match_max_spacing application option.\n Allow different layers for the single loop.\n fc_shell> set_app_options \\ -name custom.route.single_loop_match_offset_layer -value true 7.\n Insert buffer cells on the routed DDR net.\n In the following example, ddr_BUF is used as the prefix for the names of the added ECO nets and buffers for easy identification.\n The buffer cells are added at an interval that is 20 percent of the total net length.\n fc_shell> set ddr_buf \"BUF001\" fc_shell> add_buffer_on_route -net_prefix ddr_BUF \\ -cell_prefix ddr_BUF \\ -repeater_distance_length_ratio 0.2 \\ -respect_blockages [get_nets $ddr_nets] $ddr_BUF 8.\n Perform legalization and verify that the placement is legal.\n fc_shell> legalize_placement -cells $ddr_BUF fc_shell> check_legality -cells $ddr_BUF 779 Using a DDR Routing Flow Feedback Note: Using the -cells option with the legalize_placement and check_legality commands is supported only in the standard legalizer.\n 9.\n Preserve the route shapes of the clock nets by setting the shape_use attribute of the clock nets to user_route fc_shell> set_attribute [get_shapes -of_object $all_nets] \\ shape_use \"user_route\" fc_shell> set_attribute [get_vias -of_object $all_nets] \\ shape_use \"user_route\" 10.\n Limit rerouting to minor changes by setting the physical_status attribute on the nets to minor_change fc_shell> set_attribute [get_shapes -of_object $all_nets] \\ physical_status \"minor_change\" fc_shell> set_attribute [get_vias -of_object $all_nets] \\ physical_status \"minor_change\" 11.\n Run ECO routing to reconnect the nets by using the route_eco command.\n fc_shell> route_eco -nets $all_nets -reroute modified_nets_only 12.\n Run incremental detail routing to fix the DRC violations by running the route_detail -incremental true command.\n After routing is complete, clean up the routed nets by running the remove_redundant_shapes command.\n fc_shell> set_attribute \\ [get_shapes -of_object $all_nets] shape_use \"detail_route\" fc_shell> set_attribute \\ [get_vias -of_object $all_nets] shape_use \"detail_route\" fc_shell> route_detail -incremental true fc_shell> remove_redundant_shapes -nets $all_nets 13.\n Check the routing results by using one of the following methods: Check for DRC violations.\n fc_shell> check_routes By default, the tool checks for DRC violations between signal shapes.\n To check for DRC violations between signal shapes and user shapes, use the following command: fc_shell> check_routes -check_from_user_shapes true View the ECO nets and buffers in the GUI.\n Report the lengths of the DDR nets and the ECO nets.\n 780 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Automatically Adding Spare Cells"}, {"role": "assistant", "content": "After placement and optimization, you can add spare cells and legalize them by using the following steps: 1.\n Add spare cells by using the add_spare_cells command and specify the following information: A name prefix for the spare cells by using the -cell_name option The type and number of spare cells to insert by using one of the following two methods: Specify the library cells to use for the spare cell and the number of instances of each library cell by using the -lib_cell and -num_instances options For example, to insert 250 instances each of the AND2 and OR2 library cells, use the following command: fc_shell> add_spare_cells -cell_name spare \\ -lib_cell {AND2 OR2} -num_instances 250 Specify the library cells and a different number of instances for each library cell by using the -num_cells option For example, to insert 200 instances of the NAND2 library cell and 150 instances of the NOR2 library cell, use the following command: fc_shell> add_spare_cells -cell_name spare \\ -num_cells {NAND2 200 NOR 150} (Optional) A repetitive placement window in which to add the spare cells by using the -repetitive_window option For example, to add 15 instances each of the AND2 and OR2 library cells in a 20 by 20 micron window that is repeated throughout the placement area, use the following command: fc_shell> add_spare_cells -cell_name spare \\ -lib_cell {AND2 OR2} -num_instances 15 \\ -repetitive_window {20 20} To add 20 instances of the NAND2 and 15 instances of the NOR2 library cells in a 25 by 20 micron window that is repeated throughout the placement area, use the following command: fc_shell> add_spare_cells -cell_name spare \\ -num_cells {NAND2 20 NOR 15} -repetitive_window {25 20} 958 Automatically Adding Spare Cells Feedback By default, the add_spare_cells command distributes the spare cells evenly throughout the entire design.\n To distribute the spare cells within a specific Hierarchical block, use the -hier_cell option.\n When you use this option, the tool distributes the spare cells in a rectangular area that encloses all of the cells that belong to the specified hierarchical block.\n Bounding box, use the -boundary option.\n Voltage areas, use the -voltage_areas option.\n You can further control the placement of the spare cells as follows: Ignore specific types of placement blockages by using the -ignore_blockage_types option.\n By default, the add_spare_cells command honors all placement blockage types.\n Ignore the current cell density and place the spare cells randomly by using the -random_distribution option.\n Specify a percentage of spare cells to be placed based on the cell density distribution by using the -density_aware_ratio option.\n The rest of the spare cells are placed randomly throughout the design.\n By default, all the spare cells are placed based on the cell density distribution.\n For example, if you specify a setting of -density_aware_ratio 80, the tool places 80 percent of the spare cells based on the cell density distribution and 20 percent randomly across the design.\n Specify the type of connection for the input pins of the spare cells by using the -input_pin_connect_type option.\n The valid values are tie_low tie_high, or open 2.\n Legalize the spare cells by using the place_eco_cells -legalize_only -cells command.\n 959 Adding Programmable Spare Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preserving Pin Names During Sizing"}, {"role": "assistant", "content": "By default, optimization can change the pin names of leaf cells during sizing if the functionality of the resulting circuit is equivalent.\n The Fusion Compiler tool automatically updates its version of the internal constraints to reflect the new pin name if the pin is part of an exception constraint.\n If this occurs, it means that the original constraints used to constrain the block in the Fusion Compiler tool cannot be used for signoff purposes; instead, you must write out the constraints from the Fusion Compiler tool and include these constraints with the resulting block.\n This behavior provides the optimization engine with the most flexibility to select cells and improve the cost functions.\n You can restrict this sizing capability so that the constraints remain unchanged through optimization by setting the opt.common.preserve_pin_names application option.\n This application option defaults to the setting of never, and accepts values of either never or always 174 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback To restrict sizing to pin-name equivalent cells, use the following command: fc_shell> set_app_options \\ -name opt.common.preserve_pin_names -value always To restore the default behavior, use the following command: fc_shell> set_app_options \\ -name opt.common.preserve_pin_names -value never"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock-Gate Collapsing"}, {"role": "assistant", "content": "The default of the compile.clockgate.max_number_of_levels application option is 0, which allows an infinite number of levels.\n You can set the compile.clockgate.max_number_of_levels application option without enabling clock-gate level expansion.\n In this case, the tool collapses clock-gate levels if the specified limit is less than the number of clock-gate levels that exist after the initial_map stage.\n The tool collapses clock-gate levels as follows: The tool first tries to collapse clock gates at levels higher than the specified maximum level, starting from the clock gates at the highest level (closest to the registers).\n If a specific clock gate cannot be collapsed, the tool tries to collapse upstream clock gates until it reaches the lowest level (closest to the source).\n The collapse can occur across hierarchies.\n The tool tries to preserve the parent (upstream) clock gate.\n The tool removes all remaining clock gates that do not meet the maximum number of levels."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Boundary Cell Insertion"}, {"role": "assistant", "content": "Before placing the standard cells, you can add boundary cells to the block.\n Boundary cells consist of end-cap cells, which are added to the ends of the cell rows and around the boundaries of objects such as the core area, hard macros, blockages, and voltage areas, and corner cells, which fill the empty space between horizontal and vertical end-cap cells.\n End-cap cells are typically nonlogic cells such as a decoupling capacitor for the power rail.\n Because the tool accepts any standard cell as an end-cap cell, ensure that you specify suitable end-cap cells.\n To insert boundary cells, 1.\n Specify the boundary cell insertion requirements by using the set_boundary_cell_rules command, as described in Specifying the Boundary Cell Insertion Requirements 2.\n Insert the boundary cells based on the specified rules by using the compile_boundary_cells or compile_targeted_boundary_cells command, as described in Inserting Boundary Cells 3.\n Verify the boundary cell placement by using the check_boundary_cells or check_targeted_boundary_cells command, as described in Verifying the Boundary Cell Placement This process supports a single site definition per run.\n The compile_boundary_cells and compile_targeted_boundary_cells commands determine the site definition based on the library cells specified with the set_boundary_cell_rules command, and insert boundary cells only in the regions that use this site definition.\n If your design has multiple site definitions, you must run this process one time for each site definition."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing Man Pages"}, {"role": "assistant", "content": "To display the man page for a Fusion Compiler command or application option, enter the man command followed by the command or application option name.\n For example, to see the man page for the report_timing command, use the following command: fc_shell> man report_timing To display the man page for a Fusion Compiler application option, enter the man command followed by the option name.\n You can also view the following types of summary pages for application options: Category summaries To view a man page that summarizes all of the application options for a specific category, enter the man command followed by category _options.\n For example, to see the man page that summarizes all timer application options, use the following command: fc_shell> man timer_options Subcategory summaries To view a man page the summarizes all of the application options for a specific subcategory, enter the man command followed by category subcategory _options.\n For example, to see the man page that summarizes all common route application options, use the following command: fc_shell> man route.common_options 49 Using Tcl Scripts Feedback Command summaries To view a man page the summarizes all of the application options for a specific command, enter the man command followed by command _options.\n For example, to see the man page that summarizes all application options that affect the report_timing command, use the following command: fc_shell> man report_timing_options If you enter the man command on the fc_shell command line, the man page is displayed in the Fusion Compiler shell and in the console log view if the GUI is open.\n If you enter this command on the console command line in the GUI, the man page is displayed in the GUI man page viewer."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reducing Congestion"}, {"role": "assistant", "content": "To reduce the congestion of your block, use the following settings: Consider the congestion of each layer separately and improve the accuracy of congestion reduction in coarse placement by setting the place.coarse.congestion_layer_aware application option to true By default, the tool combines the congestion information of all layers during placement.\n By considering the congestion of each layer separately, the tool can identify and fix areas with high pin densities that have insufficient resources on the lower layers for making pin connections.\n Expand the virtual area of cells during placement based on the local routing resource needs by setting the place.coarse.increased_cell_expansion application option to true By increasing the virtual area of cells in areas where there is a shortage of routing resources, the tool can minimize the cell density and congestion.\n By default, the tool expands the cells in the horizontal direction, which helps reduce congestion in the vertical routing layers.\n For designs with congestion mainly in the horizontal routing layers, set the place.coarse.congestion_expansion_direction application option to both.\n The default is horizontal 156 Specifying Placement Settings Feedback By default, the tool uses the uses global route congestion map to identify highly congested areas that need cell expansion.\n However, the tool does not consider the congestion due to soft routing rules.\n To consider the congestion effects of soft routing rules, set the route.global.export_soft_congestion_maps application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Size-Only Settings"}, {"role": "assistant", "content": "To set a size-only setting on a cell, use the set_size_only command.\n The following command sets a size-only setting on a cell: fc_shell> set_size_only [get_cells cell_name ] true To report all the size-only settings set on the current block, use the report_size_only command.\n fc_shell> report_size_only -all"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Measuring Quality of Results"}, {"role": "assistant", "content": "To measure the quality of results (QoR) of the design in the current state and store the quality information in a set of report files, use the create_qor_snapshot command.\n You can capture the QoR information using different optimization strategies or at different stages of the design and compare the quality of results.\n The create_qor_snapshot command measures and reports the quality of the design in terms of timing, design rules, area, power, congestion, and so on.\n It stores the quality information into a set of snapshot files in a directory named snapshot under the current working directory.\n To store the quality information in a different directory, use the time.snapshot_storage_location application option.\n The following example generates a QoR snapshot named r1 using zero wire load for timing paths in the snapshot directory: fc_shell> create_qor_snapshot -name r1 -zero_wire_load...\n No.\n of scenario = 4 s1 = function s2 = function_min s3 = test s4 = test_min 267 Performing Design Analysis Feedback WNS of each timing group: s1 s2 s3 s4 REGIN -0.34 - - - fref_clk0 2.34 3.25 - - pld_clk 0.65 1.65 - - pll_fixed_clk_central 0.61 1.65 - - REGOUT 0.39 0.44 1.18 1.72...\n Setup WNS: -0.34 0.44 1.02 1.10 -0.34 Setup TNS: -130.82 0.00 0.00 0.00 -130.82 Number of setup violations: 1152 0 0 0 1152 Hold WNS: -0.55 -0.78 -0.30 -1.28 -1.28...\n Area: 1200539.606 Cell count: 562504 Buf/inv cell count: 145920 Std cell utilization: 0.24...\n Querying QoR Snapshots To retrieve and report the snapshots created by the create_qor_snapshot command, use the query_qor_snapshot command.\n The query_qor_snapshot command analyzes the QoR timing reports previously generated and displays the results in HTML format according to the specified filters.\n In this example, the query_qor_snapshot command analyzes the placeopt snapshot that is stored in the snapshot directory and then reports the timing paths with worst negative slack values between -2.0 ns and -1.0 ns: fc_shell> create_qor_snapshot -name placeopt fc_shell> query_qor_snapshot -name placeopt -filters \"-wns -2.0,-1.0\" Reporting QoR Snapshots To display QoR information and statistics for the current design, use the report_qor command.\n For example, the following command displays the r1 QoR snapshot that is stored in the snapshot directory: fc_shell> report_qor_snapshot -name r1 -display Removing QoR Snapshots To remove an existing QoR snapshot from the directory specified by the time.snapshot_storage_location application option, use the remove_qor_snapshot 268 Performing Design Analysis Feedback command.\n For example, the following command removes the preroute QoR snapshot that is stored in the snapshot directory: fc_shell> remove_qor_snapshot -name preroute"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using ECO Scripts for Netlist Editing"}, {"role": "assistant", "content": "The Fusion Compiler tool supports using ECO scripts to make changes in the netlist during design planning.\n You can use the write_split_net_eco command to push up the branching of a physical multiple- fanout net to the top level write_push_down_eco command to push down a tree of standard cells one level write_spare_ports_eco command to create spare ports and nets on a child block For more information, see the Generating ECO Scripts for Netlist Editing topic in the Fusion Compiler Design Planning User Guide"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Placement"}, {"role": "assistant", "content": "Use the -check_prerequisites option of the place_group_repeaters or add_group_repeaters command to perform a prerequisite check for a design.\n This prerequisite check detects the design errors at the beginning of the command flow.\n For the place_group_repeaters command, use the -check_prerequisites option with the following options to provide necessary information for the check: place_group_repeaters -cells | -repeater_groups [-lib_cell_input] [-lib_cell_output] -check_prerequisites For the add_group_repeaters command, use the -check_prerequisites option with the following options to provide necessary information for the check: add_group_repeaters -nets | -bundles [-lib_cell_input] [-lib_cell_output] -check_prerequisites 980 Adding a Group of Repeaters Feedback The prerequisite check validates the following in a design and search region: Site rows are present in the design.\n Each net has only one driver and can have multiple loads.\n Locations of pins or ports are assigned.\n For pins on standard cells, the standard cells are placed.\n Supernets must be routed.\n Route ends must not be more than 5 \u03bcm away from the driver, load pins, or ports in the search region.\n The routes are defined for a driver or load in the search region.\n Load is connected to a driver.\n When the end of a route is open, no other route of the same net is present in the vicinity of the pin or port.\n Routes must be assigned to the net of the supernet driver pin.\n Vias must be created for routes.\n Repeaters have a physical library cell.\n The following example shows the usage of -check_prerequisites option using the add_group_repeaters command: fc_shell> add_group_repeaters -bundles bundle_wo_load \\ -lib_cell ref_lib1/libCell1 -lib_cell_input A -lib_cell_output X \\ -repeater_distance 10 -check_prerequisite Error: The net net_wo_load does not have loads.\n (ECO-329) Error: The cell driver1 of the pin driver1/X is not placed.\n (ECO-331) Error: 0 Use error_info for more info.\n (CMD-013)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Net-Specific Layer Constraints"}, {"role": "assistant", "content": "To specify net-specific layer constraints, use the set_routing_rule command.\n To specify the minimum and maximum routing layers, use the -min_routing_layer and -max_routing_layer options.\n Specify the routing layers by using the layer names from the technology file.\n For example, to use layers M2 through M7 when routing the n1 net, use the following command: fc_shell> set_routing_rule [get_nets n1] \\ -min_routing_layer M2 -max_routing_layer M7 201 Specifying the Routing Resources Feedback By default, net-specific minimum layer constraints are soft constraints, while net-specific maximum layer constraints are hard constraints.\n You can change the default behavior as follows: To change the default constraint strength for all net-specific layer constraints, set the route.common.net_min_layer_mode and route.common.net_max_layer_mode application options.\n Set these application options to soft to specify a soft constraint, allow_pin_connection to allow the use of lower layers only for pin connections, or hard to specify a hard constraint.\n To change the constraint strength for a single net-specific layer constraint, use the -min_layer_mode and -max_layer_mode options when you define the constraint with the set_routing_rule command.\n Set these options to soft to specify a soft constraint, allow_pin_connection to allow the use of lower layers only for pin connections, or hard to specify a hard constraint.\n To set the cost of violating soft constraints for all net-specific layer constraints, set the route.common.net_min_layer_mode_soft_cost and route.common.net_max_layer_mode_soft_cost application options.\n Set these application options to low medium (the default), or high.\n The cost setting controls the effort expended by the router to avoid violations.\n The high setting can reduce violations at a cost of increased runtime.\n The low setting can reduce runtime at a cost of increased violations.\n To set the cost of violating soft constraints for a single net-specific layer constraint, use the -min_layer_mode_soft_cost and -max_layer_mode_soft_cost options when you define the constraint with the set_routing_rule command.\n Set these options to low medium (the default), or high.\n The cost setting controls the effort expended by the router to avoid violations.\n The high setting can reduce violations at a cost of increased runtime.\n The low setting can reduce runtime at a cost of increased violations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Placement Bounds"}, {"role": "assistant", "content": "To report the placement bounds in a block, use the report_bounds comandcomandsreport_boundsmove boundreporting report_bounds command.\n To return a collection of placement bounds in the current block that match certain criteria, use the get_bounds comandcomandsget_bounds get_bounds command.\n 148 Specifying Physical Constraints for Placement and Legalization Feedback To return a collection of bound shapes associated with one or more move bounds, use the get_bound_shapes command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Hotspots"}, {"role": "assistant", "content": "To generate voltage drop hotspots for a power or ground net, use the generate_hot_spots command.\n This command divides the whole chip area into multiple grids in terms of rows and columns, such as 100x100.\n The grid boxes are sorted by the maximum effective voltage drop value in each grid box and are indexed with an integer number starting from 0.\n To create rows based on standard cell site rows, and columns by using vertical PG straps on the lowest metal layers, use the -site_row option.\n Alternatively, you can specify the number of rows and columns for dividing the whole region with the -row and -column options.\n The command creates error cells for the grids with voltage drop values greater than the specified percentage of the ideal voltage drop.\n The default is 0.1, meaning that error cells are created for the grids with voltage drop values greater than 10% of the ideal supply voltage.\n The error cell type is effective voltage drop.\n To examine the content of the generated error cells, open the error cells in the error browser.\n To examine the content of the grid box, use the report_hot_spots command.\n To remove the generated voltage hotspot data from memory, use the remove_hot_spots command.\n 940 Voltage Hotspot Analysis Feedback Option Description -net Specifies the net name for generating hotspots.\n When not specified, all power nets are used.\n -percentage Specifies the percentage used to generate hotspot error cells.\n The default is 0.1.\n -site_row integer By default, the command uses the standard site row height to divide the whole region into multiple rows, and the lowest PG net vertical straps to divide the whole region into multiple columns.\n To use a multiple of the site row height for creating grid rows, specify the -site_row option with an integer.\n For example, when the -site_row option is set to 2, the command uses twice the site row height to construct grid rows; that is, a row is constructed for every two site rows.\n -row Specifies the number of rows into which to divide the whole region.\n -column Specifies the number of columns into which to divide the whole region.\n See Also Reporting Hotspots Removing Hotspots Voltage Hotspot Analysis Examples"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Low-Threshold-Voltage (LVT) Cells"}, {"role": "assistant", "content": "The Fusion Compiler tool can perform percentage-LVT-based optimization.\n By limiting the percentage of LVT cells in a block, you can improve yield of your design.\n You can also use this feature during the early design phases to get an idea of the quality of the RTL.\n To set up for percentage-LVT-based optimization, 1.\n Specify the LVT library cell group as shown in the following example: fc_shell> remove_attributes -quiet \\ [get_lib_cells -quiet */*] threshold_voltage_group fc_shell> set_attribute [get_lib_cells -quiet *lvt*/*] \\ threshold_voltage_group LVT 192 Setting Up for Power-Related Features Feedback fc_shell> set_threshold_voltage_group_type \\ -type low_vt LVT Ensure that the LVT library cells you specify Have a valid purpose defined by using the set_lib_cell_purpose command and are included in the appropriate target-library subsets defined by using the set_target_library_subset command Do not have a dont_touch or dont_use attribute setting 2.\n Specify the percentage limit for LVT cells by using the set_multi_vth_constraint -low_vt_percentage command.\n To specify the limit as a percentage of the Cell count, use the -cost cell_count option Cell area, use the -cost area option To reset this constraint, use the reset_multi_vth_constraint command, and to report it, use the report_multi_vth_constraint command.\n After you set up percentage-LVT-based optimization, when you run the compile_fusion clock_opt, or route_opt command, the tool uses the specified LVT cell percentage constraint for the data path cells in the block.\n However, to minimize QoR disturbance, the tool limits the percentage-LVT-based optimization performed during the route_opt command.\n Therefore, it is important to enable this feature earlier in the design flow.\n Note: LVT cells have a smaller cell delay, but higher leakage power dissipation.\n Therefore, limiting the number of LVT cells reduces leakage-power dissipation.\n However, to further reduce leakage power, enable leakage power optimization for the different stages of the design flow."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Self-Gating Optimization"}, {"role": "assistant", "content": "The tool supports self-gating optimization, which occurs at the compile_fusion command.\n This feature reduces dynamic power consumption by turning off the clock signal of certain registers during clock cycles when the data remains unchanged.\n 328 Self-Gating Optimization Feedback Figure 66 Example of a Self-Gating Cell CLK Registers with an enable condition that cannot be inferred from the existing logic can only be gated using the self-gating technique.\n They cannot be gated using traditional clock gating.\n By default, the tool supports self-gating only on registers that are not gated.\n You can use the set_self_gating_options command to allow self-gating on these registers.\n However, the time duration that the clock signal is turned off might increase for these registers,.\n To ensure QoR improvements, the self-gating algorithm takes timing and power into consideration.\n A self-gating cell is inserted for the registers if There is enough timing slack available in the register's data pin.\n For designs with multiple scenarios, the algorithm considers the timing of the worst case among active scenarios enabled for setup.\n Internal dynamic power of the circuit is reduced.\n For designs with mutiple scenarios, the algorithm uses the average internal dynamic power among active scenarios enabled for dynamic power.\n To minimize the area and power overhead, a self-gating cell can be shared across a few registers by creating a combined enable condition with a tree of comparator cells.\n If the self-gated registers are driven by synchronous set or synchronous clear signals, these signals are also included in the construction of the enable signal so that the circuit remains functionally unchanged.\n Figure 67 is an example of a self-gating cell that is shared across two registers (4 bits).\n Note that one of the self-gated registers is a multibit register and the other register is a single-bit register.\n The tool can also self-gate a group of multibit registers or a group of single-bit registers.\n 329 Self-Gating Optimization Feedback Figure 67 Self-Gating Tree CLK D0 Q0 D2 Q2 D1 Q1 EN The tool does not support the following types of sequential cells for self-gate insertion: Level-sensitive sequential cells Level-sensitive scan design registers Master-slave flip-flops Retention registers Single-bit and multibit registers that belong to shift registers Multibit registers with multiple clock paths For more information, see the following topics: Self-Gating Flow Library Requirements for Self-Gating Setting Up for Self-Gating Reporting and Querying Self-Gating Cells"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Relative Placement Groups"}, {"role": "assistant", "content": "A relative placement group is an association of cells, other relative placement groups, and blockages.\n A group is defined by the number of rows and columns it uses.\n Use the create_rp_group command to create a relative placement group.\n When you do so, you must specify a name for the relative placement group by using the -name option.\n You can specify the number of columns and rows for the relative placement group by using the -columns and -rows options.\n If you do not do so, the tool create a relative placement group with one row and column.\n 783 Creating Relative Placement Groups Feedback For example, to create a relative placement group named RP1 that has six columns and six rows, use the following command: fc_shell> create_rp_group -name RP1 -columns 6 -rows 6 Figure 167 shows the relative placementpositions for data positions of columns and rows in a relative placement group.\n Figure 167 Relative Placement Column and Row Positions 0 5 0 4 0 2 1 5 1 4 1 3 3 5 3 4 3 3 4 5 2 5 3 2 2 3 4 2 0 0 1 0 3 0 4 0 2 0 5 5 5 4 5 2 5 0 2 4 5 3 0 1 1 1 3 1 2 1 5 1 col 0 row 0 row 2 row 4 row 5 row 3 row 1 col 1 col 2 col 4 col 5 col 3 1 2 2 2 4 4 4 3 For the relative placement group in Figure 167 The column count begins from column 0 (the leftmost column).\n The row count begins from row 0 (the bottom row).\n The width of a column is the width of the widest cell in that column.\n The height of a row is the height of the tallest cell in that row.\n All positions in the structure are not used.\n For example, positions 0 3 (column 0, row 3) and 4 1 (column 4, row 1) are not used.\n By default, the tool creates the relative placement group in the current design.\n You can create it in a different design by specifying its name using the -design option.\n If you create a relative placement group in a design that has multiple instantiations in a top-level design, the changes you make to the relative placement group in one instance is reflected in all its instances.\n To remove relative placement groups, use the remove_rp_groups command.\n 784 Adding Objects to a Group Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Block Contexts"}, {"role": "assistant", "content": "Macro models are used to reduce total turnaround time for designs with advanced process technology.\n When violations are reported in the macros during full-chip signoff voltage drop analysis, it might be time-consuming to fix the violations at the block level and then rerun full-chip analysis to verify the fix.\n To reduce the turnaround time, you can create a context model for the macro block.\n A context model depicts the relationship between the block and the full-chip design, including both physical and electrical information, and enables you to verify the fixes by running block-level analysis rather than full-chip analysis.\n To create a context model, use the create_context_for_sub_block command.\n To run voltage drop analysis with the generated block contexts, set the rail.pad_files and rail.block_context_model_file application options before running the analyze_rail command.\n Note: Creating full-chip contexts for blocks is supported only in RedHawk Fusion.\n The following figure shows that a fix in the block can effectively improve the performance of the top design.\n 922 Working With Macro Models Feedback Figure 211 Fixing Violations in Block Contexts Content of Block Contexts The create_context_for_sub_block command models the full-chip context of a block, including physical models and electrical models.\n Physical model, which describes the locations of the connections between the block and full-chip design.\n These tap locations are derived by tracing the RedHawk parasitics data.\n The physical model is generated when the create_context_for_sub_block command process is complete, in the.ploc format.\n Electrical model, which is an effective resistance- and capacitance-based model.\n The tool uses the native resistance engine to calculate the effective resistance, which is used to calculate equivalent current during peak dynamic voltage drop analysis.\n By default, the tool models the full-chip context for the specified block.\n The capacitance data is derived by the RedHawk extraction engine.\n To create an electrical model for the specified block, specify the -electric_model_file option with the create_context_for_sub_block command.\n The electrical model is written in the.context format.\n 923 Performing Signoff Analysis Feedback Examples The following example creates a block context for the top/cell_inst_1 block.\n The generated physical and electrical models are block.ploc and block.context, respectively.\n ##Create block context in top block ## open_block top create_context_for_sub_block \\ -block_instance top/cell_inst_1 block.ploc \\ -nets {VDD_TOP VSS_TOP} \\ -electric_model_file block.context close_block ##Run IR analysis with block context information in block-level design ## open_block block set_app_options -name rail.pad_files -value block.ploc set_app_options -name rail.block_context_model_file \\ -value block.context analyze_rail -nets {VDD_BLOCK VSS_BLOCK} \\ -voltage_drop static -extra_gsr_option_file extra.gsr...\n The following example creates only a physical model for the top/cell_inst_1 block.\n ##Create block context in top block ## open_block top create_context_for_sub_block \\ -block_instance top/cell_inst_1 block.ploc \\ -nets {VDD_TOP VSS_TOP} close_block ##Run IR analysis with block context information in block-level design ## open_block block set_app_options -name rail.pad_files -value block.ploc analyze_rail -nets {VDD_BLOCK VSS_BLOCK} \\ -voltage_drop static -extra_gsr_option_file extra.gsr..."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Before Using Custom Router"}, {"role": "assistant", "content": "Before you run Custom Router, you must Ensure the necessary design rules are correctly defined in the technology file, such as layer and via definitions.\n For more information, see the Synopsys Technology File and Routing Rules Reference Manual Check the connectivity information and look for pin blockages in the design.\n For more information, see the \"Reviewing the Design\" topic in the Custom Compiler Custom Router User Guide Ensure sure that the power and ground nets in the block have been routed.\n 748 Defining Routing Constraints Feedback For more information, see the Fusion Compiler Design Planning User Guide Check the routability of the placement as explained in Checking Routability"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing With the Custom Router"}, {"role": "assistant", "content": "Before performing custom routing on your block, you need to define routing constraints by using the commands described in Defining Routing Constraints, and setting the appropriate application options.\n To perform custom routing with Custom Router in the Fusion Compiler environment, run the route_custom command.\n By default, the tool routes all nets in the block.\n To route specific nets, use the -nets option.\n By default, the tool removes the configuration data when the command run is complete.\n To keep the data in the cache for running other Custom Router commands in the current session, set the -keep_session option to true.\n The default is false The following example specifies the bus routing style and then performs bus routing.\n fc_shell> create_bundle -name Bus1 {net0 net1} fc_shell> create_bus_routing_style -for {Bus1} \\ -valid_layers {M5 M6} \\ 773 Shielding the Nets Feedback -layer_widths {M5 0.4 M6 0.44} -force bus1 fc_shell> create_net_shielding -for {Bus1} -shield_net VSS \\ -layer_gaps 0.21 -layer_widths 0.2 -sharing true -force sh1 fc_shell> set_app_options -name custom.route.bus_corner_type \\ -value river fc_shell> set_app_options \\ -name custom.route.bus_intra_shield_placement -value interleave fc_shell> route_custom -nets {net0 net1} The following example creates a constraint group and then performs routing on the nets with the same length.\n fc_shell> set matchNets {net1 net2 net3 net4} fc_shell> create_bundle -name MatchL1 $matchNets fc_shell> create_wire_matching -for MatchL1s \\ -match_type length -tolerance 1 -force matchL1_con fc_shell> route_custom -nets {net1 net2 net3 net4} The following example creates a differential group and then performs custom routing.\n fc_shell> create_differential_group -for {net1 net2} \\ -valid_layers {M3 M4} -layer_widths {M3 0.4 M4 0.4} \\ -layer_spacings {M3 0.4 M4 0.4} \\ -twist_style diagonal -twist_interval 80.0 -force Diff fc_shell> set_app_options\\ -name custom.route.diffpair_twist_jumper_offset -value 10 fc_shell> route_custom -nets {net1 net2}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining the Layer Mapping for IC Validator In-Design Commands"}, {"role": "assistant", "content": "A layer mapping file maps the technology layers to the layers used in the runset file.\n You specify the location of the layer mapping file by setting the signoff.physical.layer_map_file application option.\n Each line in the layer mapping file specifies a layer in the technology file and the corresponding layer in the runset file using the following syntax: tf_layer [: tf_purpose ][: use_type ][: mask_type runset_layer [: runset_data_type Each line can contain the following items: tf_layer \u2013 Layer number in the technology file, a required item tf_purpose \u2013 Purpose number in the technology file use_type \u2013 Fusion Compiler usage of the geometries in the design 664 Performing Signoff Design Rule Checking Feedback Valid values are power ground signal clock boundary hard_placement_blockage soft_placement_blockage routing_blockage area_fill, and track mask_type \u2013 Multiple-patterning mask constraint of the geometries Valid values for metal layers are mask_one mask_two mask_three, and mask_same Via layers support the additional values MASK_FOUR through MASK_FIFTEEN runset_layer \u2013 Layer number in the runset file, a required item runset_data_type \u2013 Layer data type number in the runset file Any text in a line that comes after a semicolon character ( ) is considered a comment and has no effect on layer mapping."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Command"}, {"role": "assistant", "content": "The recommended flow for performing postroute logic optimization consists of multiple iterations of the route_opt command with different settings.\n However, you can reduce 551 Performing Postroute Optimization Feedback the number of postroute optimization iterations by using a single iteration of the hyper_route_opt command.\n The postroute optimization flow using the hyper_route_opt command consists of the following steps: 1.\n Enable different settings for postroute optimization using the same settings as for the route_opt command.\n For example, you can Specify the path-based analysis (PBA) mode by using the time.pba_optimization_mode application option Enable concurrent clock and data optimization by using the route_opt.flow.enable_ccd application option Enable power optimization by using the route_opt.flow.enable_power application option 2.\n (Optional) Specify settings for metal fill insertion, PG augmentation, and so on that should to be performed during the different stages of optimization and ECO routing within the hyper_route_opt command by using the snps_hyper_route_opt_post_eco Tcl-callback procedure.\n 3.\n (Optional) To improve the timing QoR, the hyper_route_opt command can debank sequential multibit registers.\n To enable this feature, set the route_opt.flow.enable_multibit_debanking application option to true.\n By default, the route_opt.flow.enable_multibit_debanking application option is set to false 4.\n Run postroute optimization using the hyper_route_opt command.\n 5.\n (Optional) Specify endpoints to target by using the set_route_opt_target_endpoints command and optimize these endpoints by using the route_opt command if there are any violating endpoints remaining after the hyper_route_opt command.\n 6.\n (Optional) Fix any remaining route DRC violations by using the route_detail -incremental command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Unplacing the Repeaters"}, {"role": "assistant", "content": "To unplace the previous placement of repeaters, use the unplace_group_repeaters command.\n unplace_group_repeaters \\ -cells cell_list | -repeater_groups group_id_list [-lib_cell_input pin_name ] \\ [-lib_cell_output pin_name"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Library Subset Restrictions"}, {"role": "assistant", "content": "You can restrict the mapping and optimization of sequential cells and instantiated combinational cells to a subset of reference libraries and library cells.\n To specify one or more library subset restrictions, use the define_libcell_subset command followed by the set_libcell_subset command.\n 80 Using Pin Access Checker Utility Feedback Note: The library subset restrictions apply to leaf cells, but not to hierarchical cells.\n To set library subset restrictions on leaf cells, 1.\n Define a subset of library cells by using the define_libcell_subset command.\n After the library cells are grouped into a subset, they are not available for general mapping during optimization, but for sequential cells and instantiated combinational cells only.\n 2.\n Restrict the optimization of sequential and instantiated combinational cells by using the set_libcell_subset command.\n During optimization, the tool uses the library subset defined in step 1 to optimize sequential cells (both mapped and unmapped) and mapped combinational cells.\n In the following example, the define_libcell_subset command groups the SDFLOP1 and SDFLOP2 library cells into a subset called special_flops, and then the set_libcell_subset command restricts the mapping of the LEAF1 leaf cell to the special_flops library subset.\n fc_shell> define_libcell_subset \\ -libcell_list \"SDFLOP1 SDFLOP2\" -family_name special_flops fc_shell> set_libcell_subset \\ -object_list \"HIER1/LEAF1\" -family_name special_flops Reporting Library Subset Restrictions To report library subsets specified for sequential cells and instantiated combinational cells, use the report_libcell_subset command.\n Removing Library Subset Restrictions To remove library subsets, use the remove_libcell_subset command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Writing Analysis and Checking Reports"}, {"role": "assistant", "content": "When the checking or analysis is complete, run the report_rail_result command to write the analysis or checking results to a text file.\n The power unit in the report file is watts, the current unit is amperes, and the voltage unit is volts.\n To display block-level rail results from top-level RAIL_DATABASE for debugging purposes, use the -top_design and -block_instance options.\n For more information, see Displaying Block-Level Rail Results To write rail results for the cells or geometries in the hotspot area only, use the get_instance_result and get_geometry_result commands.\n For more information, see Generating Instance-Based Analysis Reports and Generating Geometry-Based Analysis Reports 925 Writing Analysis and Checking Reports Feedback To specify the data or error types to report, use the -type option.\n Table 69 lists the supported data and error types.\n To limit the number of the elements to report, use the -limit option.\n Set the value to zero to write all elements to the output file in descending order.\n To filter the data to write to the report file, use the -threshold option.\n The tool writes the data greater than the specified threshold to the output file.\n The option is valid only for the following data types: pg_pin_power voltage_drop_or_rise effective_voltage_drop To restrict the report to the specified supply nets, use the -supply_nets option.\n This option is valid only for the following data types: effective_voltage_drop instance_minimum_path_resistance minimum_path_resistance pg_pin_power voltage_drop_or_rise Table 69 Supported Data and Error Types for report_rail_result Type Description effective_voltage_drop The effective voltage values, in volts.\n effective_resistance The effective resistance values.\n instance_minimum_path_resistance The minimum path resistance value on each instance.\n instance_power The power value on each instance, in watts.\n minimum_path_resistance The minimum path resistance value on each power or ground pin.\n missing_vias Overlaps of supply net routing on different layers that do not have vias connected.\n pg_pin_power The power value on each power or ground pin, in watts.\n unconnected_instances Instances that are not connected to any ideal voltage drop sources.\n 926 Writing Analysis and Checking Reports Feedback Table 69 Supported Data and Error Types for report_rail_result (Continued) Type Description voltage_drop_or_rise The dynamic voltage drop or rise violations, in volts.\n In the output report file, the tool lists the data in different formats.\n For example: For the effective_voltage_drop type, When reporting the static analysis results, the format is cell_instance_pg_pin_name mapped_pg_pin_name supply_net_name effective_voltage_drop When reporting the dynamic analysis results, the format is cell_instance_pg_pin_name mapped_pg_pin_name supply_net_name average_effective_voltage_drop_in_tw max_effective_voltage_drop_in_tw min_effective_voltage_drop_in_tw max_effective_voltage_drop For the instance_minimum_path_resistance type, the result is sorted by the Total_R value in the following format: Supply_net Total_R(ohm) R_to_power(ohm) R_to_ground(ohm) Location Pin_name Instance_name For the minimum_path_resistance type, the format is full_path_cell_instance_name/pg_pin_name resistance For the missing_vias type, the format is net_name via_location_x_y top_metal_layer bottom_via_layer delta_voltage For the pg_pin_power type, the format is full_path_cell_instance_name pg_pin_name power For the voltage_drop_or_rise type, the format is full_path_cell_instance_name/pg_pin_name voltage For the unconnected_instances error type, the format depends on the error condition.\n When either or both of power and ground nets are physically disconnected from ideal voltage sources, the format is unconnected_type {net_names} instance_name instance bbox 927 Writing Analysis and Checking Reports Feedback When the power or ground nets are either floating or logically floating but physically connected to ideal voltage sources, the format is unconnected_type {net_names} instance_name:pin_name instance bbox The following example writes a file containing the top five PG pin power values to an output file called power.rpt.\n fc_shell> open_rail_result fc_shell> report_rail_result -type pg_pin_power -limit 5 \\ -supply_nets { VSS } power.rpt fc_shell> sh cat power.rpt FI2/vss 4.81004e-06 FI6/vss 4.80959e-06 FI3/vss 4.79702e-06 FI4/vss 4.79684e-06 FI1/vss 4.79594e-06...\n The following example writes the calculated effective voltage drop values for the VDD and VSS nets to an output file called inst_effvd.rpt.\n fc_shell> open_rail_result fc_shell> report_rail_result -type effective_voltage_drop \\ -supply_nets { VDD VSS } inst_effvd.rpt fc_shell> sh cat inst_effvd.rpt #cell_instance_pg_pin_name mapped_pg_pin_name supply_net_name #average_effective_voltage_drop_in_tw #max_effective_voltage_drop_in_tw min_effective_voltage_drop_in_tw #max_effective_voltage_drop S32_reg_14_/VDD VSS VDD -7.750034332e-03 -1.017999649e-02 -5.850076675e-03 -1.029992104e-02 S32_reg_15_/VDD VSS VDD -7.709980011e-03 -1.013994217e-02 -5.810022354e-03 -1.026010513e-02 S46_reg_8_/VDD VSS VDD -7.179975510e-03 -9.490013123e-03 -5.330085754e-03 -1.021003723e-02...\n The following example writes the minimum path resistance values of cell instances to an output file called inst_minres.rpt.\n fc_shell> open_rail_result fc_shell> report_rail_result -type instance_minimum_path_resistance \\ -supply_nets { VDD VSS } inst_minres.rpt fc_shell> sh cat inst_minres.rpt Rmax(ohm) = 162.738 928 Writing Analysis and Checking Reports Feedback Rmin(ohm) = 4.418 ====================================================================== Supply_net Total_R(ohm) R_to_power(ohm) R_to_ground(ohm) Location Pin_name Instance_name ====================================================================== VDD 162.738 152.686 10.052 586.000, 496.235 VDDL dataout_44_u VSS 156.266 137.963 18.303 544.000, 613.235 VSS GPRs/U2317 VDD 156.266 137.963 18.303 544.000, 613.235 TVDD GPRs/U2317 VDD 152.690 135.223 17.467 602.400, 467.435 VDDL dataout_33_u"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Multiple-Port Nets"}, {"role": "assistant", "content": "Multiple-port nets include Feedthrough nets, where an input port feeds into an output port Nets connected to multiple output ports, logically equivalent outputs 176 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback Feedthrough net Logically equivalent outputs Multiple-port nets, which are represented with the assign statement in the gate-level netlist, might cause design rule violations further in the design flow.\n By default, the tool does not fix multiple-port nets during optimization.\n You can enable multiple-port-net fixing for The logic_opto and initial_drc stages, which are earlier stages of the compile_fusion command, by using the set_fix_multiple_port_nets command This command sets the fix_multiple_port_nets attribute on the specified objects.\n The initial_opto and final_opto stages, which are later stages of the compile_fusion command, by setting the opt.port.eliminate_verilog_assign application option to true This application option is false by default.\n If you want to fix multiple-port nets, use the set_fix_multiple_port_nets command and fix these issues during the early stages of the compile_fusion command, when the tool can perform more optimization techniques.\n If you do not explicitly specify a multiple-port-net setting using the set_fix_multiple_port_nets command, but you set the opt.port.eliminate_verilog_assign application option to true, the tool issues the following message and uses the set_fix_multiple_port_nets -all -buffer_constants command setting to fix multiple-port nets during the logic_opto and initial_drc stages of the compile_fusion command: Information: The opt.port.eliminate_verilog_assign application option has been set to true.\n The tool will run set_fix_multiple_port_nets -all -buffer_constant by internally enabling MPN fixing due to the absence of explicit set_fix_multiple_port_nets constraint.\n (MPN-0004) However, if you explicitly specify a multiple-port-net setting using the set_fix_multiple_port_nets command, the tool honors it.\n For example, the following settings enable multiple-port-net fixing for feedthrough nets during the logic_opto and 177 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback initial_drc stages and all nets during the initial_opto and final_opto stages of the compile_fusion command: fc_shell> set_fix_multiple_port_nets -feedthroughs fc_shell> set_app_options \\ -name opt.port.eliminate_verilog_assign -value true The following settings disable multiple-port-net fixing for all nets during the logic_opto and initial_drc stages and enables it for all nets during the initial_opto and final_opto stages of the compile_fusion command: fc_shell> set_fix_multiple_port_nets -default fc_shell> set_app_options \\ -name opt.port.eliminate_verilog_assign -value true During multiple-port-net fixing, the tool performs the following tasks in sequence: 1.\n Rewires the connections to ensure that each net is connected to one hierarchical port, if possible.\n The tool first performs rewiring to avoid unnecessary buffering.\n The tool also rewires across the hierarchy because boundary optimization is enabled by default.\n 2.\n Inserts buffers or inverters to the nets that are not fixed by rewiring."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Track Adherence Options"}, {"role": "assistant", "content": "To specify whether the route and corresponding parallel shields, jumpers for parallel shields, and bus shields will snap to the wire tracks or the routing grid, use the custom.route.layer_grid_mode application option.\n Specify the application option with a list of paired values.\n The syntax for each pair of values is as follows: {{ layerName mode }} where layerName is the name of the layer.\n To include all layers, specify All mode is one of the following: on : Snaps routes and shields to tracks.\n If the layer does not have tracks, the routes and shields will snap to the routing grid.\n off : Does not snap routes and shields to tracks or grids.\n Choose this option for gridless routing.\n off_cost <costValue> : Snaps routes and shields to tracks when possible.\n The value you specify determines the adherence of routes to tracks.\n The higher the value, the more likely the route will remain on the track or grid.\n If tracks and routing grids are not defined and you specify on, the Custom Router uses an internally determined grid.\n The grid pitch is route width + minSpacing between shapes.\n The grid offset is 0 or pitch/2, whichever permits more pins on the grid.\n Example 41 Layer and Cost Specification for Track Adherence {{M2 off} {M3 off_cost 4}} 769 Using Custom Routing Application Options Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using RTL Switching Activity With a Name-Mapping File"}, {"role": "assistant", "content": "To use an RTL SAIF file in the Fusion Compiler tool, use the following steps: 1.\n After reading and elaborating the design, use the saif_map -start command, which creates a name-mapping database during synthesis that the tool then uses for power analysis and optimizaiton.\n 2.\n (Optional) Manually change the name mapping as described in Controlling the Name Mapping 3.\n Read in the same RTL SAIF file by using the read_saif command.\n Reading an RTL SAIF file does not affect the name-mapping database.\n 4.\n Perform optimization and other design changes.\n 5.\n Generate a binary name-mapping file that maps RTL object names to gate-level objects by using the saif_map -write_map command, which is needed if you want to continue the flow using ASCII files in a later Fusion Compiler session.\n In the subsequent session, use the saif_map -read_map command to read the saved file and begin tracking further changes to object names.\n 6.\n (Optional) Generate an ASCII name-mapping file for use with the PrimePower tool by using the saif_map -write_map -type primepower -essential command.\n Controlling the Name Mapping In the SAIF-map flow, the name-mapping database tracks the changes to pin, port, cell, and net names that occur during optimization.\n It contains the original name for each object, so that the original SAIF can be applied even after optimization.\n You can manually control the name mapping in the database by using the saif_map command as shown in the following table.\n Table 16 Options for Manually Controlling the Name Mapping To do this Use this option of the saif_map command Specify a name mapping for an object and overwrite the name mapping that might exist in the database -set_name 186 Setting Up for Power-Related Features Feedback Table 16 Options for Manually Controlling the Name Mapping (Continued) To do this Use this option of the saif_map command Add a name mapping to the existing mapping in the database -add_name Apply the name mapping specified with the -set_name or -add_name option to the logically inverted object -inverted, with -set_name or -add_name Change an object name using a name rule, when reading in the SAIF file -change_name Report all manual name-mapping settings specified -report Remove the name mapping settings for specific objects -remove_name Reset the name-mapping settings by clearing all manually created name mappings and name rules -reset Retrieve name-mapping settings from the database -get_saif_names -get_object_names"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Variables"}, {"role": "assistant", "content": "In general, the Fusion Compiler tool modifies default behavior by using application options rather than application variables; however it does support user-defined Tcl variables, as well as a minimal number of application variables, such as the search_path variable.\n 48 Viewing Man Pages Feedback To list the variables and their values, use the printvar command.\n For example, to list all variables defined in the current session, use the following command: fc_shell> printvar * To print the value of the search_path variable, use the following command: fc_shell> printvar search_path See Also Defining the Search Path"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Shielding Information"}, {"role": "assistant", "content": "After you run the create_shields command, you can Query the shield shapes associated with a shielded net by using the get_shapes -shield_only command, as described in Querying Shield Shapes Report the shielding statistics by using the report_shields command, as described in Reporting Shielding Statistics"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I in Library Cell Families"}, {"role": "assistant", "content": "When a family of cells with the same function is ordered in terms of increasing drive strength, specific cell property values should be monotonically increasing or decreasing.\n For example, when a family is ordered in terms of increasing drive strength, the area of cells should be monotonically increasing, power should be increasing, and delay (for the same output load and input slew) should be decreasing.\n 84 Analyzing Libraries Feedback The following figure shows a monotonic distribution of cell area versus timing for a family of cells with the same function.\n Figure 9 Monotonic Distribution in Library Cell Family 85 Analyzing Libraries Feedback A cell is considered redundant if all its metrics, such as area, delay, power, and so on, are equal or worse than another cell, as shown in the following plot of cell area versus timing for a family of cells with the same function.\n Figure 10 Redundant Cell in Library Cell Family 86 Analyzing Libraries Feedback A cell is considered an outlier if its metrics has a very large deviation from the expected values, as shown in the following plot of cell area versus timing for a family of cells with the same function.\n Figure 11 Outlier Cell in Library Cell Family 87 Analyzing Libraries Feedback Cells are considered equivalent if all their properties are the same for all process, voltage, and temperature (PVT) values, as shown in the following plot of cell area versus timing for a family of cells with the same function.\n Figure 12 Equivalent Cells in Library Cell Family 88 Analyzing Libraries Feedback A gap is when there is a large difference between two successive drive strengths, as shown in the following plot of cell area versus timing for a family of cells with the same function.\n Figure 13 Gap in Library Cell Family"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting the Constraints Assigned to a Group of a Repeaters"}, {"role": "assistant", "content": "To report the constraints that were assigned to a group of repeaters using the place_group_repeaters add_group_repeaters or set_repeater_group_constraints commands, use the report_repeater_group_constraints command.\n For example: fc_shell> report_repeater_group_constraints"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Prerequisites for Handling Early Design Data"}, {"role": "assistant", "content": "The tool performs the repairs and saves the records in the subblocks within the check_hier_design command itself.\n For the repairs, which need frame recreation, you need to run the save_lib command to save the frame on disk.\n To save the repair and its record to the subblock successfully, the following setup is required: 1.\n Enable the reference libraries, containing the subblocks, for open_lib top.nlib -ref_libs_for_edit 846 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback 2.\n Enable editability on the subblocks, on which repair has to be performed set_editability -blocks <> -value true The check_hier_design command checks for the required editability settings, if repair has to be performed.\n If the required editability settings are not performed,then the check_hier_design command issues TL-170 error message.\n Note: The tool supports the repairs on subblocks, which are linked to the read_only abstracts rather than editable abstracts because managing the mismatched design data mechanism only aims to continue the top-level flow for exploration and as such no repair work performed on the subblock abstracts should get merged with the actual design view.\n If the top-level uses editable design views, the repair work still continues."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Postroute Optimization"}, {"role": "assistant", "content": "The Fusion Compiler tool can perform two types of postroute optimization: Logic optimization This optimization improves the timing, area, and power QoR and fixes logical DRC violations and performs legalization and ECO routing.\n To perform these optimizations, use the route_opt command, as described in Performing Postroute Logic Optimization Routability optimization This optimization increases the spacing between cells to fix routing DRC violations caused by pin access issues.\n To perform this optimization, use the optimize_routability command, as described in Fixing DRC Violations Caused by Pin Access Issues If you run both logic optimization and routability optimization, you should first perform the logic optimization and then the routability optimization.\n 548 Performing Postroute Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Standard Power Grid Augmentation"}, {"role": "assistant", "content": "Standard power grid augmentation inserts as many PG augmentation shapes as possible to lower the instance voltage drop.\n To perform standard power grid augmentation, 1.\n Ensure that the block is fully routed with very few or no DRC violations.\n 2.\n Run voltage drop analysis using RedHawk Fusion, as described in Performing Voltage Drop Analysis The IC Validator tool uses the results of this voltage drop analysis to drive the power grid augmentation.\n 3.\n Set up the IC Validator environment as described in Setting Up the IC Validator Environment 4.\n (Optional) Enable distributed processing by using the set_host_options command, as described in Enabling IC Validator Multicore Processing 5.\n Set the application options for performing power grid augmentation, as described in Setting Options for Power Grid Augmentation At a minimum, you must define the power and ground nets on which to perform PG augmentation.\n To specify the power net, set the signoff.create_pg_augmentation.power_net_name application option.\n To specify the ground net, set the signoff.create_pg_augmentation.ground_net_name application option.\n If your design contains more than one power net, you must perform PG augmentation once for each power net.\n 6.\n Save the block to disk.\n When you run the signoff_create_pg_augmentation command, the IC Validator tool uses the on-disk information for the block, not the information in memory.\n To ensure accurate information, use the save_block command to save the current state of the block before running the signoff_create_pg_augmentation command.\n 7.\n Perform power grid augmentation by using the signoff_create_pg_augmentation command.\n When you run this command, you must specify the technology node for which to perform the augmentation by using the -node option.\n 700 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback If you must perform incremental PG augmentation because your design contains more than one power net, use the -mode add command on subsequent runs to append the PG augmentation shapes to the existing shapes.\n 8.\n Run voltage drop analysis using RedHawk Fusion, as described in Performing Voltage Drop Analysis This second voltage drop analysis run measures the voltage drop after power grid augmentation.\n During standard PG augmentation, the signoff_create_pg_augmentation command performs the following tasks: 1.\n Inserts PG augmentation shapes for the specified regions When the IC Validator tool inserts the PG augmentation shapes, it considers the routing design rules to ensure that it does not create design rule violations.\n By default, the command performs PG augmentation for the entire block.\n To specify the regions for PG augmentation, use one or more of the following options: -coordinates_ground This option restricts PG augmentation for the ground net to the specified regions.\n -excluded_coordinates_ground This option prevents PG augmentation for the ground net in the specified regions.\n If you specify this option with the -coordinates_ground option, the command does not perform PG augmentation in the overlapping regions.\n -coordinates_power This option restricts PG augmentation for the power net to the specified regions.\n -excluded_coordinates_power This option prevents PG augmentation for the power net in the specified regions.\n If you specify this option with the -coordinates_power option, the command does not perform PG augmentation in the overlapping regions.\n The shapes added during PG augmentation have a shape_use attribute of pg_augmentation.\n You can use this attribute to query the shapes added during PG augmentation.\n For example, fc_shell> get_shapes -filter {shape_use=~pg_augmentation} 701 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback 2.\n Generates a summary report that shows the following information for each PG net: The distribution of power grid augmentation shapes added on each layer The total number of metal shapes added, the total number of via shapes added, and the total number of all shapes added 3.\n Saves the updated block to disk See Also Timing-Driven Power Grid Augmentation Guided Power Grid Augmentation Removing PG Augmentation Shapes"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Must-Join Pins"}, {"role": "assistant", "content": "When a pin is defined as a must-join pin, the router connects all terminals of the pin as a single net.\n The terminals of a must-join pin are specified with the must_join_port library pin attribute.\n By default, Zroute connects must-join pins using a random structure, as shown in the following figure: Figure 109 Default Must-Join Pin Connection To achieve better electromagnetic results, Zroute can use the via ladder insertion capabilities to connect the must-join pins with a simplified structure, which is referred to as a pattern-based must-join connection.\n 511 Routing Constraints Feedback The following figure shows the simplified structure: Figure 110 Single-Level Pattern-Based Must-Join Pin Connection The single-level structure shown in Figure 110 is the default structure used for a pattern- based must-join connection.\n To use a multi-level structure, which is shown in Figure 111 set the route.auto_via_ladder.pattern_must_join_over_pin_layer application option to 2.\n Figure 111 Multi-Level Pattern-Based Must-Join Pin Connection Zroute automatically uses a pattern-based must-join pin connection when a library cell pin has a pattern_must_join attribute and you use one of the following commands to perform the routing: route_auto route_group, or route_eco To query cells with the pattern_must_join attribute, use the following command: fc_shell> get_attribute \\ [get_lib_pins -all -of_objects */*/frame ] pattern_must_join To get a list of pins that are marked with the pattern_must_join attribute, use the following command: fc_shell> get_lib_pins -all \\ -of_objects */*/frame -filter \"pattern_must_join==true\" By default, a via ladder is not inserted if there are fixed shapes on higher layers that block the insertion.\n To increase the insertion rate, you can allow staggering of the vias on each level of the via ladder to avoid the fixed shapes.\n To specify the maximum number of tracks allowed for staggering on each level, set the route.auto_via_ladder.pattern_must_join_max_number_stagger_tracks application option.\n You can specify a value between 0 and 9 for each level; the default is 0, which disables staggering.\n 512 Routing Constraints Feedback For example, to allow staggering of up to three tracks on the first level, use the following command: fc_shell> set_app_options -name \\ route.auto_via_ladder.pattern_must_join_max_number_stagger_tracks \\ -value {3 0} Figure 112 shows the possible solutions to avoid a blockage on the M3 layer when you allow staggering of up to three tracks.\n Figure 112 Pattern-Based Must-Join Pin Connection With Staggering By default, the pattern-based must-join connections are updated each time you run the route_auto route_group, or route_eco command.\n During the route_group command, the updates are restricted to only those nets specified in the route_group command by setting the route.auto_via_ladder.update_on_route_group_nets_only application option to true To disable all updates during each of these routing commands, set the route.auto_via_ladder.update_pattern_must_join_during_route application option to false If Zroute cannot create a pattern-based must-join connection, it reports a \"Needs pattern must join pin connection\" DRC violation.\n See Also Inserting Via Ladders"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Integrated Clock-Gate Latency Estimation"}, {"role": "assistant", "content": "By default, the tool estimates and updates clock-gate latencies throughout the compile_fusion command flow.\n This ensures that the tool uses accurate clock-gate latencies during datapath optimization and useful-skew optimization performed before clock tree synthesis, when clocks are ideal.\n If you plan to perform structural multisource clock tree synthesis for your design, ensure that the tool estimates clock-gate latencies that are appropriate for structural multisource clock subtrees by setting the opt.clock_latency_estimation.estimate_smscts_subtrees application option to true To improve the accuracy of the estimated clock-gate latencies, specify clock tree synthesis settings before you run the compile_fusion command.\n Such settings include the clock tree buffer library cell list, the clock tree inverter library cell list, and clock nondefault routing rules.\n Estimated clock latencies are more accurate than user-specified clock latencies.\n In addition, the tool updates the estimated clock latencies after steps such as placement and multibit banking, while user-specified latencies are static values.\n To prevent the tool from estimating the latency for a specific clock gate, set the dont_estimate_clock_latency attribute on its clock pin by using the set_attribute command, as shown in the following example: fc_shell> set_attribute \\ [get_pins {ICG21/CK}] dont_estimate_clock_latency true 304 Controlling Clock-Gate Latencies Feedback For best results, do not use the following features with integrated clock-gate latency estimation: Trial clock tree synthesis To disable this feature, set the compile.flow.trial_clock_tree application option to false Clock-gate optimization To disable this feature, set the compile.flow.optimize_icgs application option to false Placement-aware clock gating The tool automatically disables this feature when clock-gate latency estimation is enabled regardless of the compile.clockgate.physically_aware application option setting.\n User-specified latencies User-specified latencies are set by the set_clock_latency set_clock_gate_latency set_clock_gating_check -setup, or set_path_margin -setup commands.\n The tool does not modify any set_clock_latency constraints that you specify on clock- gating cells.\n Tool-estimated clock-gate latency values are stored as offsets from the user- specified values.\n You can see the offset values by using the write_script -format icc2 command and checking for the set_clock_latency -offset commands in the generated output.\n If you do not set any latency values, the reported offsets are equal to the estimated latency values.\n The estimated latency offset values are not captured in an SDC file generated by the write_sdc command.\n Latency estimates are most accurate if the relative locations of the clock gates and their gated registers do not change during clock tree synthesis.\n To preserve the placement of integrated clock gates, enable the automatic relocation of clock network cells by setting the cts.compile.enable_cell_relocation application option to auto before clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I IC Validator In-Design"}, {"role": "assistant", "content": "The IC Validator In-Design feature provides the ability to use the IC Validator tool to perform physical implementation and verification tasks within the Fusion Compiler tool.\n You can use IC Validator In-Design to perform the following tasks: Signoff design rule checking (the signoff_check_drc command) Fixing the violations detected during signoff design rule checking (the signoff_fix_drc command) Augmenting the power grid based on voltage drop information (the signoff_create_pg_augmentation command) Inserting metal fill (the signoff_create_metal_fill command) Fixing isolated vias (the signoff_fix_isolated_via command) Note: An IC Validator license is required to run the IC Validator In-Design functions.\n To learn about using these IC Validator In-Design functions, see the following topics: Preparing to Run IC Validator In-Design Commands Performing Signoff Design Rule Checking Automatically Fixing Signoff DRC Violations Improving Instance Voltage Drop by Augmenting the Power Grid Inserting Metal Fill With IC Validator In-Design Automatically Fixing Isolated Vias 660 Preparing to Run IC Validator In-Design Commands Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Register Merging"}, {"role": "assistant", "content": "By default, the tool performs register merging during optimization.\n To disable register merging, set the compile.seqmap.enable_register_merging application option to false.\n The default is true.\n Information about which registers are being merged is stored in the.svf file, and the output log file shows information messages about register merging.\n 239 Controlling Mapping and Optimization Feedback You can also control register merging based on the attribute setting by using the set_register_merging command.\n To enable register merging during optimization, specify a true value to set the register merging attribute on the specified object list.\n To disable register merging, specifies a false value for the specified object list.\n The objects can include leaf cells, hierarchical cells, and modules.\n This example specifies not to merge registers that have the u1/count_reg string in the instance names: fc_shell> set_register_merging \"u1/count_reg*\" false This example specifies not to merge all flip-flops of u1 instance name: fc_shell> set_register_merging \"u1\" false"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Setup Files"}, {"role": "assistant", "content": "When you start the Fusion Compiler tool, it automatically executes the commands in the.synopsys_fc.setup file.\n The tool looks for this file both in your home directory and in the project directory (the current working directory in which you start the Fusion Compiler tool).\n The file is read in the following order: 1.\n The.synopsys_fc.setup file in your home directory 2.\n The.synopsys_fc.setup file in the project directory 62 Using the Command Log File Feedback The setup files can contain commands that perform basic tasks, such as initializing application options and setting GUI options.\n You can add commands and Tcl procedures to the setup files in your home and project directories.\n For example, To set application options that define your Fusion Compiler working environment, create setup files in your home directory.\n To set project- or block-specific application options that affect the processing of a block, create a setup file in the design directory.\n See Also Working With the 3DIC Compiler User Interfaces Using Application Options Using Variables Using Tcl Scripts"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Applying Compression to Groups With Straddling Leaf Cells"}, {"role": "assistant", "content": "You can apply compression to a relative placement group with cells that straddle multiple rows or columns, as shown in the following example: fc_shell> add_to_rp_group rp -cells U5 \\ -column 0 -row 0 -num_columns 1 -num_rows 2 fc_shell> set_rp_group_options rp -tiling_type horizontal_compression Figure 181 shows the placement of the relative placement group in the previous example.\n Figure 181 Compression of a Relative Placement Group With a Cell That Straddles Multiple Rows Cell U5 straddles two rows For information about adding cells that straddle multiple rows or columns to a relative placement group, see Adding Leaf Cells 801 Specifying Options for Relative Placement Groups Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Protecting Via Ladders"}, {"role": "assistant", "content": "To prevent via ladders from being edited, set the design.enable_via_ladder_protection application option to true fc_shell> set_app_options -name design.enable_via_ladder_protection \\ -value true When the design.enable_via_ladder_protection application option is true, the following commands process only objects that do not belong to via ladders: remove_shapes remove_vias 459 Inserting Via Ladders Feedback remove_objects set_attribute set_via_def add_to_edit_group If an object belongs to a via ladder, these commands issue a warning message and do not process the object.\n The following example sets the design.enable_via_ladder_protection application option to true and attempts to remove a collection of shapes: fc_shell> set_app_options -name design.enable_via_ladder_protection \\ -value true...\n fc_shell> sizeof_collection [get_shapes -of net1] 77 fc_shell> remove_shapes [get_shapes -of net1] -verbose Warning: Cannot PATH_32_7403 because it is part of via_ladder.\n (NDM-160) 76"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Multivoltage Violations"}, {"role": "assistant", "content": "Design changes in the ECO flow sometimes result in isolation or voltage violations.\n The fix_mv_design command can identify and fix violations for buffer trees and diodes.\n You must use either the -buffer or -diode option with the fix_mv_design command.\n For more information, see the following topics: Fixing Buffers Fixing Diodes 1006 Fixing Multivoltage Violations Feedback If the UPF has not already been committed, the fix_mv_design command automatically commits the UPF before performing any operations.\n Netlist changes that the tool makes as a result of the fix_mv_design command are not guaranteed to be placement or timing legal.\n You must check the design after running the fix_mv_design command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Excluding Boundary Paths"}, {"role": "assistant", "content": "By default, the tool performs concurrent clock and data optimization on all paths in a block.\n However, you might want to exclude paths that are connected to boundary registers, which are registers in the transitive fanout of input ports and transitive fanin of output ports.\n To exclude boundary paths from concurrent clock and data optimization, set the ccd.optimize_boundary_timing application option to false When you do so, you can selectively ignore the boundary paths of some ports during boundary path exclusion by using the ccd.ignore_ports_for_boundary_identification application option.\n The following example disables concurrent clock and data optimization for all boundary paths except for those connected to the ports named IN_A and OUT_A: fc_shell> set_app_options -name ccd.optimize_boundary_timing \\ -value false fc_shell> set_app_options \\ -name ccd.ignore_ports_for_boundary_identification \\ -value {IN_A OUT_A} Even when you disable concurrent clock and data optimization on boundary registers, the tool can still optimize the clock tree fanin cone of these boundary registers, when doing so improves the timing QoR of other internal registers that share the same clock paths.\n To prevent the clock tree fanin of boundary registers from changing, set the ccd.optimize_boundary_timing_upstream application option to false.\n However, doing so heavily restricts the scope of concurrent clock and data optimization.\n These application option settings affect concurrent clock and data optimization performed during the place_opt clock_opt, and route_opt commands.\n 377 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Multibit Optimization"}, {"role": "assistant", "content": "The Fusion Compiler tool can combine (bank) single-bit registers or smaller multibit registers and replace them with equivalent larger multibit registers.\n For example, the tool can combine eight 1-bit registers or four 2-bit register banks and replace them with one 8-bit register bank or two 4-bit register banks.\n The tool merges single-bit registers only if they have the same timing constraints, and it copies the timing constraints to the resulting multibit register.\n 243 Performing Multibit Optimization Feedback Figure 35 Replacing Multiple Single-Bit Register Cells With a Multibit Register Cell Two 1-bit register cells One 2-bit register cell Replace with SI SE SI SE SI SE Replacing single-bit registers with multibit registers reduces Area due to shared transistors and optimized transistor-level layout The total clock tree net length The number of clock tree buffers and clock tree power The tool can also split (debank) large multibit registers into smaller multibit registers or single-bit registers, if it improves the total negative slack.\n Some logic libraries have mixed-drive-strength multibit registers where some bits have a higher drive strength than others.\n For designs that use such cells, if a violating path goes through a lower-drive-strength bit, the tool can rewire the mixed-drive-strength multibit cell such that the violating path goes through a higher-drive-strength bit.\n 244 Performing Multibit Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preparing the Design"}, {"role": "assistant", "content": "The Fusion Compiler tool uses a design library to store your design and its associated library information.\n This topic describes how to create a design library and how to prepare and save your design.\n These steps are explained in the following topics: Defining the Search Path Setting Up Libraries Using Pin Access Checker Utility Analyzing Libraries Reading the Design Mitigating Design Mismatches Importing the Floorplan Information Setting Up Multivoltage Designs Specifying Timing Constraints and Settings Specifying Logical Design Rule Constraints Specifying Clock Gating Constraints Specifying Physical Constraints for Placement and Legalization Specifying Placement Settings Specifying Legalization Settings Controlling the Optimization of Cells, Nets, Pins, and Ports Specifying Settings for Preroute Optimization Setting Up for Power-Related Features Specifying the Routing Resources 72 Defining the Search Path Feedback Handling Design Data Using the Early Data Check Manager Applying Mega-Switch Command Settings"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding a Group of Repeaters"}, {"role": "assistant", "content": "To add a group of repeaters, use the add_group_repeaters command as described in the following sections: Defining a group of repeaters Grouping a list of repeaters Setting Constraints for a Group of Repeaters Adding Voltage Area Aware Group Repeaters 981 Adding a Group of Repeaters Feedback Reporting the Constraints Assigned to a Group of a Repeaters Removing Constraints for a Group of Repeaters Placing Group Repeaters Before Routing Performing On Route Placement of Repeaters Placing Group Repeaters For Multibit Registers Specifying Locations for Repeater Groups Allowing Repeater Groups Over Macros Specifying Cut Space and Cut Distance for Repeater Groups Specifying Horizontal and Vertical Spacing for Repeater Groups Specifying Library Cells as Repeaters Avoiding Overlapping Repeaters With Existing Tap Cells Avoiding Crosstalk During Group Repeater Insertion Previewing Repeater Groups Unplacing the Repeaters Removing Repeater Groups"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Buffer Removal at the Postroute Stage"}, {"role": "assistant", "content": "To improve QoR by removing buffers or pairs of inverters when concurrent clock and data optimization is performed during route_opt command, set the ccd.post_route_buffer_removal application option to true, as shown in the following example: fc_shell> set_app_options -name route_opt.flow.enable_ccd \\ -value true fc_shell> set_app_options -name ccd.post_route_buffer_removal \\ -value true fc_shell> route_opt"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Modifying Routing Corridors"}, {"role": "assistant", "content": "You can make the following modifications to an existing routing corridor: Add new shapes to the routing corridor.\n To add new shapes, use the create_routing_corridor_shape command.\n Use the -routing_corridor option to specify the routing corridor that you want to update.\n You must specify the boundary of the routing corridor by using the -boundary or -path option (for details about these options, see Defining Routing Corridors ).\n You can also specify the minimum and maximum routing layers for the shape by using the -min_layer_name and -max_layer_name options.\n Remove rectangles from the routing corridor.\n To remove shapes, use the remove_routing_corridor_shapes command.\n Change the nets and supernets associated with the routing corridor.\n To add nets or supernets to a routing corridor, use the add_to_routing_corridor command.\n To remove nets or supernets from a routing corridor, use the remove_from_routing_corridor command.\n You can also modify routing corridors in the GUI by using the Create Route Corridor tool, the Move/Resize tool, or the Delete tool, or by editing the attributes in the Properties dialog box.\n 493 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Grouping a list of repeaters"}, {"role": "assistant", "content": "To automatically group a list of repeaters or repeaters of supernets, use the create_repeater_groups command.\n This command takes a list of repeaters, a list of supernets, or bundles of supernets and returns a list of repeater groups created by the set_repeater_group command.\n The command supports both single load and multiple loads supernets.\n create_repeater_groups -supernets supernet_list | \\ -supernet_bundles supernet_bundle_list | \\ -cells cell_list -lib_cells lib_cell_list [-lib_cell_input lib_pin ] \\ [-lib_cell_output lib_pin ] \\ [-group_pin_spacing spacing ] \\ [-ignore_pin_layers]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating ETM Cell Libraries in the Library Manager Tool"}, {"role": "assistant", "content": "After you create an ETM for each mode and corner combination, use the Library Manager tool to combine the ETMs with the corresponding physical information and create a cell library.\n For more information, see the Library Manager User Guide The following Library Manager scripts combine the ETMs created for every mode and corner of the AMS_BLK design with the corresponding physical information and creates the corresponding cell library: # Create a library work space create_workspace -flow etm_moded AMS_BLK # Read the physical data (frame view) read_ndm -views frame AMS_BLK.ndm # Read the ETMs for every scenario read_db -mode_label m1 AMS_BLK_m1_c1.db read_db -mode_label m1 AMS_BLK_m1_c2.db read_db -mode_label m1 AMS_BLK_m1_c3.db read_db -mode_label m2 AMS_BLK_m2_c1.db read_db -mode_label m2 AMS_BLK_m2_c2.db read_db -mode_label m2 AMS_BLK_m2_c3.db # Check the compatibility of the libraries you read in check_workspace # Generate cell library commit_workspace -output AMS_BLK_ETM.ndm When you create a cell library for an ETM, you can use one of the following methods to obtain the physical data: Read the frame view of the corresponding block by using the read_ndm -views frame command.\n Read a LEF file for the block by using the read_lef command.\n Read a GDSII file for the block by using the read_gds command Read an OASIS file for the block by using the read_oasis command.\n 858 Linking to ETMs at the Top Level Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Horizontal and Vertical Spacing for Repeater Groups"}, {"role": "assistant", "content": "Use one of the following mutually exclusive options to control spacing for repeater groups: -horizontal_repeater_spacing specifies the horizontal spacing between repeaters by cell site width.\n -vertical_repeater_spacing specifies the vertical spacing between repeaters by site row height."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting the Preferred Routing Direction for Layers"}, {"role": "assistant", "content": "The Fusion Compiler tool requires that the preferred routing direction is specified for the routing layers defined in the technology file.\n Typically this information is defined in the cell library.\n To set or change the preferred routing direction for a layer, use the following syntax to set its routing_direction attribute: set_attribute -objects layers -name routing_direction -value vertical | horizontal Specify the routing layers by using the layer names from the technology file.\n The layer direction set with this attribute applies only to the current block.\n For example, to set the preferred routing direction to vertical for the M5 and M7 layers, use the following command: fc_shell> set_attribute -objects [get_layers {M5 M7}] \\ -name routing_direction -value vertical Note: Settings made with the create_routing_guide -switch_preferred_direction command, which changes the preferred direction within the area that is covered by the routing guide, override the routing_direction attribute settings.\n To report the user-defined preferred routing direction for one or more routing layers, use the get_attribute command.\n To remove the user-defined preferred routing direction for one or more routing layers, use the remove_attributes command.\n 206 Handling Design Data Using the Early Data Check Manager Feedback See Also Preparing Routing Layers"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I final_opto Stage"}, {"role": "assistant", "content": "The Fusion Compiler tool performs transparent hierarchical optimization during the final_opto stage, which ensures that all interblock and block-top paths are optimized as if the design were flat.\n In this manner, CCD optimizations can address any violations on these paths completely.\n fc_shell> init_hier_optimization -flow pre_route fc_shell> compile_fusion -from final_opto -to final_opto fc_shell> commit_hier_optimization"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Placing ECO Cells"}, {"role": "assistant", "content": "For the unconstrained ECO flow, place the ECO cells by using the place_eco_cells command.\n This command derives the placement of each ECO cell based on the connectivity and the delays associated with the cell.\n The tool then legalizes each ECO cell to the closest unoccupied site.\n The existing cells are untouched to minimize the impact to their placement.\n To place All unplaced cells, use the -unplaced_cells option.\n Specific cells, use the -cells option.\n Only the cells that have changed due to ECO operations, use the -eco_changed_cells option.\n A cell is considered changed if the eco_change_status attribute of the cell has one of the following values: create_cell change_link add_buffer size_cell When you run the eco_netlist command, the tool automatically sets the eco_change_status attribute on the changed cells.\n If you update the design without using the eco_netlist command, you can manually set the eco_change_status attribute by using the set_attribute command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Signal Nets by Using Automatic Routing"}, {"role": "assistant", "content": "Before you run automatic routing, Set the common routing application options For information about the common routing application options, see the route.common_options man page.\n Set the global routing application options For information about the detail routing application options, see the route.global_options man page.\n 537 Routing Signal Nets Feedback Set the track assignment application options For information about the detail routing application options, see the route.track_options man page.\n Set the detail routing application options For information about the detail routing application options, see the route.detail_options man page.\n To run automatic routing, use the route_auto command.\n By default, the route_auto command ignores existing global routes and sequentially invokes global routing, track assignment, and detail routing.\n The tool does not save the block between routing steps.\n Use the following options to change the default behavior: To perform incremental global routing, use the -reuse_existing_global_route true option.\n To stop after track assignment, use the -stop_after_track_assignment true option.\n To change the number of search and repair iterations during detail routing from the default of 40, use the -max_detail_route_iterations option.\n To save the block after each routing step, set the -save_after_global_route -save_after_track_assignment, and -save_after_detail_route options to true The tool uses auto as the default prefix for the saved block names.\n To specify the prefix, use the -save_cell_prefix option.\n By default, the route_auto command is not timing-driven or crosstalk-driven and does not fix soft DRC violations, such as bridge rule violations.\n To enable timing-driven mode, set the route.global.timing_driven route.track.timing_driven, and route.detail.timing_driven application options to true By default, when you enable timing-driving routing, Zroute uses medium effort to assign timing-critical nets to low-resistance metal layers.\n To change the extent to which timing-driven routing prefers lower-resistance metal layers when routing timing-critical nets, set the route.common.rc_driven_setup_effort_level application option.\n To increase the effort level to use more low-resistance metal layers for routing, set the option to high.\n To reduce the effort level, set the option to low.\n To disable resistance- based routing layer preferences, set the option to off 538 Shielding Nets Feedback To enable crosstalk-driven mode, set the route.global.crosstalk_driven route.track.crosstalk_driven, and time.si_enable_analysis application options to true To enable the fixing of soft DRC violations after the final detail routing iteration, set the route.common.post_detail_route_fix_soft_violations application option to true fc_shell> set_app_options \\ -name route.common.post_detail_route_fix_soft_violations \\ -value true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Voltage Area Aware Group Repeaters"}, {"role": "assistant", "content": "Voltage area aware group repeaters choose legal library cells for repeaters based on the corresponding voltage area and updates supply nets for repeaters to meet multivoltage constraints.\n You can use the add_group_repeaters command with specific options to add voltage area aware group repeaters in three different ways, depending on the design methodology: When the design is single-rail buffer only, use the -va_aware option fc_shell> add_group_repeaters -lib_cell <lib_cell> -va_aware When the design is single-rail buffer based on voltage area, use the -voltage_area_specific_lib_cell option 983 Adding a Group of Repeaters Feedback fc_shell> add_group_repeaters -lib_cell <default_lib_cell> \\ -voltage_area_specific_lb_cell {{VA1 libcell1}} {{VA2 libcell2}} When the design is single- and dual-rail buffers, use the -select_mv_buffer option fc_shell> add_group_repeaters -lib_cell <default_lib_cell> \\ -select_mv_buffer {{VA1 SingleRail1 DualRail1}} \\ {{VA1 SingleRail2 DualRail2}} Voltage area aware group repeaters help resolve multivoltage violations by choosing the library cell based on voltage area and repeater location."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating a Frame View"}, {"role": "assistant", "content": "To perform top-level routing, including virtual routing, every abstract view must have a corresponding frame view.\n To create a frame view, use the create_frame command, which extracts the blockage, pin, and via information from the design view.\n After you create the frame view, save the design library by using the save_lib command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimizing Wire Length and Via Count"}, {"role": "assistant", "content": "During detail routing, Zroute optimizes wire length and via count in the areas where DRC violations occur; however, it does not optimize the layout in areas where no DRC violations occur.\n To improve the manufacturing yield, use the optimize_routes command to perform standalone optimization of wire length and via count after performing detail routing and redundant via insertion.\n By default, Zroute selects the nets to reroute based on the overall cost.\n For each selected net, Zroute determines whether to reroute all the shapes in the net or just a portion of them.\n To select the nets to reroute, use the -nets option to specify the nets.\n When you specify the nets to optimize, you can also use the -reroute_all_shapes_in_nets option to control whether Zroute must reroute all the associated net shapes.\n By default, Zroute performs a maximum of 40 detail routing iterations to fix DRC violations that exist after the optimization.\n You can use the -max_detail_route_iterations option to control the maximum number of detail routing iterations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Constraints for a Group of Repeaters"}, {"role": "assistant", "content": "To define the constraints for a group of repeaters, use the set_repeater_group_constraints command.\n The set_repeater_group_constraints command has a lower priority than the corresponding command options in the add_group_repeaters and place_group_repeaters commands.\n set_repeater_group_constraints -type type_list [-horizontal_repeater_spacing spacing ] \\ [-vertical_repeater_spacing spacing ] \\ [-layer_cutting_distance layer_scale_list"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimization"}, {"role": "assistant", "content": "To improve correlation with the postroute stage of the design flow, you can enable global-route-layer-based RC estimation during the compile_fusion and clock_opt commands.\n With this feature, the tool uses global routes for all nets and identifies the layers with the most appropriate per-unit resistance values.\n The nets are then constrained to minimum and maximum layers for preroute RC estimation.\n To enable this feature, use the opt.common.use_route_aware_estimation application option.\n If you set it to auto, the feature is enabled only when there is a variation in the per-unit resistance value of the different routing layers true, the feature is enabled irrespective of the variation in the per-unit resistance value of the different routing layers If you enable this feature, use the remove_route_aware_estimation command to remove all global route based estimation before you perform routing."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Grouping Variant Cell"}, {"role": "assistant", "content": "In the same variant cell group, the library cell variants differ from the master-variant only in mask color (or small geometry), while the timing data is same for these variants.\n The variant cell feature supports the following track_pattern mode siteId_based mode track_pattern mode To specify the first metal layer for track alignment checking in track_pattern mode, use the set_app_options -name eco.placement.first_track_alignment_layer -value name command.\n Figure 221 shows the cell group with two variants.\n 993 Swapping Variant Cell Feedback Figure 221 Cell Group With Two Variants Based on the first track offset of library cells and the pitch value, you can define and derive the variant library cell types, which start from 0.\n Figure 222 shows variant type id definition.\n Figure 222 Variant Type id Definition 994 Swapping Variant Cell Feedback You can detect the variant type id for target cell current location.\n You can also check if the current reference is legal or illegal.\n If it is not legal, select the legal reference from cell group and swap it.\n Figure 223 shows the check and swap with legal reference for target cell.\n Figure 223 Check and Swap With Legal Reference for Target Cell.\n siteId_based mode The variant mapping and flipped mapping information are defined in the cell group.\n Following is an example of the report_cell_groups command.\n Figure 224 shows the cell group definition for mapping id and flipped mapping id.\n 995 Swapping Variant Cell Feedback Figure 224 Cell Group Definition for Mapping id and Flipped Mapping id There are two sub flows for siteId_based mode: 2-Variants and N-Variant.\n Figure 225 shows the 2-Variants and N-Variants sub flows in siteId_based mode 996 Swapping Variant Cell Feedback Figure 225 2-Variants and N-Variants Sub Flows in siteId_based Mode Each variant reference has both legal mapping id and flipped mapping id.\n Figure 226 shows the variant mapping and flipped mapping id.\n 997 Swapping Variant Cell Feedback Figure 226 Variant Mapping and Flipped Mapping id For variant siteId, you can get the cycle and offset from site rows first, then use the cell placed location to do the calculation.\n Figure 227 shows the calculation for variant siteId 998 Swapping Variant Cell Feedback Figure 227 Calculation for Variant siteId"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Marking the Clock Networks"}, {"role": "assistant", "content": "If a block does not contain clock trees, you should perform optimization using ideal clocks.\n To mark all clock networks as ideal, use the following command: foreach_in_collection mode [all_modes] { current_mode $mode set_ideal_network [all_fanout -flat -clock_tree] To model the clock tree effects for placement, you should also define the uncertainty, latency, and transition constraints for each clock by using the set_clock_uncertainty set_clock_latency, and set_clock_transition commands.\n Before performing clock tree synthesis, you must use the remove_ideal_network command to remove the ideal setting on the fanout of the clock trees.\n 172 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking Signoff Design Rules Interactively in the GUI"}, {"role": "assistant", "content": "The Live DRC feature performs interactive signoff design rule checking in the Fusion Compiler GUI.\n Note: This feature requires version P-2019.06 or later of the IC Validator tool.\n To perform interactive signoff design rule checking using Live DRC, 1.\n Set up the IC Validator environment as described in Setting Up the IC Validator Environment 2.\n Set the application options for interactive signoff design rule checking.\n At a minimum, you must specify the following information: The foundry runset to use for design rule checking by setting the signoff.check_drc_live.runset application option The layer mapping file that maps the technology file layers to the runset layers by setting the signoff.physical.layer_map_file application option For information about the options for interactive signoff design rule checking, see Setting Options for Interactive Design Rule Checking 3.\n Ensure that the layout window displays the objects on which you want to perform design rule checking.\n By default, interactive design rule checking uses the frame view of each cell.\n If you want more detail than what is provided in the frame view, use the GDSII or OASIS view for specific cells by specifying the files containing the cells in the signoff.physical.merge_stream_files application option.\n For example, fc_shell> set_app_options \\ -name signoff.physical.merge_stream_files \\ -value {stdcell.gds macro.oas} For information about controlling the objects displayed for design rule checking, see Displaying Objects for Design Rule Checking 4.\n Display the DRC toolbar by right-clicking in the GUI menu bar and selecting DRC Tools.\n For details about the icons in the DRC toolbar, see DRC Toolbar 5.\n Configure the rules to use for design rule checking by choosing Edit > Options > ICV- Live or by clicking the gear icon ( ) in the DRC toolbar.\n 693 Performing Signoff Design Rule Checking Feedback To exclude all density or connectivity rules from design rule checking, set the signoff.check_drc_live.exclude_command_class application option.\n 6.\n Run design rule checking by choosing Edit > ICV > Run ICV-Live on Current View or by clicking the ICV Run button ( ) in the DRC toolbar.\n The first time that you run Live DRC, the tool performs the following initialization steps, which can take a couple of minutes: Processes the IC Validator runset to get the list of available rules and caches the runset Processes the GDSII or OASIS files specified in the signoff.physical.merge_stream_files application option Unless the layers, rules, or stream files change, subsequent runs do not perform this caching and therefore are much quicker.\n To reduce the initial runtime, you can perform this initialization before running Live DRC by using the signoff_init_live_drc command.\n The tool displays the design rule checking results in the error browser.\n You can select errors in the error browser and then fix them interactively.\n For information about using the error browser, see Using the Error Browser See Also Running the signoff_check_drc Command"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Typical Critical Dimension Metal Fill Insertion"}, {"role": "assistant", "content": "Typical critical dimension (TCD) structures can improve yield for designs.\n These structures are made up of marker and fill layers, both of which are added to the block during TCD metal fill insertion.\n To enable TCD metal fill insertion, set the signoff.create_metal_fill.tcd_fill application option to true before running the signoff_create_metal_fill command.\n By default, the command inserts TCD structures on all metal and via layers for the entire block.\n To modify the default behavior, use the following options: -select_layers To restrict the layers on which to insert metal fill, use this option, as described in Specifying the Layers for Metal Fill Insertion -coordinates and -excluded_coordinates To restrict the regions on which to insert metal fill, use these options, as described in Specifying the Regions for Metal Fill Insertion Note: You cannot use timing-driven metal fill insertion with TCD metal fill insertion.\n See Also Removing Metal Fill"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Physical Datapath With Relative Placement"}, {"role": "assistant", "content": "The physical datapath with relative placement capability provides a way for you to create structures in which you specify the relative column and row positions of instances.\n During placement and legalization, these structures, which are placement constraints called relative placement structures, are preserved and the cells in each structure are placed as a single entity.\n Relative placement is also called physical datapath and structured placement.\n The concepts and tasks necessary for doing relative placement are described in these sections: Introduction to Physical Datapath With Relative Placement Relative Placement Flow Creating Relative Placement Groups Adding Objects to a Group Specifying Options for Relative Placement Groups Changing the Structures of Relative Placement Groups Generating Relative Placement Groups for Clock Sinks Performing Placement and Legalization of Relative Placement Groups Analyzing Relative Placement Groups Saving Relative Placement Information Summary of Relative Placement Commands"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Placement Blockages"}, {"role": "assistant", "content": "To remove placement blockages from a block, use the remove_placement_blockage comandcomandsremove_placement_blockage remove_placement_blockages command.\n To remove all placement blockages from a block, use the -all option.\n To remove specific placement blockages from a block, specify the placement blockage names."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Registers"}, {"role": "assistant", "content": "To optimize the design by reducing area, the tool can automatically detect and remove constant registers and unloaded registers.\n You can control this behavior as described in the following topics: Removing Constant Registers Certain registers in a design might never change state because they have constant values on one or more input pins.\n These constant values can either be directly at the input or result from the optimization of fanin logic that eventually leads to a constant input of the register.\n Eliminating such registers can improve area significantly.\n By default, the compile_fusion command removes constant registers and prints an information message in the compile log file.\n This table lists cases in which a sequential element can be eliminated.\n Type of register Data Preset Reset Simple, constant data 1 or 0 Preset and constant data 1 Constant preset Reset and constant data 0 Constant reset Preset, reset, and constant data 1; reset always inactive 240 Controlling Mapping and Optimization Feedback Type of register Data Preset Reset Preset, reset, and constant data 0; preset always inactive 2-input XOR gate where one input is 0 Retention register where D and Q pins are directly connected 1 or 0 To disable constant register removal for the entire block you are synthesizing, set the compile.seqmap.remove_constant_registers application option to false, changing it from its default of true.\n To control constant register removal for a specific cell or module, use the set_constant_register_removal command.\n For example, the following settings prevent the tool from removing the constant register named reg11: fc_shell> set_constant_register_removal reg11 false The following settings globally disables constant register removal for the entire block except for the module named sub5 : fc_shell> set_app_option -name compile.seqmap.remove_constant_registers -value false fc_shell> set_constant_register_removal [get_module sub5] true Information about removed constant registers is written to the verification guidance.svf file and the compile log file.\n To report the constant registers removed during compile, use the report_constant_registers command.\n Removing Unloaded Registers During optimization, the tool deletes registers with outputs that do not drive any load.\n The combinational logic cone associated with the input of the register can also be deleted if the cell is not used in the design.\n Register outputs can become unloaded because of redundancy in the circuit or as a result of constant propagation.\n In some designs where the registers have been instantiated, the outputs might already be unloaded.\n By default, the compile_fusion command removes unloaded registers in the design and prints an information message in the compile log file.\n To disable this capability for the block you are synthesizing, set the compile.seqmap.remove_unloaded_registers application option to false, changing it from its default of true.\n To control unloaded register removal for a specific cell or module, use the set_unloaded_register_removal command.\n 241 Controlling Mapping and Optimization Feedback For example, the following settings prevent the tool from removing the unloaded register named reg22: fc_shell> set_unloaded_register_removal reg22 false The following settings globally disables unloaded register removal for the entire block except for the module named sub5 : fc_shell> set_app_option -name compile.seqmap.remove_unloaded_registers -value false fc_shell> set_unloaded_register_removal [get_module sub5] true To report the unloaded registers that were removed during compile, use the report_unloaded_registers command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Options for Power Grid Augmentation"}, {"role": "assistant", "content": "Before you run the signoff_create_pg_augmentation command, configure the run by setting the application options shown in Table 48.\n To set the application options, use the set_app_options command.\n To see the current settings, use the report_app_options command.\n Table 48 Application Options for Power Grid Augmentation Application option Default Description signoff.\n create_pg_augmentation.\n ground_net_name (required) (none) Specifies the name of the ground net.\n signoff.\n create_pg_augmentation.po wer_net_name (required) (none) Specifies the name of the power net.\n signoff.\n create_pg_augmentation.\n run_dir signoff_create_pg_ augmentation_run Specifies the run directory, which contains the files generated by the signoff_create_pg_augmentation command.\n You can specify either a relative path, in which case the directory is created under the current working directory, or an absolute path.\n 702 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback Table 48 Application Options for Power Grid Augmentation (Continued) Application option Default Description signoff.\n create_pg_augmentation.\n user_defined_options (none) Specifies additional options for the IC Validator command line.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a Soft Placement Blockage"}, {"role": "assistant", "content": "To define a soft blockage, specify the boundary, type ( -type soft option), and optionally the name for the placement blockage.\n For example, to define a soft blockage enclosed by a rectangle with corners at (120, 75) and (230, 200), use the following command: create_placement_blockage -boundary {120 75 230 200} \\ -type soft A soft blockage prevents the initial placement from placing cells within the specified area, but allows legalization, optimization, and clock tree synthesis to do so.\n However, after placement and optimization, during subsequent incremental placement, the tool can move the cells added during legalization, optimization, and clock tree synthesis out of the soft blockage area.\n To prevent this, use the following application option setting: set_app_options -name place.coarse.enable_enhanced_soft_blockages \\ -value true 141 Specifying Physical Constraints for Placement and Legalization Feedback Note: Soft placement blockages are honored during placement, but not during legalization, optimization, or clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Vias"}, {"role": "assistant", "content": "The router supports the following types of via definitions: Simple vias and simple via arrays A simple via is a single-cut via.\n It is specified by a cut layer and the height and width of the rectangular shapes on its cut and metal layers.\n A simple via array is a multiple-cut simple via.\n Simple vias and simple via arrays can be used for the following purposes: Clock or signal routing using nondefault routing rules Redundant via insertion Power and ground routing with advanced via rules Custom vias A custom via is a multiple-cut, odd-shaped via that is created from an arbitrary collection of Manhattan polygons.\n Custom vias can be used only for redundant via insertion.\n Via definitions can come from the following sources: The ContactCode sections of the technology file associated with the design library The technology file can contain definitions for simple vias, simple via arrays, and custom vias.\n For information about defining vias in the technology file, see the Synopsys Technology File and Routing Rules Reference Manual Via rule GENERATE statements in a LEF file The via rule GENERATE statements define simple via arrays.\n For information about defining vias in a LEF file, see Reading Via Definitions from a LEF File User-defined via definitions You can define simple vias, simple via arrays, and custom vias.\n For information about creating user-defined via definitions, see Creating a Via Definition If you want Zroute to use a via definition for signal routing, ensure that is has the following attribute settings: is_default attribute is true is_excluded_for_signal_routing attribute is false In addition, Zroute uses nondefault vias that are explicitly specified in a fat via table in the technology file or in a nondefault routing rule defined by the create_routing_rule command.\n 443 Defining Vias Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Basic Zroute Flow"}, {"role": "assistant", "content": "Figure 99 shows the basic Zroute flow, which includes clock routing, signal routing, DFM optimizations, and route verification.\n Figure 99 Basic Zroute Flow 441 Prerequisites for Routing Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Standard Filler Cell Insertion"}, {"role": "assistant", "content": "By default, the create_stdcell_fillers command fills all empty space in the horizontal standard-cell rows of the entire block by inserting instances of the filler library cells specified by the -lib_cells option.\n You can control the following aspects of the filler cell insertion: The selection of filler cells based on lowest leakage current By default, the command does not consider leakage current when inserting filler cells.\n To reduce the leakage current, use the -leakage_vt_order option to specify the threshold voltage layers in order of decreasing leakage current.\n The command uses this information to select the filler cells with the lowest leakage current that meet the legalization requirements.\n To check whether the filler cells inserted in the current block result in the lowest possible leakage power, use the -leakage_vt_check option with the create_stdcell_fillers command.\n When you use this option, the command only checks the existing filler cells; it does not insert filler cells.\n You must also use the -lib_cells and -leakage_vt_order options to specify the available filler cells.\n The check reports the filler cells that could be replaced with a specified filler cell with lower leakage current without causing legalization errors.\n By default, the command reports a maximum of 100 violations.\n To change the maximum number of reported violations, set the chf.create_stdcell_fillers.max_leakage_vt_order_violations application option.\n 639 Inserting Filler Cells Feedback Note: This feature has the following requirements: You must enable the advanced legalizer by setting the place.legalize.enable_advanced_legalizer application option to true.\n For more information about the advanced legalizer, see Enabling Advanced Legalization Algorithms The threshold voltage layers must be defined in the technology file.\n A threshold voltage layer is identified by a maskType attribute of implant in the Layer section of the technology file.\n The percentage of empty space to fill By default, the command fills all the empty space.\n To leave some empty space, use the -utilization option to specify the percentage of empty space to fill.\n To control the relative amount of various types of filler cells, such as ULVT and LVT decoupling capacitor cells, use the -type_utilization option to specify the insertion percentage for each type of cell.\n The sum of all the percentages specified in this option must be less than or equal to 100.\n When you use this option, the create_stdcell_fillers command might leave some empty spaces.\n To fill these empty spaces, use the -fill_remaining option.\n When you use this option, the command uses the cells specified in the -lib_cells option but not the -type_utilization option to fill the empty spaces.\n For example, # insert 70 percent ULVT cells, 30 percent LVT cells fc_shell> create_stdcell_fillers -lib_cells $FILLER_CELLS \\ -type_utilization { {*/DCAP16*ULVT */DCAP8*ULVT */DCAP4*ULVT */DCAP2*ULVT */DCAP1*ULVT} 70 {*/DCAP16*LVT */DCAP8*LVT */DCAP4*LVT */DCAP2*LVT */DCAP1*LVT} 30 } \\ -fill_remaining By default, the tool randomly selects the filler cells from the specified library cells.\n To control the cell selection priority, use the -prefer_type_ordering option with the -type_utilization option.\n When you use the -prefer_type_ordering option, the tool selects the library cells in each group specified in the -type_utilization option in priority order, from left to right.\n If some of the cells are difficult to insert due to legalization rules or library cell size, specify them before cells that are easier to insert to 640 Inserting Filler Cells Feedback ensure that they are selected.\n For example, when the -prefer_type_ordering option is used with the previous example, the tool First tries to insert the ULVT decoupling capacitors to a utilization of 70 percent, first trying to insert */DCAP16*ULVT cells, then */DCAP8*ULVT cells, and so on Then tries to insert the LVT decoupling capacitors to a utilization of 30 percent, first trying to insert */DCAP16*LVT cells, then */DCAP8*LVT cells, and so on Then filling the remaining gaps using the remaining cells specified in the -lib_cells option # insert 70 percent ULVT cells, 30 percent LVT cells fc_shell> create_stdcell_fillers -lib_cells $FILLER_CELLS \\ -type_utilization { {*/DCAP16*ULVT */DCAP8*ULVT */DCAP4*ULVT */DCAP2*ULVT */DCAP1*ULVT} 70 {*/DCAP16*LVT */DCAP8*LVT */DCAP4*LVT */DCAP2*LVT */DCAP1*LVT} 30 } \\ -prefer_type_ordering -fill_remaining The region in which to insert the filler cells Use the -bboxes option to restrict filler cell insertion to the specified bounding boxes.\n Use the -voltage_area option to restrict filler cell insertion to the specified voltage areas.\n Whether to check for power net violations By default, the command does not check for power net violations, as this check increases runtime and is required only for metal filler cell insertion.\n However, this might result in the remove_stdcell_fillers_with_violation command removing many decoupling capacitors.\n To prevent power net violations caused by filler cell insertion, use the -rules check_pnet option.\n Gap prevention By default, the command assumes that the smallest cell size is one unit site.\n If the smallest cell in your design is larger than one unit site, this could cause gaps during filler cell insertion.\n To prevent the command from inserting filler cells that leave a gap, specify the smallest cell size as a multiple of the unit site by using the -smallest_cell_size option.\n You can specify a value of 1, 2, or 3.\n 641 Inserting Filler Cells Feedback Note: The advanced legalizer automatically prevents gaps; therefore, this option is ignored when place.legalize.enable_advanced_legalizer application option is set to true The handling of hard placement blockages By default, the command honors hard placement blockages and does not insert filler cells in regions affected by these blockages.\n To ignore the hard placement blockages and insert filler cells in those regions, use the -ignore_hard_blockages option.\n The naming convention used to identify the inserted filler cell instances By default, the command uses the following naming convention for inserted filler cells: xofiller!\n filler_library_cell_name number To identify the filler cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the command uses the following naming convention: xofiller!\n prefix filler_library_cell_name number The behavior when the legalizer detects errors By default, the command fails if the legalizer detects an error.\n To force the command to complete filler cell insertion even when errors occur, use the -continue_on_error option.\n When you use this option, the resulting block might have legalization errors that must be fixed manually."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Cell Spacing Constraints for Legalization"}, {"role": "assistant", "content": "Cell spacing constraints control the spacing between a standard cell and another standard cell or a boundary (the chip boundary, a hard macro, a hard macro keepout margin, a hard placement blockage, or a voltage area guard band).\n You assign library cells to groups (the boundaries are in a predefined group named SNPS_BOUNDARY), and then define the required spacing between cells in these groups.\n By default, there are no spacing constraints between standard cells during legalization.\n To enhance yield, you can define the valid spacing between standard cells or between a standard cell and a boundary.\n Note: The support for spacing constraints between standard cells and power or ground nets depends on how the net is represented in the block.\n If the power or ground net is defined as a complete blockage, the legalizer and the check_legality command ignore spacing rule violations between standard cells and the power or ground net.\n If the power or ground net is defined as a partial blockage, the legalizer and the check_legality command check for spacing rule violations between standard cells and the power or ground net.\n Cell spacing constraints are implemented by attaching labels, which are similar to attributes, to the left and right sides of library cells, assuming that the cell is in its north orientation, and specifying the invalid spacings between these labels.\n To define cell spacing constraints, 1.\n Add labels to the library cells that have spacing constraints by using the set_placement_spacing_label command.\n You must specify the following information for each label: The label name (the -name option) The library cells to which to apply the label (the -lib_cells option) The sides of the library cells to which to apply the label (the -side option, which can take a value of right left, or both The label definitions are additive; you can specify the same label to be used on the right side of some cells and the left side of other cells.\n For example, to assign a label named X to the right side of the cellA library cell and the left side of the cellB and cellC library cells, use the following commands: fc_shell> set_placement_spacing_label -name X \\ -lib_cells {cellA} -side right 151 Specifying Physical Constraints for Placement and Legalization Feedback fc_shell> set_placement_spacing_label -name X \\ -lib_cells {cellB cellC} -side left You can assign multiple labels to a side of a library cell.\n For example, to assign labels named Y and Z to the right side of the cellB library cell, use the following commands: fc_shell> set_placement_spacing_label -name Y \\ -lib_cells {cellB} -side right fc_shell> set_placement_spacing_label -name Z \\ -lib_cells {cellB} -side right 2.\n Define the spacing requirements between the labels by using the set_placement_spacing_rule command.\n You must specify the following information for each rule: The labels being constrained (the -labels option) You must specify exactly two labels in each set_spacing_label_rule comandcomandset_spacing_label_rule set_placement_spacing_rule command.\n You can specify any of the labels defined by the set_placement_spacing_label command or the predefined SNPS_BOUNDARY label, which includes the chip boundary, hard macro boundaries, a hard macro keepout margins, hard placement blockages, and voltage area guard bands.\n The two labels can be the same or different.\n The range of invalid spacings, in number of unit tiles For example, to specify that there must be at least one unit tile between labels X and Y (they cannot abut), use the following command: fc_shell> set_placement_spacing_rule -labels {X Y} {0 0} To specify that there must be at least one unit tile between X labels and any boundary, use the following command: fc_shell> set_placement_spacing_rule \\ -labels {X SNPS_BOUNDARY} {0 0} To specify that two X labels cannot have a spacing of two unit tiles, use the following command: fc_shell> set_placement_spacing_rule -labels {X X} {2 2} To specify that labels X and Z must have a spacing of less than two unit tiles or more than four unit tiles, use the following command: fc_shell> set_placement_spacing_rule -labels {X Z} {2 4} 152 Specifying Placement Settings Feedback Caution: The cell spacing constraints are not saved with the block; they apply only to the current session and must be redefined in each session."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading RTL Files in SystemVerilog, Verilog, or VHDL Format"}, {"role": "assistant", "content": "Use the analyze and elaborate commands followed by the set_top_module command.\n The analyze command automatically creates HDL template libraries on disk based on the name of the library provided by the -hdl_library option.\n The location of the HDL template libraries is controlled by the hdlin.hdl_library.default_dirname application option.\n When the -hdl_library option is not specified, the default library name is WORK.\n To specify a different default library name, use the hdlin.hdl_library.default_name application option.\n Note: All of the application options that control the RTL reading behavior have the hdlin prefix.\n The elaborate command builds the module specified without linking the rest of the design.\n Design linking can be performed only after the entire design is in memory, so linking is not performed by the elaborate command.\n This allows multiple elaborate commands to be run before performing the single linking of the entire design.\n The top-level module must be one of the modules that is elaborated.\n Linking of the design and setting the top-level module is done using the set_top_module command.\n The top-level module is given as an argument to the set_top_module command.\n The top-level module must be a module that was previously elaborated with the elaborate command.\n The set_top_module command sets the specified module to be 99 Reading the Design Feedback the top-level design, links the entire design, and creates a single block to be used for the remainder of the synthesis flow.\n The following script reads VHDL files using template libraries and creates a block called top.\n You do not need to specify the location of the template libraries on disk, which is automatically created by the analyze command based on the -hdl_library option.\n analyze -format vhdl -hdl_library BOT_HDL_LIB bot.vhd analyze -format vhdl -hdl_library MID_HDL_LIB mid.vhd analyze -format vhdl top.vhd elaborate top set_top_module top If the top-level design is analyzed to an HDL template library other than the default library, you should provide the HDL template library name for the top-level design using the -hdl_library option.\n For example, analyze -format vhdl -hdl_library BOT_HDL_LIB bot.vhd analyze -format vhdl -hdl_library MID_HDL_LIB mid.vhd analyze -format vhdl -hdl_library TOP_HDL_LIB top.vhd elaborate -hdl_library TOP_HDL_LIB top set_top_module top You can optionally specify the location of the HDL template libraries on disk by using the define_hdl_library command.\n For example, define_hdl_library BOT_HDL_LIB -path./TEMPLATES/BOT_HDL_LIB define_hdl_library MID_HDL_LIB -path./TEMPLATES/MID_HDL_LIB define_hdl_library WORK -path./TEMPLATES/WORK analyze -format vhdl -hdl_library BOT_HDL_LIB bot.vhd analyze -format vhdl -hdl_library MID_HDL_LIB mid.vhd analyze -format vhdl top.vhd elaborate top set_top_module top"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preserving Networks During Optimization"}, {"role": "assistant", "content": "You can preserve networks, such as clock trees, during optimization by using the set_dont_touch_network command.\n The command places the dont_touch attribute on the clocks, pins, or ports to prevent the cells and nets in the transitive fanout of the network from being modified or replaced.\n By default, the command preserves both clock paths and clock as data paths and propagates the dont_touch attribute throughout the hierarchy of the network.\n To preserve clock paths only, specify the -clock_only option.\n To remove the dont_touch attribute from the network, specify the -clear option.\n This example sets the dont_touch attribute on the CLK clock network.\n fc_shell> set_dont_touch_network [get_clocks CLK] This example sets the dont_touch attribute on the CLK clock paths only.\n fc_shell> set_dont_touch_network [get_clocks CLK] -clock_only This example removes the dont_touch attribute from the CLK clock network.\n fc_shell> set_dont_touch_network [get_clocks CLK] -clear"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Synthesizing the Global Clock Trees"}, {"role": "assistant", "content": "Before you insert clock drivers, ensure that all clock tree synthesis settings, including clock routing rules, are specified.\n To perform clock tree synthesis and detail routing to build an H-tree style global clock tree, use the synthesize_multisource_global_clock_trees command.\n When building the H-tree, the tool tries to minimize the skew between the endpoints, which is essential for multisource clock tree synthesis.\n When you use this command to synthesize and detail route a global clock tree, you must specify The clock net to synthesize by using the -nets option.\n The library cells to use by using the -lib_cells option.\n You can specify both single- rail and dual-rail library cells.\n By default, the tool uses the Custom Router to route the H-tree structure and connect to the pins of the clock tree cells.\n If the Custom Router is unable to resolve all routing DRC violation when making pin connections, use the Zroute to make the pin connections by using the -use_zroute_for_pin_connections options.\n To stop the routes at the highest available metal layer close to the pin shape, use the -skip_pin_connections option.\n The following example synthesizes and detail routes a global clock tree for the clock net named clkA.\n fc_shell> synthesize_multisource_global_clock_trees \\ -nets [get_nets clkA] -lib_cells [get_lib_cells my_lib/CKBUF8X] \\ -use_zroute_for_pin_connections You can also use the synthesize_multisource_global_clock_trees command to only perform clock detail routing for an H-tree style clock structure that has already been synthesized.\n 413 Implementing Multisource Clock Trees Feedback When doing so, you must specify The startpoint of the global clock structure, by using the -roots option.\n The endpoints of the global clock structure by using the -leaves option.\n The following example detail routes an existing H-tree style clock structure.\n The startpoint is the port named clk1 and the endpoints are the inputs of a group of mesh drivers.\n fc_shell> synthesize_multisource_global_clock_trees \\ -roots [get_ports clk1] -leaves [get_pins mesh_buf*/A] \\ -use_zroute_for_pin_connections When routing the H-trees, the tool uses the highest routing layers available, based on the routing rules specified for the clock nets.\n These same layers can contain prerouted nets such as power and ground nets.\n To prevent placing clock drivers under these preroutes, which can cause pin accessibility issues, the synthesize_multisource_global_clock_trees command creates temporary placement blockages for the preroutes on the same layers it uses for routing.\n After it completes routing, it removes these temporary placement blockages, as shown in the following example output.\n...\n Net: clk; Rule: htree_ndr; Min Layer: M8; Max Layer: M9...\n Information: Using routing H/V layer pair 'M9'/'M8' for net 'clk'.\n (CTS-659)...\n Converting metal shapes in horizontal layer M9 and vertical layer M8 into placement blockages.\n In total 703 placement blockages created.\n...\n Successfully deleted all temporary placement blockages and the cell map.\n If you specify multirow-height cells with the -lib_cell option of the synthesize_multisource_global_clock_trees command, the tool might not be able to place them due to the temporary placement blockages it creates for the preroutes.\n If so, you can prevent the tool from creating the temporary placement blockages by setting the cts.multisource.enable_pin_accessibility_for_global_clock_trees application option to false To remove a clock structure created by the synthesize_multisource_global_clock_trees command, use the remove_multisource_global_clock_trees command.\n 414 Implementing Multisource Clock Trees Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers at an Interval That is a Ratio of the Net Length"}, {"role": "assistant", "content": "To add buffers at an interval that is a ratio of the total net length, specify A list of one or more library cells to select from by using the -lib_cell option The distance between the driver and the first buffer as a ratio of the total net length by using the -first_distance_length_ratio option The distance between the buffers as a ratio of the total net length by using the -repeater_distance_length_ratio option The following example adds the BUF1 library cell on the nets n3, n21, and n41 at an interval that is 20 percent of the total net length.\n The distance between the driver and the first repeater cell is 10 percent of the total net length.\n fc_shell> add_buffer_on_route {n3 n21 n41} -lib_cell mylib/BUF1 \\ -first_distance_length_ratio 0.1 \\ -repeater_distance_length_ratio 0.2 By default, the tool uses eco_cell and eco_net ad the name prefix of all new cells and nets.\n To specify a name prefix for the new cells and nets, use the -cell_prefix and -net_prefix options, respectively."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Boundary Optimization"}, {"role": "assistant", "content": "You can control boundary optimization across user-specified logical boundaries and match the interface boundary of a physical block with the RTL module interface.\n Boundary optimization allows you to use RTL floorplanning DEF files during block implementation.\n The following figure shows how constants, equal-opposite logic, logic phase, and unloaded ports are propagated through the logical boundaries without and with boundary optimization.\n 219 Controlling Mapping and Optimization Feedback Constant propagation Phase inversion Unloaded propagation Equal-opposite logic propagation Disabled Enabled Disabled Disabled Disabled Enabled Enabled Enabled Disabled: without boundary optimization Enabled: with boundary optimization Global Control By default, all types of boundary optimization are enabled during compile.\n To control boundary optimization globally, use the compile.flow.boundary_optimization application option.\n When you set the compile.flow.boundary_optimization application option to false The tool disables propagation of equal-opposite logic and phase inversion.\n Constants and unloaded ports continue to propagate across hierarchies.\n To disable constant propagation and unloaded propagation globally, set the compile.flow.constant_and_unloaded_propagation_with_no_boundary_opt application option to false.\n The default is true.\n The setting does not affect object-level specifications.\n Controlling Specific Types of Boundary Optimization To control the level of boundary optimization for hierarchical cell pins, hierarchical cells, or blocks, use the set_boundary_optimization command.\n The tool uses the following order of precedence to determine the setting to use during optimization: 1.\n Setting applied on pins of hierarchical cell instances 2.\n Setting applied on hierarchical cell instances, which applies to its pins as well 3.\n Setting applied on modules, which applies to all its cells and pins as well 220 Controlling Mapping and Optimization Feedback The following table shows the level of boundary optimization you can specify with the set_boundary_optimization command and the types of boundary optimization that are enabled for each level.\n Table 20 Levels of Boundary Optimization and the Corresponding Types of Boundary Optimization Performed Level of boundary optimization Constant propagation Unloaded propagation Equal-opposite logic propagation Phase inversion all Enabled Enabled Enabled Enabled auto Enabled Enabled Disabled Disabled none Disabled Disabled Disabled Disabled You can control the specific types of boundary optimization allowed for an object by using the -constant_propagation -unloaded_propagation -equal_opposite_propagation, and -phase_inversion options.\n These options are mutually exclusive with the boundary optimization level specified by using all auto, or none and cannot be used on the same object in a single command invocation.\n If you use the set_boundary_optimization command multiple times on the same object, the effect is additive.\n Based on the types of boundary optimization you enable or disable, the tool sets the constant_propagation unloaded_propagation equal_opposite_propagation, and phase_inversion read-only attributes of the specified object to true or false.\n If you Enable all four types, the tool sets the boundary_optimization read-only attribute to true Disable at least one type, the tool sets the boundary_optimization read-only attribute to false To report boundary optimization settings, use the report_boundary_optimization command.\n To remove them, use the remove_boundary_optimization command.\n The following example Disables all boundary optimization for the U1 cell instance Disables equal-opposite logic propagation and phase inversion for the U2 cell instance Disables constant propagation and phase inversion for the U3/in1 cell pin fc_shell> set_boundary_optimization [get_cells U1] none fc_shell> set_boundary_optimization [get_cells U2] auto fc_shell> set_boundary_optimization [get_pins U3/in1] \\ -constant_propagation false 221 Controlling Mapping and Optimization Feedback fc_shell> set_boundary_optimization [get_pins U3/in1] \\ -phase_inversion false Controlling Phase Inversion To prevent boundary optimization from moving inverters across hierarchical boundaries, set the compile.optimization.enable_hierarchical_inverter application option to false.\n By default, the application option is set to true to allow phase inversion.\n This application option is only effective when boundary optimization is enabled."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Early Data Check Records"}, {"role": "assistant", "content": "You can report the policy set for all checks or for a specific set of checks by using the report_early_data_checks command.\n Use the following options to configure the report: -policy : Reports configuration details for all checks.\n It shows the selected policy and strategy for each check.\n Using the -hierarchical option with the -policy option reports the configuration of the subblocks.\n -checks : Reports the current policy, supported policies, strategies, and help text for each check.\n It supports an asterisk wildcard character (*) as the name of a check.\n Using the -hierarchical option with the -checks option reports the checks of the subblocks.\n -verbose : Reports a summary of all failed checks, policies, strategies applied, and checked objects with comments.\n Using the -hierarchical option with the -verbose 851 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback option reports the records of all failed checks, policies, strategies applied, and checked objects from the subblocks.\n -hierarchical : Traverses the hierarchy and reports the check, policy, strategy, and fail count for each design in the hierarchy.\n In the following example, the report_early_data_checks -hierarchical -policy command reports the policy settings for the hierarchical checks set on the top-level design and the block-level designs: fc_shell> report_early_data_checks -policy **************************************** Report : report_early_data_checks Design : top Version: R-2020.09 Date : Thu Aug 20 23:53:54 2020 **************************************** Design Check Policy Strategy unit_des.nlib:top.design hier.block.instance_bound_to_frame error unit_des.nlib:top.design hier.block.instance_unlinked error unit_des.nlib:top.design hier.block.instance_with_design_type_macro error unit_des.nlib:top.design hier.top.estimated_corner error blk hier.block.abstract_missing_design_view error blk hier.block.abstract_target_use_non_implementation error blk hier.block.abstract_type_non_timing error blk hier.block.leaf_cell_outside_boundary error In the following example, the report_early_data_checks -hierarchical -verbose command reports the repair performed on the checked object and also provides the details of policies, strategies applied, and checked objects on the subblocks.\n fc_shell> report_early_data_checks -hierarchical -verbose ****************************************************** Design Check Policy Strategy Checked Comment Object blk hier.block.missing_leaf_cell_location repair eco_cell Instance location updated to X:150145 Y:69620 While running the top-level early flow, you might run into top-level errors or warnings because of the design data violations in the subblocks or top-level design.\n To use the data checks and policies capability for exploring early flows, you need to know 852 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback the check name corresponding to the top-level errors seen on the design.\n The report_hier_check_description command provides the required information about the checks associated with each top-level error.\n The following example shows the report generated by the report_hier_check_description command: fc_shell> report_hier_check_description ********************************************* Report : Hier check description Design : top Version: R-2020.09 Date : Fri Aug 21 00:08:32 2020 ********************************************* Legend E - error R - repair T - tolerate TOP - Top-Design BLK - Respective Block-Ref Check Error Tolerate Repair Allowed Allowed Description ID ID ID Policies References hier.block.missing_frame_view TL-101 TL-401 TL-501 E|R|T BLK Missing frame view hier.block.abstract_missing_design_view TL-101 TL-401 N/A E|T BLK Missing design view for abstract hier.block.reference_missing_port_location TL-126 TL-426 TL-526 E|R|T BLK Missing location of physical hierarchy boundary pin hier.block.reference_port_outside_boundary TL-127 TL-427 TL-527 E|R|T BLK Location of physical hierarchy boundary pin outside physical hierarchy boundary"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Leaf Cells"}, {"role": "assistant", "content": "To add leaf cells, including physical only cells, to a relative placement group, use the -cells option with the add_to_rp_group command.\n Specify the column and row position within the relative placement group at which to add the cell by using the -column and -row options.\n In a relative placement group, a leaf cell can occupy multiple column positions or multiple row positions, which is known as leaf cell straddling.\n To specify the number of columns and rows the cells occupies, use the -num_columns and -num_rows options respectively.\n If you do not set these options, the default is 1 for both the number of columns and rows.\n For example, to add a leaf cell that occupies two columns and one row at position (0,0), use fc_shell> add_to_rp_group rp1 -cells U23 \\ -column 0 -row 0 -num_columns 2 -num_rows 1 Straddling is for leaf cells only, and not for hierarchical groups or blockages.\n 785 Adding Objects to a Group Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Working With the 3DIC Compiler User Interfaces"}, {"role": "assistant", "content": "The Fusion Compiler tool operates in the X Window environment on Linux.\n IThe tool provides a flexible working environment with both a shell command-line interface and a GUI.\n The CLI is always available during a Fusion Compiler session.\n You can start or exit a session in either the shell or the GUI, and you can open or close the GUI during a session.\n The tool uses Tcl, which is used in many applications in the EDA industry.\n Using Tcl, you can extend the fc_shell command language by writing reusable procedures and scripts (see the Using Tcl With Synopsys Tools manual).\n The following topics describe how to start and exit the tool using the command-line interface.\n Starting the CLI Exiting the Fusion Compiler Tool For information about using the GUI, see the Fusion Compiler Graphical User Interface User Guide The following topics describe how to use the user interfaces of the Fusion Compiler tool: Starting the GUI Closing the GUI 44 Working With the 3DIC Compiler User Interfaces Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Hierarchical Synthesis Using Abstracts"}, {"role": "assistant", "content": "The hierarchical synthesis flow using abstracts consists of the following major steps: 1.\n Partition the design at the top-level and generate the design libraries for the lower-level blocks as described in Partitioning and Planning the Full Chip Design 2.\n Synthesize each lower-level block and generate the block-level information required for top-level synthesis as described in Synthesizing a Subblock 3.\n Synthesize the top-level as described in Synthesizing the Top-Level See Also Overview of Abstract Views Creating Abstract Views Creating a Frame View"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Commands in Parallel"}, {"role": "assistant", "content": "To improve runtime, you can run checking and reporting commands in parallel and return to the parent process after the longest running command in the parallel execution list completes.\n This is useful in batch scripts.\n To run commands in parallel, use the parallel_execute command, as shown in the following example: fc_shell> update_timing fc_shell> parallel_execute { report_cmd1 log_file1 report_cmd2 log_file2 report_cmd3 log_file3...\n 70 Enabling Multicore Processing Feedback To list the supported commands, use the -list_allowed_commands option with the parallel_execute command.\n To specify the maximum number of cores to use when running the parallel_execute command, use the -max_cores option.\n If you do not use this option, the tool uses the value of the -max_cores option from the set_host_options command.\n If you do not specify the maximum number of cores with either command, the tool runs the commands sequentially instead of in parallel.\n To run commands in parallel as a background job, use the redirect -bg command to run the parallel_execute command, as shown in the following example: fc_shell> redirect -bg -max_cores 3 -file bg_log.out { parallel_execute { report_cmd1 log_file1 report_cmd2 log_file2 71 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Routing Guides to Control the Routing Density"}, {"role": "assistant", "content": "By default, the maximum track utilization is 100 percent.\n You can use a routing guide to control the routing density within the routing guide boundary.\n To set the maximum track utilization for layers with a horizontal preferred direction, use the -horizontal_track_utilization option with the create_routing_guide command.\n To set the maximum track utilization for layers with a vertical preferred direction, use the -vertical_track_utilization option with the create_routing_guide command.\n By default, when you create these routing guides, they apply to all layers within the routing guide boundary.\n To set the routing density only for specific layers, use the -layers option to specify the affected layers.\n For example, to set a maximum track utilization of 50 percent for all layers with a horizontal preferred direction and a maximum track utilization of 30 percent for all layers with a vertical preferred direction within the rectangle with its lower-left corner at (0, 0) and its upper-right corner at (100, 100), use the following command: fc_shell> create_routing_guide -boundary {{0.0 0.0} {100.0 100.0}} \\ -horizontal_track_utilization 50 -vertical_track_utilization 30"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Design Analysis"}, {"role": "assistant", "content": "Use the reports generated by Fusion Compiler to analyze and debug your design.\n You can generate reports before and after you compile your design.\n Generate reports before compile to check that you have set attributes, constraints, and design rules properly.\n Generate reports after compile to analyze the results and debug your design.\n This section includes the following topics: Reporting Commands and Examples Measuring Quality of Results Comparing QoR Data Reporting Logic Levels in Batch Mode Querying Specific Message IDs"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Library Requirements for Self-Gating"}, {"role": "assistant", "content": "To perform self-gating, the logic library should contain AND and OR gates to build the self- gating tree.\n The library should also contain XOR, NAND, and OR gates for the comparator gate.\n The integrated clock-gating cells in the library must have the following settings: Sequential cell: latch Control point: before Control signal: scan_enable Observation point: none If the library does not contain cells with these configurations for the corresponding operating conditions, the tool does not insert self-gating cells.\n If an integrated clock gate compatible with self-gating is specified by the set_clock_gate_style command, the self- gating feature uses the same integrated clock gate or the clock gate that is most similar to the one specified.\n 331 Self-Gating Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Shielding Options"}, {"role": "assistant", "content": "The following Custom Router shielding application options allow you to control shielding: Application Option Description custom.route.shield_connect_mesh_overlap Creates multiple shield connections to the power mesh for a shield.\n Creates a shield via at each intersection of a shield path segment and a power strap.\n If a shield does not intersect with any power strap, the default four-pass connecting process is followed.\n custom.route.shield_connect_route Connects shields to ground.\n This option creates long ties that might block future routing.\n Set this option only if you must connect shields to ground.\n Note that these shields are marked as dynamic shields.\n custom.route.shield_connect_to_supply Connects shields to the nearest power mesh.\n 770 Using Custom Routing Application Options Feedback Application Option Description custom.route.shield_min_open_loop Specifies the minimum total length of an open shield-loop placed on the same layer.\n The shield shapes must be longer than shield_min_open_loop, or no shielding will be added.\n custom.route.shield_min_shield_seg Specifies the minimum length of shield segments.\n The default value is 0 um.\n custom.route.shield_min_signal_seg Specifies the minimum length of wiring to shield.\n The default value is 0 um.\n custom.route.shield_net Specifies the net you want to use as the shield.\n When routing a single-signal net, the tool uses this net for the left and bottom shields.\n custom.route.shield_second_net Specifies the secondary net you want to use as the shield.\n When routing a single-signal net, the tool uses this net for the right and top shields."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Redundant Vias on Signal Nets"}, {"role": "assistant", "content": "You can perform redundant via insertion in the following ways: Postroute redundant via insertion Concurrent soft-rule-based redundant via insertion Near 100 percent redundant via insertion In general, you should start with postroute redundant via insertion.\n If postroute redundant via insertion results in a redundant via rate of at least 80 percent, you can try to improve 622 Inserting Redundant Vias Feedback the redundant via rate by using concurrent soft-rule-based redundant via insertion.\n If postroute redundant via insertion results in a redundant via rate of at least 90 percent, you can try to improve the redundant via rate by using near 100 percent redundant via insertion.\n Note: As the redundant via rate increases, it becomes more difficult to converge on the routing design rules and you might see a reduction in signal integrity; therefore, you should use near 100 percent redundant via insertion only for those blocks that truly require such a high redundant via rate.\n In addition, achieving very high redundant via rates might require you to modify the floorplan utilization to allow enough space for the redundant vias.\n The following topics describe the default via mapping table, how to define a customized via mapping table, how to insert redundant vias by using various methods, and how to report the redundant via rate.\n Viewing the Default Via Mapping Table Defining a Customized Via Mapping Table Postroute Redundant Via Insertion Concurrent Soft-Rule-Based Redundant Via Insertion Near 100 Percent Redundant Via Insertion Preserving Timing During Redundant Via Insertion Reporting Redundant Via Rates"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Options for Interactive Design Rule Checking"}, {"role": "assistant", "content": "Before you run interactive design rule checking, configure the run by setting the application options shown in Table 47.\n To set the application options, use the set_app_options command.\n To see the current settings, use the report_app_options command.\n Table 47 Application Options for Interactive Design Rule Checking Application option Default Description signoff.check_drc_live.\n check_only_visible_layers all_layers Controls whether Live DRC includes the rules defined on non-displayed layers.\n By default, Live DRC includes the rules for all layers.\n Valid values are all_layers visible_involved, and visible_only signoff.check_drc_live.\n default_layers (none) Specifies the layers with color masks to write into the default layers for Live DRC.\n signoff.check_drc_live.\n exclude_command_class {{density true} {connectivity true}} Specifies the types of rules to exclude from DRC checking by Live DRC.\n By default, the density and connectivity rules are excluded.\n signoff.check_drc_live.\n halo Specifies the distance in microns by which to expand the region in which Live DRC performs checking.\n signoff.check_drc_live.\n hierarchy_level visible Specifies the maximum hierarchical depth processed by Live DRC..\n signoff.check_drc_live.\n keep_enclosing_results false Specifies whether to keep DRC violations that are outside of the checking region.\n By default, Live DRC keeps only those violations that are fully within the checking region.\n If you set this application option to true Live DRC keeps the DRC violations that are fully inside the trim region.\n The trim region is the checking region plus half of the distance specified by the signoff.check_drc_live.halo application option.\n Violations that are fully outside the trim region are always discarded.\n 697 Performing Signoff Design Rule Checking Feedback Table 47 Application Options for Interactive Design Rule Checking (Continued) Application option Default Description signoff.check_drc_live.\n run_dir signoff_check_drc_live_run Specifies the run directory, which contains the files generated by the interactive signoff design rule checking.\n You can specify either a relative path, in which case the directory is created under the current working directory, or an absolute path.\n signoff.check_drc_live.\n runset (required) (none) Specifies the foundry runset to use for design rule checking.\n signoff.check_drc_live.\n user_defined_options (none) Specifies additional options for the IC Validator command line.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string.\n signoff.physical.\n layer_map_file (required) (none) Specifies the name of the layer mapping file that maps the layer names in the technology file to those in the foundry runset.\n For details about the format of the layer mapping file, see Defining the Layer Mapping for IC Validator In-Design Commands signoff.physical.\n merge_stream_files (none) Specifies the stream (GDSII or OASIS) files to merge into the current block for interactive design rule checking.\n When you use this option, the GDSII or OASIS data replaces the cell library data for the cells defined in the specified stream files.\n 698 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers in a Specified Configuration"}, {"role": "assistant", "content": "To add buffers in an exact configuration, specify the configuration of cells and their locations by using the -user_specified_buffers option.\n With the -user_specified_buffers option, you can add cells only on one net at a time.\n You can insert different types of buffers or inverter pairs by using this option, but you cannot combine both buffers and inverter pairs.\n For each cell you add, use the {instance_name library_cell_name x y layer_name...\n } format with the -user_specified_buffers option to specify the Instance name Library cell to use Coordinates of the exact location Layer at that location with an existing routing shape to connect to Instead of specifying the routing layer, you can have the tool automatically detect the closest routing shape to that location by using the -detect_layer option.\n The following example adds two cells named ECO1 and ECO2 on net n22.\n The ECO1 cell is of type BUF2, at location (100, 70), connecting to a routing shape on the M3 layer.\n The ECO2 cell is of type BUF4, at location (150, 70), also connecting to a routing shape on the M3 layer.\n fc_shell> add_buffer_on_route net22 \\ -user_specified_buffers {ECO1 BUF2 100 70 M3 ECO2 BUF4 150 70 M3}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking for Isolated Vias"}, {"role": "assistant", "content": "To check for isolated vias without fixing them, run the signoff_fix_isolated_via command with the -check_only true option.\n fc_shell> signoff_fix_isolated_via -check_only true 743 Automatically Fixing Isolated Vias Feedback When run you run the signoff_fix_isolated_via command in check-only mode, it generates a summary report that specifies the number of isolated vias detected on each via layer."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Specific Message IDs"}, {"role": "assistant", "content": "To query specific information, warning, or error message IDs that occurred during the previous command step, you can use the check_error command.\n Follow these steps to set up and query the message IDs: 1.\n Specify the message IDs to query by using the global scope application option, shell.common.check_error_list fc_shell> set_app_options -name shell.common.check_error_list \\ -value {DES-001 CMD-005} shell.common.check_error_list {DES-001 CMD-005} 2.\n Use the link command as an example for the previous command step.\n fc_shell> link Error: Current block is not defined.\n (DES-001) 3.\n Query the specified message IDs that were issued during the link command step by using the check_error command.\n fc_shell> check_error -verbose {DES-001} The result shows that the DES-001 message ID was issued during the link command step.\n If none of the specified message IDs was issued, the check_error command returns 0.\n 284 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Signoff DRC Results Files"}, {"role": "assistant", "content": "The signoff_check_drc command writes its output files to the run directory, which is specified by the signoff.check_drc.run_dir application option (or the signoff_check_drc_run directory if you do not use this option).\n The following files are written to the run directory: The error data file By default, the error data generated by the signoff_check_drc command is saved in a file named signoff_check_drc.err, which is stored in the design library.\n To specify the name for the error data file, use the -error_data option.\n The error data shows child- 672 Performing Signoff Design Rule Checking Feedback level errors on only one of the cell instances, which makes it easier to identify lower- level errors.\n You can use the error data file to report or display the DRC violations in the error browser.\n For information about using the error browser, see Using the Error Browser.\n The IC Validator results files You can use the following IC Validator results files for debugging the signoff DRC results: block.LAYOUT_ERRORS This file contains details about the errors detected during the signoff_check_drc run.\n block.RESULTS This file contains a summary of the signoff_check_drc run results.\n signoff_check_drc.log This file contains a summary of the signoff_check_drc run environment.\n icv_config_out This file contains the paths to the top-level block and the cell libraries.\n icv_sdrc.conclude This file contains an error summary report.\n layer.map This file contains the layer mapping file generated by the signoff_check_drc command.\n signoff_check_drc.rc This file contains the IC Validator runset environment variables.\n./run_details directory This directory contains all the data generated by the IC Validator tool for the signoff DRC run.\n For more information about these files, see the IC Validator documentation."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Sequential Clock Gates"}, {"role": "assistant", "content": "If sequential clock gating is enabled, the report_clock_gating command automatically displays a summary table, similar to the following: Sequential Clock Gating Summary | | Bitwidth | |No of sequential clock gates | 2 | | | | | | |No of fanin-based sequential clock gates | 2 (100.0%) | | | | | | |No of sequentially-gated registers | 7 (21.2%) | 7 (21.2%) | | | | | |No of fanin-based sequentially-gated regs | 7 (21.2%) | 7 (21.2%) | | | | | |No of registers not sequentially gated | 26 (78.8%) | 26 (78.8%) | | | | | |Total number of registers | 33 | 33 | Use the report_clock_gating -ungated command to report the reasons why sequential clock gating is not implemented.\n The report is similar to the following: fc_shell> report_clock_gating -ungated Not fanin-based sequentially gated registers Register | Reason for not gating | What's next?\n q2_reg[0] | Register contains object different than edge-triggered flip-flops in its transitive fanin | Check the register transitive fanin q2_reg[4] | Register contains object different than edge-triggered flip-flops in its transitive fanin | Check the register transitive fanin u/reg1_reg[2] | Register enable function is not a cover of the transitive fanin enable function | Check the register enable condition Total 7 320 Reporting Clock-Gating Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Collections of Clock Network Pins"}, {"role": "assistant", "content": "You can create a collection of the pins on a clock network by using the get_clock_tree_pins command.\n By default, this command returns all the pins on all the clock networks of all scenarios.\n You can limit the selection by using one of the following methods Limit it to specific clock by using the -clocks option.\n Limit it to specific scenario, scenarios of modes, or scenarios of corners by using the -scenarios -modes, or -corners option.\n You can further limit the selection by Considering only the clock paths that go from, through, and to specific pins by using the -from -through, and -to options.\n Filtering the pins based on their attributes by using the -filter option.\n For more information about all the available options and all the supported pin attributes, see the man page for the get_clock_tree_pins command.\n The following example creates a collection named clk1_icg_pins, which consists of the pins of integrated-clock-gating cells that are on the clock network of the clock named clk1: fc_shell> set clk1_icg_pin \\ [get_clock_tree_pins -filter is_on_ICG -clocks clk1]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Restricting Optimization to Cell Sizing Only"}, {"role": "assistant", "content": "To allow only sizing on cells or instances during optimization, use the set_size_only command.\n The command places the size_only attribute on specified cells or instances to prevent them from being modified or replaced except cell sizing.\n To query the size_only attribute, use the report_attributes get_attribute, or report_cells command.\n To remove the attribute, use the remove_attributes command or the set_size_only command set to false This example sets the size_only attribute on a specific cell.\n fc_shell> set_size_only [get_cells cell_name] true This example queries the size_only attribute on the cell_name cell.\n fc_shell> get_attribute [get_cells cell_name] size_only 171 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback This example reports all the size_only information on design objects in the current design.\n fc_shell> report_size_only -all"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Groups"}, {"role": "assistant", "content": "You can control the movement of a relative placement group during legalization by using the -move_effort option of the set_rp_group_options command.\n During coarse placement, the tool estimates an initial location for every top-level relative placement group.\n The -move_effort option controls the extent to which a relative placement group can be moved from its initial location to preserve the relative placement without violating relative placement constraints.\n When you change the option setting from a higher effort level to a lower effort level, you reduce the size of the region searched for placement of a relative placement group."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Rail Analysis with Multiple Rail Scenarios"}, {"role": "assistant", "content": "To control scenarios for RedHawk Fusion or RedHawk-SC Fusion rail analysis: Use the rail.scenario_name application option to specify a different design scenario for rail analysis.\n For details, see Specifying a Design Scenario for Rail Analysis 896 Running Rail Analysis with Multiple Rail Scenarios Feedback You can create rail scenarios and associate them with a design scenario in the current design.\n This allows you to identify possible power integrity issues by running optimization and rail analysis on one or more rail scenarios.\n For details, see Creating and Specifying Rail Scenarios for Rail Analysis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Library Cells for Boundary Cell Insertion"}, {"role": "assistant", "content": "Boundary cells include both end-cap cells placed on the left, right, top, and bottom boundaries, and inside and outside corner cells.\n You can specify different library cells for each boundary cell type.\n To specify the library cells, use the following options with the set_boundary_cell_rules command: -left_boundary_cell and -right_boundary_cell These options specify a single library cell that is used for the end-cap cells for the left and right boundaries, respectively.\n -top_boundary_cells and -bottom_boundary_cells These options specify a list of library cells that are used for the end-cap cells for the top and bottom boundaries, respectively.\n The command inserts the cells in the specified order.\n If the remaining space is smaller than the current cell, the command inserts the next cell in order that fits in the remaining space.\n For a vertical-row block, rows start at the bottom and end at the top, so the top boundary is along the left side of the block and the bottom boundary is along the right side of the block.\n For the flipped rows in a double-back block, the top boundary cells are used on the bottom boundaries and the bottom boundary cells are used on the top boundaries.\n -top_tap_cell and -bottom_tap_cell 594 Performing Boundary Cell Insertion Feedback These options specify a single library cell that is used for the tap cells on the top and bottom boundary rows, respectively.\n The tool inserts the tap cells to ensure that the end-cap cells inserted on the top and bottom boundary rows comply with the maximum diffusion-to-tap distance limit.\n -top_left_outside_corner_cell -top_right_outside_corner_cell -bottom_left_outside_corner_cell, and -bottom_right_outside_corner_cell These options specify a single library cell that is used for each outside corner location.\n -top_left_inside_corner_cells -top_right_inside_corner_cells -bottom_left_inside_corner_cells, and -bottom_right_inside_corner_cells These options specify a list of library cells for each inside corner location.\n The tool inserts the first corner cell that matches the size of the inside corner.\n If none matches exactly, it inserts the first cell that can be placed without violating any rules.\n Figure 123 shows the boundary and corner cell locations for a horizontal-row block with two hard macros or blockages.\n Note that the cell locations are flipped when the row is flipped.\n Figure 123 Boundary Cell Locations 595 Performing Boundary Cell Insertion Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Relative Placement Groups for Clock Sinks"}, {"role": "assistant", "content": "You can generate a relative placement group for clock sinks and their drivers in a placed design by using the create_clock_rp_groups command.\n When you run placement and optimization, the tool places the clocks sinks and their drivers based on their relative placement constraints it generated.\n This can improve routability and reduce dynamic power.\n You can control the sinks being considered for relative placement groups as follows: Specify the minimum and maximum of sinks that should be driven by a single driver to be considered by using the -min_sinks and -max_sinks options.\n The default minimum is 2 sinks and the default maximum is 128 sinks.\n Exclude timing critical sinks by using the -timing_driven option.\n By default, the tool excludes all sinks with a negative slack.\n Specify the cells to consider by using the -cells option.\n B default, the tool considers all the sinks.\n 808 Performing Placement and Legalization of Relative Placement Groups Feedback You can control the size and shape of the relative placement group by using one of the following methods: Specify the maximum allowed Manhattan distance between the sinks in one relative placement group by using the -distance option.\n If the Manhattan distance between sinks is more than the specified distance, they are put into separate relative placement groups.\n The default distance is 100 microns.\n Specify a maximum number of rows by using the -max_rp_rows option.\n The default is 32.\n Allow the tool to decide the number of rows and columns based on the distribution of the cells by using the -auto_shape option.\n Before you run the create_clock_rp_groups command, the block must be placed.\n After you create the clock relative placement groups, reset the placement of the block by using the reset_placement command, and rerun placement and optimization by using the place_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Clock Nets"}, {"role": "assistant", "content": "To route clock nets before routing the rest of the nets in the block, use the route_group command with the appropriate option to select the nets.\n To route all clock nets, use the -all_clock_nets option.\n To route specific clock nets, use the -nets option.\n For example, to route all clock nets, use the following command: fc_shell> route_group -all_clock_nets The route_group command runs global routing, track assignment, and detail routing on the clock nets.\n When routing clock nets, the route_group command uses A-tree routing to minimize the distance between each pin and driver.\n When routing clock mesh nets, by default, the route_group command uses Steiner routing, which minimizes the total wire length.\n To use comb routing, set the route.common.clock_topology application option to comb before routing the clock mesh nets.\n By default, if the block contains existing global routes, the route_group command ignores them during global routing.\n To perform incremental global routing by reusing existing global routes, use the -reuse_existing_global_route true option.\n If the block contains existing detail routes for the clock nets, the route_group command performs incremental detail routing.\n By default, the detail router performs a maximum of 40 search and repair iterations.\n To modify the maximum number of detail routing iterations, use the -max_detail_route_iterations option.\n Note: Zroute stops before completing the maximum number of iterations if it determines that all violations have been fixed or that it cannot fix the remaining violations.\n 520 Routing Critical Nets Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Optimization of Cells, Nets, Pins, and Ports"}, {"role": "assistant", "content": "The following topics describe how you can control the optimization of cells, nets, pins, and ports: Resolving Multiple References With the Uniquify Process Preserving Cells and Nets During Optimization Restricting Optimization to Cell Sizing Only Preserving Networks During Optimization Marking the Clock Networks Disabling Design Rule Checking (DRC) Preserving Pin Names During Sizing Preserving Ports of Existing Hierarchies Isolating Input and Output Ports Fixing Multiple-Port Nets Controlling the Addition of New Cells to Modules, Hierarchical Cells, and Voltage Areas Specifying a Cell Name Prefix for Optimization"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking if Library Cells Are Legally Placeable"}, {"role": "assistant", "content": "After you specify all your placement and legalization constraints and settings, you can check if specific library cells can be legally placed in the block by using the analyze_lib_cell_placement -lib_cells command.\n To limit the analysis to a specific region of the core area, use the -region option.\n By default, the command searches the entire core area.\n To limit the analysis to a specific number of sites, use the -trials option.\n By default, the command analyzes 1000 random sites to see if the specified library cells can be placed.\n If you specify a value of 0, the command analyzes all free sites, which can increase runtime To ignore physical design constraints or advanced design rules during placement analysis, use the -no_pdc or -no_adv option.\n To report only the relative placement groups that do not meet a specific threshold, use the -threshold option.\n The tool reports a cell only if the percentage of sites the cell 167 Specifying Legalization Settings Feedback can be placed, relative to the total number of sites analyzed, is less than the specified threshold.\n To limit the report to a maximum number of cells, use the -max_cells option.\n The default is 100, starting with the library cell with the worst pass rate.\n If your block contains library cells that have a very low pass rate, they will cause large displacements and increased runtime during legalization.\n In such cases, review the power plan, cell layout, and the legalization settings to improve the pass rate.\n The following example analyzes all the library cells that have instances in the current block: fc_shell> analyze_lib_cell_placement -lib_cells [add_to_collection \\ -unique \"\" [get_attribute [get_cells -physical_context] ref_phys_block]] Analyzing 215 lib cell(s).\n Warning: Routing direction of metal layer PO is neither \"horizontal\" nor \"vertical\".\n PDC checks will not be performed on this layer.\n (PDC-003) PDC app_options settings ========= place.legalize.enable_prerouted_net_check: 1 place.legalize.num_tracks_for_access_check: 1 place.legalize.use_eol_spacing_for_access_check: 0 place.legalize.allow_touch_track_for_access_check: 1 place.legalize.reduce_conservatism_in_eol_check: 0 place.legalize.preroute_shape_merge_distance: 0.0 Layer M1: cached 0 shapes out of 869 total shapes.\n Layer M2: cached 773 shapes out of 773 total shapes.\n Cached 41757 vias out of 99466 total vias.\n 0.0%...2.0%...4.0%...6.0%...8.0%...10.0%........\n Lib Cell Pass Rate saed32_lvt_lsup:LSUPX1_LVT.frame 0.4450 saed32_lvt_lsup:LSUPX8_LVT.frame 0.4780 saed32_lvt_lsup:LSUPX2_LVT.frame 0.4810 saed32_lvt_lsup:LSUPX4_LVT.frame 0.5040..............\n..............\n..............\n saed32_rvt_std:HADDX1_RVT.frame 0.8600 saed32_lvt_std:OA21X1_LVT.frame 0.8610 168 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking and Fixing Isolated Vias"}, {"role": "assistant", "content": "By default, the signoff_fix_isolated_via command both checks for and fixes isolated vias.\n The command performs the following tasks: 1.\n Checks for isolated vias by using the ranges defined in the signoff.fix_isolated_via.isolated_via_max_range application option 2.\n (Optional) Performs track-based metal fill insertion to insert dummy fill shapes within the specified range around each detected isolated via By default, the signoff_fix_isolated_via command ignores the existing fill data and performs track-based metal fill insertion to insert the fill shapes to use for fixing the isolated vias.\n The fill shapes are inserted on-track following the design rules defined in the technology file.\n Some foundries have additional design rules, which you enable by setting the appropriate TRACK_FILL_FOUNDARY_ name IC Validator variable.\n To set this variable, set the signoff.create_metal_fill.user_defined_options application option, as shown in the following example: fc_shell> set_app_options \\ -name signoff.create_metal_fill.user_defined_options \\ -value {-D TRACK_FILL_FOUNDARY_ name If you have already performed track-based metal fill insertion, you can use the existing fill shapes to fix isolated vias by using the -update_track_fill true option.\n When you use this option, you must use the -track_fill_runset_include_file option to specify the parameter file used for the initial track-based metal fill insertion.\n This parameter file is named track_fill_params.rh and is located in the run directory for the initial run.\n For example, if the run directory for the initial track-based metal fill insertion run is named init_fill, use the following command to fix isolated vias using the existing fill shapes: fc_shell> signoff_fix_isolated_via -update_track_fill true \\ -track_fill_runset_include_file init_fill/track_fill_params.rh For information about performing track-based metal fill insertion, see Track-Based Metal Fill Insertion 744 Automatically Fixing Isolated Vias Feedback 3.\n Inserts fixing vias within the specified range by using one of the following methods, in order of priority: a.\n Inserting a via between an existing non-wide net shape and a fill shape b.\n Extending the line end of an existing non-wide net shape and inserting a via between the extension and a fill shape c.\n Inserting a via between a wide metal shape and a fill shape When inserting the fixing vias, the tool considers the routing rules, including double- patterning rules and nondefault spacing rules, to prevent the introduction of DRC violations.\n Note: If the block is either very congested or very sparse, the signoff_fix_isolated_via command might not be able to fix all isolated vias.\n 4.\n Removes the unused dummy fill shapes 5.\n (Optional) Saves the updated block to disk By default, the signoff_fix_isolated_via command does not save the updated block to disk.\n After running the command, you must use the save_block command to save the updated block to disk.\n To save the block at the end of the signoff_fix_isolated_via run, use the -save_design true option with the signoff_fix_isolated_via command.\n 6.\n Saves the results to disk The signoff_fix_isolated_via command generates the following results files: A summary report This report specifies the number of isolated vias for each via layer before and after fixing.\n An error data file By default, the error data generated by the signoff_fix_isolated_via command is saved in a file named signoff_fix_isolated_via.err.\n To specify the name for the error data file, use the -error_data option.\n To report or display the information in the error data file, use the error browser, as described in the Fusion Compiler Graphical User Interface User Guide 745 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Manually Instantiating Spare Cells"}, {"role": "assistant", "content": "You can manually instantiate spare cells in a block by using one of the following methods: Instantiating them in the Verilog netlist Adding them by using netlist editing commands such as create_cell connect_pin s, and so on When manually instantiating spare cells, you should Evenly distribute the spare cells through the logical hierarchy to better handle ECO changes anywhere in the block Tie their inputs to power or ground, as appropriate, to prevent the spare cells from creating noise and consuming power 956 Manually Instantiating Spare Cells Feedback If a cell meets the following criteria, the tool automatically identifies it as a spare cell: It is not a physical-only cell All inputs except for the clock pin are unconnected or tied to a logic constant The clock pin of the spare cell, if any, can be connected to the clock network.\n All outputs are unconnected If you instantiate the spare cells before you perform physical synthesis on a block, the tool places and legalizes the spare cells during the subsequent physical synthesis steps.\n However, if you instantiate the spare cells in a block that is optimized, placed and legalized, you must place and legalize the spare cells by using the following steps: 1.\n Spread the spare cells by using the spread_spare_cells command.\n By default, this command distributes and places all the spare cells evenly throughout the core area.\n You can specify the spare cells to place by using one of the following two methods: To place specific spare cells, use the -cells option.\n To place all the spare cells that belong to specific voltage areas, use the -voltage_areas option.\n You can control the placement of the spare cells as follows: Specify an area within which to place the spare cells by using the -boundary option.\n Ignore specific types of placement blockages by using the -ignore_blockage_types option.\n By default, the add_spare_cells command honors all placement blockage types.\n Ignore the current cell density and place the spare cells randomly by using the -random_distribution option.\n Specify a percentage of spare cells to be placed based on the cell density distribution by using the -density_aware_ratio option.\n The rest of the spare cells are placed randomly throughout the design.\n By default, all the spare cells are placed based on the cell density distribution.\n For example, if you specify a setting of -density_aware_ratio 80, the tool places 80 percent of the spare cells based on the cell density distribution and 20 percent randomly across the design.\n 2.\n Legalize the spare cells by using the place_eco_cells -legalize_only -cells command.\n 957 Automatically Adding Spare Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Relative Placement Groups"}, {"role": "assistant", "content": "Hierarchical relative placement allows relative placement groups to be embedded within other relative placement groups.\n The embedded groups then are handled similarly to leaf cells.\n 786 Adding Objects to a Group Feedback You can use hierarchical relative placement to simplify the expression of relative placement constraints.\n With hierarchical relative placement, you do not need to provide relative placement information multiple times for a recurring pattern.\n Using hierarchical relative placement provides these benefits: Allows you to organize your relative placement in a manner that is easier to maintain and understand.\n For example, you can create the relative placement group to parallel your Verilog or VHDL organization.\n Allows reuse of a repeating placement pattern, such as an adder.\n Can reduce the number of lines of relative placement information you need to write.\n Allows integrating blocks.\n Provides flexibility for the configuration you want."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Improving the Repeater Levels in Clock Tree"}, {"role": "assistant", "content": "The tool supports clock level improvement which ensures considering level improvement as a metric while building the clock trees and also considers buffering solutions which helps to improve the repeater levels.\n With lesser buffer trees chosen the level improvement takes place locally which further helps to improve the metric for overall clock tree.\n Figure 81 Improving the Repeater Levels in Clock Tree To enable clock level improvement, set the cts.buffering.reduce_clock_level_effort application option to high before the build_clock stage of the clock_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Routing Blockages Along the Boundary Edges"}, {"role": "assistant", "content": "You can insert routing blockages along the preferred-direction edges, the nonpreferred- direction edges, or all edges.\n To insert routing blockages along the preferred-direction edges of the current block, use the derive_perimeter_constraint_objects command with the -perimeter_objects route_blockage_preferred option.\n To insert routing blockages along the preferred-direction edges of the current block, use the derive_perimeter_constraint_objects command with the -perimeter_objects route_blockage_nonpreferred option.\n To insert routing blockages along all edges of the current block, use the derive_perimeter_constraint_objects command with the -perimeter_objects {route_blockage_preferred route_blockage_nonpreferred} option.\n When you specify this object type, the command creates routing blockages parallel to the boundary edges in the specified directions.\n 488 Routing Constraints Feedback By default, The routing blockages are inserted only in the top-level block To insert routing blockages in all soft macros in a hierarchical block, use the -hierarchical option.\n The routing blockages are inserted on all routing layers To insert the routing blockages only on specific routing layers, use the -layers option.\n The routing blockages have the default metal width specified for the routing layer in the technology file To specify a different width in microns for preferred-direction routing blockages, use the -width_preferred option.\n To specify a different width in microns for nonpreferred- direction routing blockages, use the -width_nonpreferred option.\n For information about specifying the default metal width for a layer, see the \"Default Width Rule\" topic in the Synopsys Technology File and Routing Rules Reference Manual The routing blockages are offset from the boundary edges by the minimum spacing specified for the routing layer in the technology file To specify a different offset in microns tor preferred-direction routing blockages, use the -spacing_preferred option.\n To specify a different offset in microns tor nonpreferred- direction routing blockages, use the -spacing_nonpreferred option.\n For information about specifying the minimum spacing for a layer, see the \"Minimum Spacing Rule\" topic in the Synopsys Technology File and Routing Rules Reference Manual The routing blockages do not have pin cutouts To generate pin cutouts, use the -pin_cutout option.\n Cut layer routing blockages are not created To create via blockages, specify the via layers in the -layers option.\n By default, the width of the cut layer routing blockages is the maximum width for the preferred-direction and nonpreferred-direction routing blockages.\n To specify the width for cut layer routing blockages along the horizontal edges, use the -width_cut_layer_horizontal option.\n To specify the width for cut layer routing blockages along the vertical edges, use the -width_cut_layer_vertical option.\n 489 Routing Constraints Feedback By default, the cut layer routing blockages are offset from the boundary edges by the is the maximum spacing for the preferred-direction and nonpreferred-direction routing blockages To specify the spacing for cut layer routing blockages along the horizontal edges, use the -spacing_cut_layer_horizontal option.\n To specify the spacing for cut layer routing blockages along the vertical edges, use the -spacing_cut_layer_vertical option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Handling Endpoints With Balancing Conflicts"}, {"role": "assistant", "content": "In some blocks, the clocks have endpoints that are structurally impossible to balance.\n The Fusion Compiler tool can automatically detect endpoints with balancing conflicts and derive an ignore pin to resolve the conflict.\n This capability is enabled by default for the synthesize_clock_trees and clock_opt commands.\n To disable this capability, set the cts.common.enable_auto_exceptions application option to false 352 Defining the Clock Trees Feedback With this capability, the tool detects and fixes the following types of balancing conflicts: Internal sink pins of modules that have a combinational clock path If a module contains both internal sink pins and combinational clock paths, it is impossible to balance the internal sink pins.\n To resolve the balancing conflict, the tool defines the internal sink pins as ignore pins.\n For example, assume that you have a module that contains a combinational path in the clock network, as shown in figure (a) in Figure 76, which is represented by the extracted timing model (ETM) shown in figure (b).\n Figure 76 Module With Combinational Clock Path Clk_out Clk (a) Netlist (b) ETM with check pin Clk Clk_out Clk_check_pin_1 Combinational delay In this case, the internal check pin inside the ETM has delays coming from the ETM timing library; these delays are considered by clock tree synthesis as sinks and are balanced with other sinks at the top level.\n If the path to the check pin is the shortest path, top-level clock tree synthesis cannot insert buffers on the shortest path and therefore leaves a large skew at the top level.\n Setting the internal check pin as an ignore pin resolves the skew issue coming from the ETM.\n Sink pins that cannot be balanced simultaneously If a block contains two clocks that drive common sinks, one of which is a clock pin that is the parent of another sink, due to a generated clock, it is impossible to simultaneously balance the parent and child clock pins with another common sink.\n To resolve the balancing conflict, the tool defines the parent clock pin as an ignore pin.\n For example, in Figure 77, FF_gen/CLK and FF0_1-10/CLK are sinks of clkb, FF1_1-10/CLK and FF0_1-10/CLK are sinks of clka, and FF_gen/CLK is the parent of 353 Verifying the Clock Trees Feedback FF1_1-10/CLK.\n In this case, the tool defines FF_gen/CLK as an ignore pin for clkb to resolve the balancing conflict.\n Figure 77 Clock Pins That Cannot Be Balanced Simultaneously"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Routing Resources"}, {"role": "assistant", "content": "You can specify the minimum and maximum routing layers both for the block (global layer constraints), for specific nets (net-specific layer constraints), and for unsynthesized clock nets (clock-tree layer constraints).\n If you specify both global layer constraints and net- specific layer constraints, the net-specific constraints override the global constraints.\n In addition to constraining the routing layers, you can also specify a preferred routing direction for each layer.\n The routing layer constraints are used by RC estimation, congestion analysis, and routing.\n Because these constraints affect RC estimation and congestion analysis as well as routing, you should set these constraints before performing placement on the block.\n The following topics describe how to specify routing layer constraints, preferred routing direction, and via ladders : Specifying the Global Layer Constraints Specifying Net-Specific Layer Constraints Specifying Clock-Tree Layer Constraints Enabling Level-Based Clock Nondefault Routing Rule Setting the Preferred Routing Direction for Layers"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Stages"}, {"role": "assistant", "content": "During the early stages of a design cycle, placement constraints can be inaccurate causing the tool to exit during coarse placement.\n To continue with placement when a region is overutilized due to it being too small or being covered by blockages, set the place.coarse.handle_early_data application option to true.\n When you do so, the tool issues warning messages as shown in the following example output: Warning: Utilization of move_bound_0 is 109%.\n (PLACE-089) Warning: Placement continues with over utilized regions in the design.\n (PLACE-083) Warning: Overutilized regions for move_bound_0 are modified by removal of partial and full blockages.\n (PLACE-084) When you enable this feature, the tool prints a warning message if the utilization of a region is more that 90 percent.\n To change this threshold, use the place.coarse.utilization_warning_threshold application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Displaying Block-Level Rail Results"}, {"role": "assistant", "content": "After you perform rail analysis on the top-level design, the tool saves the analysis results in the top-level rail database.\n To locate issues that are reported in a block-level design, run the open_rail_result command with the -top_design and -block_instance options to excerpt block-level instance data from the top-level rail database.\n The tool then displays maps for the specified block instances based on the extracted block-level rail analysis data.\n Note: The excerpt of the block-level rail results is saved in memory and is deleted when you exit the current session.\n The following example opens the rail result named REDHAWK_RESULT in the./ RAIL_DATABASE directory; the result is the rail analysis result for the top design named bit_coin.\n The example then creates an excerpt of rail analysis data for the block instance slice_5.\n Note that in this example, the block design of instance slice_5 has to be opened, not the top-level design.\n fc_shell> open_lib block.nlib fc_shell> open_block block fc_shell> set_app_options -name rail.database -value RAIL_DATABASE fc_shell> open_rail_result REDHAWK_RESULT \\ -top_design bit_coin \\ -block_instance slice_5 fc_shell> report_rail_result"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading Blocks for Signoff Design Rule Checking"}, {"role": "assistant", "content": "By default, the IC Validator tool reads the design view for the top-level block and library cell instances, and the pin information from the frame view for the macro cell and I/O pad cell instances.\n To read both the pin information and the routing blockages from the frame view for macro cells and I/O pad cells, set the signoff.check_drc.ignore_blockages_in_cells application option to false To read the GDSII or OASIS data for specific reference cells, specify the stream files by setting the signoff.physical.merge_stream_files application option.\n When you use this option, the GDSII or OASIS data replaces the cell library view for the cells defined in the specified stream files, except for cells in the cell libraries specified in the signoff.physical.merge_exclude_libraries application option.\n To read the layout view for specific reference cells, specify the cells by setting the signoff.check_drc.read_layout_views application option.\n The layout view is identical to the GDSII or OASIS data that was used to create it, but reduces the runtime for signoff design rule checking.\n Note: By default, layout views are not included in the cell libraries.\n To save the layout views, you must set the lib.workspace.save_layout_views application option to true during library preparation, as described in the Library Manager User Guide To read the design view for specific reference cells, specify the cells by setting the signoff.check_drc.read_design_views application option.\n Note: By default, design views are not included in the cell libraries.\n To save the design views, you must set the lib.workspace.save_design_views application option to true during library preparation, as described in the Library Manager User Guide The order of precedence for child cell data is 1.\n GDSII or OASIS data specified with the signoff.physical.merge_stream_files application option 2.\n Layout views specified with the signoff.check_drc.read_layout_views application option If the IC Validator tool cannot find a layout view and the cell is specified in the signoff.check_drc.read_design_views application option, it reads the design view.\n 669 Performing Signoff Design Rule Checking Feedback Otherwise, it reads the frame view.\n If it cannot find the frame view, the cell is ignored during design rule checking.\n 3.\n Design views specified with the signoff.check_drc.read_design_views application option If the IC Validator tool cannot find a design view, it reads the frame view instead.\n If it cannot find the frame view, the cell is ignored during design rule checking.\n 4.\n Frame views For example, to read the design view for all blocks, use the following commands: fc_shell> set_app_options \\ -name signoff.check_drc.read_design_views -value {*} fc_shell> signoff_check_drc To read the design view for the top-level block and all instances of reference cells whose name start with mc, and the frame view for all other child blocks, use the following commands: fc_shell> set_app_options \\ -name signoff.check_drc.read_design_views -value {mc*} fc_shell> signoff_check_drc"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up for Variant-Aware Legalization"}, {"role": "assistant", "content": "Some libraries provide sets of functionally equivalent cells that can be legalized in different locations.\n This allows the tool to legalize a cell by replacing it with a variant, instead of moving the cell.\n The following figure shows functionally equivalent cells with varying pin locations.\n With variant-aware legalization, if a cell pin does not align with a track, the tool can try using its variant to align the cell pin to the track.\n Figure 23 Equivalent Cells With Different Pin Locations 165 Specifying Legalization Settings Feedback The following figure shows functionally equivalent cells with different pin colors, which need to be aligned to a track of the same color.\n With variant-aware legalization, if a cell pin does not align with the corresponding colored track, the tool can try using its variant with a different colored pin and try aligning it to the appropriately colored track.\n Figure 24 Equivalent Cells With Pins of Different Colors The following topics describe the tasks you need to perform to set up the reference libraries and design for variant-aware legalization: Defining Equivalent Cell Groups Enabling Variant-Aware Legalization"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Placing and Mapping ECO Cells to Spare Cells"}, {"role": "assistant", "content": "For the freeze silicon ECO flow, place and map the ECO cells to spare cells by using the place_freeze_silicon command.\n By default, this command places and maps all ECO cells.\n To place and map specific ECO cells, use the -cells option.\n The following example places and maps the ECO cells named ECO1, ECO2, and ECO3: fc_shell> place_freeze_silicon -cells {ECO1 ECO2 ECO3} This command places each ECO cell and maps it to the nearest matching spare cell.\n Cells that are deleted as a result of the ECO changes are not removed from the design.\n They are converted to spare cells and remain in the design.\n When you use the place_freeze_silicon command, you can Place the ECO cells by the target spare cells, but not map them to the spare cells, by using the -no_spare_cell_swapping option This feature allows you to place the ECO cells and analyze the QoR before you map them.\n 977 Placing and Mapping ECO Cells to Spare Cells Feedback Map the spare cells that are already placed by the target spare cells by using the -map_spare_cells_only option.\n Generate an ECO cell to spare cell mapping file by using the -write_map_file command.\n You can the mapping file, if necessary, and map the ECO cells by using the map_freeze_silicon command.\n Specify a minimum distance between ECO cells that are mapped to programmable filler cells by using the -min_filler_distance option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Applying Required Settings for Advanced Technology Nodes"}, {"role": "assistant", "content": "To apply placement, legalization, routing, and extraction setting specific to 12 or 7 nanometer technology nodes, use the set_technology command with the -node 12 or -node 7 option.\n 208 Applying Mega-Switch Command Settings Feedback When using this command, perform the following steps before placement, optimization, and routing: 1.\n Load and link the design.\n 2.\n Apply the settings required for the technology nodes by using the set_technology -node command, as shown in the following example: fc_shell> set_technology -node 7 3.\n (Optional) Report the technology-node settings by using the set_technology -report_only command.\n 4.\n Apply your design-specific application option or command settings to override the generic setting of the set_technology command.\n When you save the design library with the save_lib command, the technology-node setting is saved.\n Note: After you specify a technology node with the set_technology command, you cannot change it.\n For more information about which ASIC technologies are supported by this command, contact Synopsys Support."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Signoff Design Rule Checking"}, {"role": "assistant", "content": "By default, signoff design rule checking has the following default behavior: Performs checking on all cell types (standard cells, filler cells, macro cells, and I/O pad cells) To exclude certain cell types from design rule checking, set the signoff.check_drc.\n excluded_cell_types application option.\n Specify one or more of the following values: lib_cell (standard cells), filler (filler cells), macro (macro cells), and pad (I/O pad cells).\n Performs design rule checking on the entire block To perform design rule checking only on those areas of the block that have been modified since the last run, use the -auto_eco option.\n Note: You can use this option only if you have previously run the signoff_check_drc command and the percentage of change to the block since that run is less than the change threshold.\n The default change threshold is 20 percent; to modify the change threshold, set the signoff.check_drc.auto_eco_threshold_value application option.\n 670 Performing Signoff Design Rule Checking Feedback By default, the tool compares the current block to the version used for the previous signoff_check_drc run.\n To compare the current block to a different block, use the -pre_eco_design option to specify the comparison block.\n The tool gets the information required for incremental change detection from the error data file named block _sdrc.err, where block is either the current block name or the name specified by the -pre_eco_design option.\n By default, the DRC violations reported after performing incremental signoff design rule checking represent only the DRC violations detected in the changed areas of the block.\n To merge the initial DRC violations with the DRC violations detected during the incremental run, set the signoff.check_drc.merge_incremental_error_data application option to true before running the signoff_check_drc -auto_eco command.\n By default, the command reads the initial DRC violations from the signoff_check_drc.err file.\n To read the initial DRC violations from a different error data file, specify the file name with the signoff.check_drc.merge_base_error_name application option.\n To perform design rule checking only in specific regions, use the -coordinates option, the -excluded_coordinates option, or both.\n You can specify one or more regions for both options.\n If you specify both options, the command does not check design rules in the overlapping regions.\n To specify the coordinates, use the following format: {{x } {x }...\n {x }} Note that there must be a space between each set of coordinates.\n Performs design rule checking for all rules specified in the foundry runset To check only specific rules, use the -select_rules option.\n Specify the rules by specifying a matching pattern for the rule names.\n The rule names are specified in the COMMENT section in the runset file.\n To prevent checking of specific rules, use the -unselect_rules option.\n Specify the rules by specifying a matching pattern for the rule names.\n The rule names are specified in the COMMENT section in the runset file.\n Note: You can use this option with the -select_rules option to customize the set of rules checked by the signoff_check_drc command.\n For example, to restrict the signoff_check_drc command to route validation, select the metal layer rules and exclude the metal density rules.\n 671 Performing Signoff Design Rule Checking Feedback Performs design rule checking for all routing layers To perform design rule checking only on specific routing layers, use the -select_layers option.\n Specify the routing layers by using the layer names from the technology file.\n To perform design rule checking on all runset layers, including nonrouting layers, use the -check_all_runset_layers true option.\n You would typically use this setting to perform a quick design rule check on the entire block after you complete design rule checking on the routing layers.\n When you use this option, the block information comes from the design view and the validation tool checks all layers, including the nonrouting layers.\n Reports a maximum of 1000 errors for each rule, including both top-level and child- level violations To override the maximum error count, set the signoff.check_drc.max_errors_per_rule application option.\n To ignore child-level violations, set the signoff.check_drc.ignore_child_cell_errors application option to true The signoff_check_drc command uses the options that you specify to generate the command used to invoke signoff design rule checking in the IC Validator tool.\n You can specify additional options for the IC Validator command line by setting the signoff.check_drc.user_defined_options application option.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string.\n Generating Input for the Automatic Fixing Flow If you plan to use the signoff DRC results as input to the automatic fixing flow, set the signoff.check_drc.ignore_child_cell_errors application option to true before you run the signoff_check_drc command.\n Zroute can fix only top-level violations; using this option ensures that signoff design rule checking reports only fixable violations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Clock Gates in Multivoltage Designs"}, {"role": "assistant", "content": "In a multivoltage design, the different hierarchies of the design might have different operating conditions and use different target library subsets.\n When inserting clock-gating cells in a multivoltage design, the tool chooses the appropriate library cells based on the specified clock-gating style as well as the operating conditions that match the operating conditions of the hierarchical cell of the design.\n If you do not specify a clock-gating style, the tool uses a default style where the test point is before and the observation output is false If the tool does not find a library cell that suits the clock-gating style and the operating conditions, the tool issues a warning message and does not insert a clock-gating cell.\n To check whether there are integrated clock-gate cells available for clock-gate insertion, use the check_clock_gate_library_cell_availability command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock Gating and Multibit Registers"}, {"role": "assistant", "content": "In the Fusion Compiler flow, clock gating works in conjunction with multibit register mapping.\n The multibit packing ratio has a higher precedence than clock gating.\n The following command enables multibit mapping: fc_shell> set_app_options -name compile.flow.enable_multibit -value true Clock-gating cells are not inserted to gate preinstantiated multibit registers.\n For more information on clock gating reports, see Reporting Clock-Gating Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Improving the Correlation Between the SMSCTS and CCD"}, {"role": "assistant", "content": "To improve the correlation between the structural multisource clock tree synthesis (SMSCTS) and concurrent clock and data (CCD), the Fusion Compiler tool supports the enhanced CCD engine with more SMSCTS specific offsets.\n This improves the CCD balance point implementation and timing after the SMSCTS step in the clock_opt command.\n To enable the improved correlation between the SMSCTS and CCD in the compile_fusion command and build_clock stage of the clock_opt command, set the cts.multisource.enable_subtree_synthesis_aware_ccd application option to true The improved correlation between the SMSCTS and CCD: Improves the overall latency implementation after SMSCTS in the clock_opt command.\n Reduces long and short path violations.\n Improves timing after the clock_opt command with CCD offsets.\n 409 Implementing Multisource Clock Trees Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Placement Settings"}, {"role": "assistant", "content": "The tool performs coarse placement at various points during the preroute stage of the design flow.\n The following topics describe settings for controlling coarse placement: Performing Placement With Inaccurate Constraints at Early Stages Generating Automatic Group Bounds for Clock Gating Cells Controlling the Placement Density Controlling Congestion-Driven Restructuring During Placement Reducing Congestion Considering Wide Cell Density During Placement Considering the Effects of Cell Pins During Placement Considering the Congestion Effects Due to the Nondefault Routing Rules of Clock Nets Considering the Effects of Clock Gating Cells of Sequential Arrays During Placement Considering Legalization Effects During Placement Considering DFT Connections During Placement 153 Specifying Placement Settings Feedback Considering the Dynamic Power QoR During Placement Performing IR-Drop-Aware Placement Spreading Repeater Cells During Placement"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Up for Dynamic Power Shaping"}, {"role": "assistant", "content": "To set up for dynamic power shaping, perform the following steps: 1.\n Ensure UPF settings are specified for multiple-power nets.\n 2.\n Ensure both setup and hold scenarios are created and are active.\n 3.\n (Optional) Control the power analysis and optimization performed during dynamic power shaping as follows: Specify the scenarios to focus on by setting the ccd.dps.focus_power_scenario application option.\n By default, the tool focuses on all active scenarios.\n When the design has many active scenarios, specifying one or two scenarios, as shown in this example, can reduce the runtime.\n fc_shell> set_app_options -name \\ -name ccd.dps.focus_power_scenario -value {{S1 S2}} Control the type of internal power analysis performed by setting the ccd.dps.use_case_type application option.\n By default, this application option is set to autovector.\n With this setting, the tool runs internal power analysis with a 20 percent probability of toggling a flip-flop and all flip-flops are effectively clocked every cycle.\n However, the clock gating is not modeled.\n If you set this application option to activity, the tool chooses probability of toggling a flip-flop and the clock-gating model based on the activity.\n Define the overall dynamic power optimization goal by setting the ccd.dps.optimize_power_target_modes application option.\n To reduce the global peak current, where the optimization goal is to reduce the total peak current, set this application option to global_peak To reduce the local peak current in windows stepped across the design, where the optimization goal is to reduce voltage drop violations, set this application option to stepped_psgs, which is the default.\n Specify the tradeoff between power and setup timing during dynamic power shaping by setting the ccd.dps.optimize_setup_tradeoff_level application option to low medium (default), or high Specify the tradeoff between power and hold timing during dynamic power shaping by setting the ccd.dps.optimize_hold_tradeoff_level application option to low medium (default), or high 197 Setting Up for Power-Related Features Feedback You can further control the power analysis and optimization performed during dynamic power shaping by using application options such as ccd.dps.use_cases ccd.dps.auto_targets, and ccd.dps.auto_target_constraint_parameters which are more complex to use.\n For more information on these application options, see the corresponding man pages."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using the compile_fusion Command"}, {"role": "assistant", "content": "To perform unified physical synthesis, use the compile_fusion command.\n The compile_fusion command consists of the following stages: 1.\n initial_map During this stage, the tool maps the design and performs area optimization.\n 2.\n logic_opt During this stage, the tool performs logic-based delay optimization.\n 3.\n initial_place During this stage, the tool merges the clock-gating logic and performs coarse placement.\n 4.\n initial_drc During this stage, the tool removes existing buffer trees and performs high-fanout-net synthesis and electrical DRC violation fixing.\n 5.\n initial_opto During this stage, the tool performs physical optimization and incremental placement.\n 6.\n final_place During this stage, the tool performs final placement to improve timing and congestion.\n 7.\n final_opto During this stage, the tool performs final optimization and legalization to improve timing, power, and logical DRCs.\n 213 Performing Unified Physical Synthesis Feedback When you run the compile_fusion command, by default, the tool runs all stages.\n To run only some of these stages, use the -from option to specify the stage from which you want to begin and the -to option to specify the stage after which you want to end.\n If you do not specify the -from option, the tool begins from the initial_place stage.\n Similarly, if you do not specify the -to option, the tool continues until the final_opto stage is completed.\n Breaking the compile_fusion command in to stages allows you to perform different tasks between the stages, such as changing constraints or settings, generating reports for analysis, performing other implementation tasks such as design planning or DFT insertion, and so on.\n If you make manual changes to the design between stages, ensure the changes honor the expected state of the design.\n For example, the design is expected to be mapped after the initial_map stage.\n Therefore, do not introduce unmapped logic to the design after this stage.\n You can repeat a stage; however, ensure that you run all stages in the correct sequence.\n The following example runs the compile_fusion command until it completes the initial_opto stage, performs analysis, changes an application option setting, and restarts by running the initial_opto stage again.\n fc_shell> compile_fusion -to initial_opto fc_shell> report_qor fc_shell> set_app_option \\ -name opt.common.advanced_logic_restructuring_mode -value timing fc_shell> compile_fusion -from initial_opto In the following situations, the design can contain unmapped cells after the compile_fusion command: Missing the required cells in the library User-specified restrictions on the required library cells When a design contains unmapped cells, the compile_fusion command continues the compilation and provides an estimated area for the unmapped cells.\n Unmapped cells are marked with the is_unmapped attribute.\n To query unmapped cells in a netlist, use the following command: fc_shell> get_cells -hierarchical -filter \"is_unmapped==true\" Note the following limitations: DesignWare operators are not mitigated.\n Only placement information is stored in the database after mitigation; routing information is not saved.\n 214 Performing Unified Physical Synthesis Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Verifying Via Ladders"}, {"role": "assistant", "content": "To verify that the via ladders in the block match the via ladder constraints and are properly connected to pins, use the verify_via_ladders command.\n By default, this command checks all via ladders.\n To restrict the checking to specific nets, use the -nets option.\n Note: If you use the -shift_vias_on_transition_layers true option when you insert the via ladders, you must also use this option when you verify the via ladders; otherwise, the command reports false violations.\n A via ladder matches the via ladder constraints if the pattern of connected vias and wires for the via ladder structure satisfies any of the via ladder templates assigned to the connected pin.\n The command flags a violation in the following situations: A via ladder is connected to a pin that does not have a via ladder constraint A via ladder is connected to a pin with a via ladder constraint, but none of the templates correctly describe the current via ladder structure A pin has a via ladder constraint, but does not have a via ladder connected to it 460 Inserting Via Ladders Feedback A via ladder is properly connected to a pin if all the via enclosures at the base of the via ladder touch the same pin and that pin is logically connected to the same net as the via ladder.\n The command flags a violation in the following situations: An enclosure of the via ladder base touches a different pin, unless the pins are must- join pins that belong to the same must-join set An enclosure of the via ladder base does not touch any pin An enclosure of the via ladder touches a pin that is not of the same net as the via ladder By default, the verify_via_ladders command reports the via ladder insertion status for each target pin, which can result in a very large report.\n To limit the number of via ladders reported for each category to 40, use the -report_all_via_ladders false option with the verify_via_ladders command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Scan Synthesis Flow"}, {"role": "assistant", "content": "Specifying synthesis constraints specific to DFT insertion for certain registers must be mapped to non-scan versions and the core wrapper reuse threshold.\n To specify the DFT configurations: 1.\n Execute compile_fusion -from initial_map -to logic_opto 2.\n Specify the DFT configurations such as DFT signals, chain counts, test modes, and so on.\n 3.\n Complete the DFT insertion.\n For more information about DFT insertion, see the TestMAX DFT User Guide.\n 4.\n Execute compile_fusion -from initial_place Note: You must create scan test and scan in and scan out ports before importing floorplan information.\n In addition, the floorplan must contain the physical locations of the test and scan ports.\n Scan-Only Script Example # Set up the library...\n # Read the design...\n # Specify any registers that should not be mapped to scan equivalent, and also to be excluded from any scan chains set_scan_element false <registers that should not be mapped to scan equivalent> # Run compile_fusion to logic_opto step compile_fusion -to logic_opto # DFT Specifications: # Scan chain setup set_scan_configuration -chain_count sc # DFT signals # Clocks and asynchronous resets 259 Performing Test Insertion and Scan Synthesis Feedback set_dft_signal -view existing -type ScanClock \\ -port clk -timing [list 45 55] set_dft_signal -view existing -type Reset \\ -port reset_n -active_state0 # Scan in, scan out, scan enable set_dft_signal -view spec -type ScanDataIn -port SI set_dft_signal -view spec -type ScanDataOut -port SO set_dft_signal -view spec -type ScanEnable -port SE # Scan Synthesis steps create_test_protocol dft_drc preview_dft insert_dft # Continue from initial_place step compile_fusion -from initial_place -to initial_opto # Perform post dft_drc dft_drc -test_mode Internal_scan # Generate post dft_drc verbose report report_dft_drc_violations -test_mode Internal_scan -rule all # Write out Scandef write_scan_def design.scan.def # Write out test model write_test_model -output design.ctl # Save output for TetraMAX write_test_protocol -output design.scan.spf -test_mode Internal_scan write_verilog -hierarchy all design.v"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Clock Timing"}, {"role": "assistant", "content": "The timing characteristics of the clock network are important in any high-performance design.\n To obtain detailed information about the clock networks in the current block, use the report_clock_timing comandcomandsreport_clock_timing report_clock_timing command.\n You must use the -type option to specify the type of report to generate.\n The report_clock_timing command can generate the following types of reports: Single-clock local skew To generate a single-clock local skew report, use the -type skew option.\n Interclock skew To generate an interclock skew report, use the -type interclock_skew option.\n Latency To generate a latency report, use the -type latency option.\n 436 Analyzing the Clock Tree Results Feedback Transition To generate a transition time report, use the -type transition option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Missing Vias"}, {"role": "assistant", "content": "To fix the missing vias by inserting PG vias based on the specified DRC error objects written by the analyze_rail command, use the fix_pg_missing_vias command.\n When the tool inserts a PG via for a missing via error object, it sets the status of the error object to fixed in the error browser (see Figure 203 ).\n This allows you to quickly check if all the missing vias are fixed.\n 895 Running Rail Analysis with Multiple Rail Scenarios Feedback Figure 203 Error Status After Inserting PG Vias for Missing Vias The tool marks the error object as fixed The following example inserts PG vias for all error objects of the VDD nets reported by the analyze_rail -check_missing_via command: fc_shell> set errdm [open_drc_error_data rail_miss_via.VDD.err] fc_shell> set errs [get_drc_errors -error_data $errdm] fc_shell> fix_pg_missing_vias -error_data $errdm $errs"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Considering the Effects of Cell Pins During Placement"}, {"role": "assistant", "content": "When you specify a technology node setting of 7+ s5, or s4 by using the set_technology -node command, you can specify that the tool uses a technology- specific pin-cost model during placement by setting the place.coarse.pin_cost_aware application option to true.\n The default is false.\n When you enable this feature, during placement, the tool tries to improve pin accessibility by using a technology-specific model to predict the routing resources required to access each pin.\n For all other technology nodes, you can control the maximum local pin density during placement by setting the place.coarse.pin_density_aware application option to true The default is false Table 11 Settings for Controlling the Effects of Pins During Placement set_technology -node place.coarse.\n pin_cost_aware place.coarse.\n pin_density_aware The tool does this 7+ s5, or s4 true true or false Performs technology-specific pin-cost-aware placement 7+ s5, or s4 false true Performs pin-density-aware placement 7+ s5, or s4 false false Does not consider the effects of cell pins during placement Any other setting true or false true Performs pin-density-aware placement 157 Specifying Placement Settings Feedback Table 11 Settings for Controlling the Effects of Pins During Placement (Continued) set_technology -node place.coarse.\n pin_cost_aware place.coarse.\n pin_density_aware The tool does this Any other setting true or false false Does not consider the effects of cell pins during placement"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using an IC Validator Parameter File"}, {"role": "assistant", "content": "_step application option.\n When you use this application option, it uses the specified value for the step size in both the x- and y-directions."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Physical Hierarchy"}, {"role": "assistant", "content": "To insert clock drivers from the top level of a design with multiple levels of physical hierarchy, 1.\n Enable the lower-level physical blocks for editing by using the set_editability command.\n 2.\n Enable clock driver insertion for multiple levels of physical hierarchy by setting the cts.multisource.enable_mlph_flow application option to true 412 Implementing Multisource Clock Trees Feedback 3.\n Insert clock drivers by using the create_clock_drivers command.\n 4.\n Route the inserted clock drivers by using the synthesize_multisource_global_clock_trees -roots -leaves -use_zroute_for_pin_connections command.\n When inserting clock drivers to lower-level blocks, the tool reuses existing clock ports.\n If there are no existing clock ports, the tool creates new ports, if it is allowed.\n You can allow new ports to be added to a block by using use the set_freeze_ports command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying a Keepout Margin"}, {"role": "assistant", "content": "To prevent other relative placement groups from being placed close to a specific relative placement group, you can specify a keepout margin that applies only to other relative placement groups.\n To do so, use the -rp_only_keepout_margin option with the set_rp_group_options command.\n You can specify a different margin for the left, bottom, right, and top sides of the group.\n The following command applies a margin of 15 on the left and right and a margin of 10 on the top and bottom of the relative placement group named rp1: fc_shell> set_rp_group_options rp1 \\ -rp_only_keepout_margin {15 10 15 10}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Placement When Using the place_eco_cells Command"}, {"role": "assistant", "content": "The place_eco_cells command places and legalizes each ECO cell based on the connectivity and the delays associated with the cell.\n You can control the placement of the ECO cells as follows: To use the channels areas between macro cells for ECO placement, use the -channel_aware option.\n By default, the command avoids channel areas during ECO placement.\n 973 Placing ECO Cells Feedback To place ECO cells closer to fixed points, such as I/O pads or macro cells, specify a weight for the nets connected to the fixed cells by using the -fixed_connection_net_weight option.\n By default, nets connected to fixed cells have a weight of one.\n To place ECO cells closer to fixed points, specify an integer value greater than one for the corresponding net.\n To prioritize specific nets during ECO placement by specifying net weights, 1.\n Specify net weights by using the set_eco_placement_net_weight command.\n 2.\n Specify that the tool honors the net weights by using the -honor_user_net_weight option with the place_eco_cells command.\n To report the net weights you specify, use the report_eco_placement_net_weight command.\n To create virtual connections for ECO cells and use them during ECO placement, instead of the actual connections, 1.\n Create virtual connections by using the create_virtual_connection command 2.\n Use these virtual connections during ECO placement by using the -use_virtual_connection option with the place_eco_cells command.\n The following example creates virtual connections for the inputs and output of the cell named ECO17 and performs ECO placement using these virtual connections: fc_shell> create_virtual_connection -name VC_0 \\ -pins {U1/Y ECO17/A} fc_shell> create_virtual_connection -name VC_1 \\ -pins {U2/Y ECO17/B} fc_shell> create_virtual_connection -name VC_2 \\ -pins {ECO17/Y D17_OUT} -weight 3 fc_shell> place_eco_cells -cells ECO17 -use_virtual_connection To remove virtual connections you have created, use the remove_virtual_connections command.\n To query virtual connections, use the get_virtual_connections command.\n To ignore high-fanout nets connected to ECO cells that exceed a specific threshold, use the -max_fanout option with the place_eco_cells command.\n To ignore the connections of specific pins on ECO cells, use the -ignore_pin_connection option with the place_eco_cells command.\n 974 Placing ECO Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Generating Geometry-Based Analysis Reports"}, {"role": "assistant", "content": "Use the get_geometry_result command to write the geometry information with rail results to an output file, in the units defined with the report_units command.\n You can specify one net at a time.\n When more than one net is specified, an error message is displayed.\n To specify which analysis or checking types to report, use the -type option.\n The supported analysis types are: voltage_drop and min_path_resistance The report is in the following format: geometry bbox_value Here are commonly used options of the get_geometry_result command: Option Description -layer (Optional) Specifies the name or number of the layer to report.\n When not specified, all layers are reported.\n -touching (Optional) Specifies a rectangular region in the format of {{ x1 y1 x2 y2 }} in which all geometry layers that touch the specified region are reported.\n -top value (Optional) Reports the geometry layers with the top N voltage drop values.\n -threshold (Optional) Specifies a threshold value.\n Reports geometry layers with voltage drop values that are greater than specified threshold.\n -percentage (Optional) Specifies a percentage value.\n Reports geometry layers with voltage drop values that are greater than the specified percent of the ideal supply voltage.\n For example, if the percentage is set to 0.1, geometries with voltage drop values greater than 10% of the ideal supply voltage are reported.\n -histogram (Optional) Includes a histogram that shows the average voltage drop value per net in the report.\n Example The following example writes geometry data with voltage drop values that are within the specified area: fc_shell> get_geometry_result -net VDD -type voltage_drop \\ -touching {{1610 1968} {1620 1969}} 931 Displaying Maps in the GUI Feedback { { 1616.475 1967.000 } { 1617.525 1969.800 } } metal5 0.00448 { { 1608.810 1946.000 } { 1611.190 1974.000 } } metal7 0.00446 { { 1608.000 1946.000 } { 1612.000 1974.000 } } metal9 0.00446 See Also Voltage Hotspot Analysis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Synchronous Input Types for Library Cell Pins"}, {"role": "assistant", "content": "When mapping sequential cells, the tool uses the nextstate_type attribute of a library cell pin to identify its synchronous pin type.\n The valid values for this attribute are data preset clear load scan_in, and scan_enable If this attribute is not specified or is incorrectly specified in the logic library, you can manually specify it by using the set_attribute command, as shown in the following example: fc_shell> set_attribute [get_lib_pins my_lib/dffsrst/RN] \\ nextstate_type clear"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Foundry"}, {"role": "assistant", "content": "To support designs that require combined foundry fill and track fill in the Fusion Compiler tool, you can use the -mode add option with the signoff_create_metal_fill command.\n fc_shell> signoff_create_metal_fill -mode add For a few advanced nodes, you can add foundry fill on top of track fill, which is the default methodology to create fill on some special layers.\n 731 Inserting Metal Fill With IC Validator In-Design Feedback You can use the all_runset_layers option with the signoff_create_metal_fill command.\n Set the all_runset_layers option to true to insert fill for all output fill layers defined in the runset settings.\n By default, this option is set to false and inserts fill only for the routing layers (metal and via layers)."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Displaying ECO Shapes in the GUI"}, {"role": "assistant", "content": "When you use the RedHawk mesh add command to add virtual PG meshes in the top block for the current subblock, by default the virtual PG meshes created by the RedHawk mesh add command are not shown as layout objects in the GUI.\n Therefore, these GUI shapes cannot be queried using layout object collection commands (such as, get_shapes ), and are not saved to the design library when you save the block.\n To save ECO shapes along with rail results and display them in the GUI, enable the rail.display_eco_shapes application option, like set_app_options -name rail.display_eco_shapes -value true Note: The mesh add command is available only in RedHawk, not in RedHawk SC.\n Therefore, the tool issues an error message when you enable both the rail.enable_redhawk_sc and rail.display_eco_shapes application options.\n To display ECO shapes in GUI, you must first enable the RedHawk signoff license key by setting the rail.allow_redhawk_license_checkout application option to true.\n Otherwise, an error message is issued.\n To add virtual PG meshes and display the created ECO shapes in the GUI, 1.\n Prepare a script file (such as, mesh.tcl) that contains the mesh add command.\n 2.\n Run design setup with the mesh.tcl script file.\n fc_shell> set_rail_command_options -script_file mesh.tcl \\ -command setup_design -order after_the_command The tool generates the RedHawk script file and sources the mesh.tcl file after design setup.\n 3.\n Perform rail analysis using the following command: fc_shell> analyze_rail -nets -voltage_drop 4.\n Run the open_rail_result command to load the design data and analysis results.\n 5.\n Run the gui_start command to open the Fusion Compiler GUI.\n In the GUI layout window, choose View > Map and select the map to display.\n You can now display and query the ECO shapes that are created by the RedHawk mesh add command in the GUI.\n Script Examples 938 Voltage Hotspot Analysis Feedback The following script displays ECO shapes in the GUI by using the set_rail_command_option command.\n ## Open design ## open_block link_block ## Specify taps ## create_taps ## Specify RedHawk Fusion input files or variables ## set_app_options -name rail.enable_redhawk -value 1 set_app_options -name rail.redhawk_path -value set_app_options -name rail.disable_timestamps -value true set_app_options -name rail.display_eco_shapes -value true set_rail_command_options -script_file mesh.tcl -command \\ setup_design...\n ## Analyze## analyze_rail -voltage_drop...\n -nets {VDD VSS} ## Check GUI ## open_rail_result The following script displays ECO shapes in the GUI by using a RedHawk script.\n ## Open design ## open_block link_block ## Specify taps ## create_taps ## Specify RedHawk Fusion input files or variables ## set_app_options -name rail.enable_redhawk -value 1 set_app_options -name rail.redhawk_path -value set_app_options -name rail.disable_timestamps -value true set_app_options -name rail.display_eco_shapes -value true ## Analyze ## analyze_rail -voltage_drop...\n -nets {VDD VSS} -script_only ## Modify the script.tcl containing mesh add command ## analyze_rail -redhawk_script_file ## Check GUI ## open_rail_result"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking the Routing Results"}, {"role": "assistant", "content": "After running Custom Router to perform custom routing on the nets, you can check the routing results by reporting the routing results, generating a congestion map, running DRC checks, and so on.\n For more information about the tasks to check the routing results, see Analyzing the Routing Results"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Hotspots"}, {"role": "assistant", "content": "After you generate hotspots on the block using the generate_hot_spots command, run the report_hot_spots command to report cells with voltage-related cell attributes for a hotspot grid box.\n The voltage-related cell attributes are: current overlap_current effective_resistance timing_ window slack output_load and static_power Use these voltage-related cell attributes to identify root causes of voltage violations.\n For example, you can Use the current and output loading capacitance information to determine if a cell's high peak is caused by too much load.\n If this is the case, splitting the output might be an effective approach to reduce high voltage drops.\n Check and compare the timing windows in the current hotspot to those of the neighboring grids to determine if a cell can be moved to other grids (targets).\n Doing so reduces the voltage drop of the original grid without increasing the voltage drop of the target grid.\n 941 Voltage Hotspot Analysis Feedback Compare slew and load capacitance among all cells in the region to determine if high peak current is caused by sharp slew or large load capacitance.\n Find cells that have overlapping timing windows to identify cells that might switch at the same time during dynamic rail analysis.\n Here are commonly used options of the report_hot_spots command: Option Description -index Lists the hotspot grids by index.\n -summary Reports a summary for all grids, such as the number of grids created, the number of instances in the block, and the number of grids whose voltage drop values are higher than the specified percentage of the ideal voltage drop value.\n -object Specifies the name of the object to report.\n Lists the hotspot grid that contains the specified cell instance object.\n -verbose Prints a detailed report.\n Listing Voltage Grid Boxes by Index By default, the tool searches three rows up and down and three columns left and right to determine the neighboring grids of the current one.\n Use the -index option to specify the index used to report voltage hotspot grids.\n The grid box with the smallest index number has the highest effective voltage drop values.\n This allows you to determine the size of the hotspot area.\n For example, if all the surrounding grids have bigger index numbers and only a few central grids have much smaller numbers, this voltage drop hotspot is assumed to be an island.\n Accumulating Current For an instance in a grid box, the overlap current is estimated by accumulating the timing- window-based current across its neighboring cells.\n The command scans all timing windows from smallest to biggest, and accumulates current on the way as time passes by.\n Use the information to determine how many cells are switching simultaneously and how much time shift to apply when shifting timing windows for voltage drop reduction.\n 942 Voltage Hotspot Analysis Feedback Assume the design has three instances with current as follows: As shown in the following report, the accumulated current on point 2.0 is from inst2 and inst3, and does not include the current from inst1.\n inst1 [0.0 2.0] current 0.11 inst2 [1.0 2.5] current 0.22 inst3 [2.0 3.0] current 0.33 See Also Generating Hotspots Removing Hotspots Voltage Hotspot Analysis Examples"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Improving Instance Voltage Drop by Augmenting the Power Grid"}, {"role": "assistant", "content": "Power grid augmentation is a technique used to improve the instance voltage drop.\n When you augment the power grid, the added metal shapes act as parallel resistors, which reduces the resistance of the power grid as seen by the standard cells.\n Figure 148 shows an example of power grid augmentation and how it lowers the power grid resistance.\n Figure 148 Power Grid Augmentation The Fusion Compiler tool supports the following methods of power grid augmentation: Standard power grid augmentation, which inserts as many PG augmentation shapes as possible to lower the instance voltage drop Timing-driven power grid augmentation, which inserts PG augmentation shapes in the specified regions of the block, except around timing-critical nets Guided power grid augmentation, which inserts PG augmentation shapes only from cells with IR violations to their tap with the minimum path resistance Each method uses RedHawk Fusion analysis to drive the power grid augmentation and uses the IC Validator tool to insert the PG augmentation shapes.\n For detailed information about performing power grid augmentation, see the topic associated with the method you want to use.\n See Also RedHawk and RedHawk-SC Fusion 699 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking Designs With Abstracts for Top-Level-Closure Issues"}, {"role": "assistant", "content": "You can check a hierarchical design that contains abstracts for possible issues such as the application option consistency issues and the design issues related to top-level closure by using the check_hier_design command.\n Identifying issues and fixing them before you perform top-level closure can help reduce turnaround time.\n When you use the check_hier_design command, you can specify The references to check by using the -reference option.\n If you do not specify this option, the command checks all the references in the physical hierarchy.\n The type of checks to perform by using the -stage option as follows: Use the -stage timing option to perform timing related checks.\n If you do not specify the -stage option, by default, the tool performs timing related checks.\n Use the -stage pre_placement to perform both timing and preplacement related checks.\n The check_hier_design command can check the consistency between the top-level constraints and the constraints of every lower-level instance linked to an abstract.\n To enable this feature, set the abstract.check_constraints_consistency application option to true before you run the check_hier_design command.\n The tool saves the settings of the predetermined list of timer application options during the create_abstract command.\n At the top-level design, the check_hier_design command compares these timer application option settings with those of the block-level design.\n The following application options are automatically saved during the create_abstract command and verified by the check_hier_design command: time.case_analysis_propagate_through_icg time.case_analysis_sequential_propagation time.clock_gating_propagate_enable time.clock_gating_user_setting_only 843 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback time.clock_marking time.clock_reconvergence_pessimism time.create_clock_no_input_delay time.crpr_remove_clock_to_data_crp time.delay_calc_waveform_analysis_mode time.delay_calculation_style time.disable_case_analysis_ti_hi_lo time.disable_clock_gating_checks time.disable_cond_default_arcs time.disable_internal_inout_net_arcs time.disable_recovery_removal_checks time.edge_specific_source_latency time.enable_auto_mux_clock_exclusivity time.enable_ccs_rcv_cap time.enable_clock_propagation_through_preset_clear time.enable_clock_propagation_through_three_state_enable_pins time.enable_clock_to_data_analysis time.enable_non_sequential_checks time.enable_preset_clear_arcs time.enable_si_timing_windows time.gclock_source_network_num_master_registers time.special_path_group_precedence time.use_lib_cell_generated_clock_name time.use_special_default_path_groups For more information about the issues the check_hier_design command identifies and how to fix them, see the man page for the corresponding message ID.\n In addition to generating a report, the check_hier_design command generates an enhanced messaging system (EMS) database that you can view by using the message 844 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback browser in the Fusion Compiler GUI.\n Create the EMS database before you run the check_hier_design command, as shown in the following example: fc_shell> create_ems_database check_hier.ems fc_shell> check_hier_design -stage timing fc_shell> save_ems_database In the Fusion Compiler GUI message browser, you can sort, filter, and link the messages to the corresponding man page, as shown in the following figure.\n Figure 194 Viewing the EMS Database in the Message Browser You can also output the information in the EMS database in ASCII format by using the report_ems_database command.\n The checks performed by the check_hier_design command are also available in the check_design command.\n You can perform Timing checks specific to top-level closure by using the check_design -checks hier_timing command All timing checks, including those specific to top-level closure, by using the check_design -checks timing command Preplacement checks specific to top-level closure by using the check_design -checks hier_preplacement command All preplacement checks, including those specific to top-level closure, by using the check_design -checks preplacement command 845 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback You can generate an EMS database for the check_design command and view it in the GUI, similar to the check_hier_design command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Recording the Changes Made to a Layout"}, {"role": "assistant", "content": "You can record the changes you make to a layout and generate a Tcl file containing the changes by using the record_layout_editing command, as shown in the following example: fc_shell> record_layout_editing -start fc_shell> remove_shapes RECT_32_0 fc_shell> record_layout_editing -stop -output layout_changes1.tcl You can make the following layout changes: Create or remove layout objects by using Tcl commands Set attributes by using the set_attribute command Move or resize objects by using the GUI With this feature, multiple users can make ECO changes to different parts of a layout in parallel.\n Each user can output a Tcl file that contains the layout changes they make by using the record_layout_editing command, and all the Tcl files can be applied to the original layout."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Marking Clocks as Propagated After Clock Tree Synthesis"}, {"role": "assistant", "content": "If you run the synthesize_clock_trees or clock_opt command, after clock tree synthesis, the tool removes the ideal setting from all the synthesized clocks of all active scenarios and sets all the corresponding register clock pins as propagated.\n If your block has scenarios that were not set as active before clock tree synthesis, set these scenarios as active by using the set_scenario_status -active true command and mark all clocks as propagated by using the synthesize_clock_trees -propagate_only command, as shown in the following example: fc_shell> set_scenario_status -active true [all_scenarios] fc_shell> synthesize_clock_trees -propagate_only The synthesize_clock_trees -propagate_only command removes the ideal setting from the clocks; it does not perform clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Constraints for a Group of Repeaters"}, {"role": "assistant", "content": "To remove the constraints that were assigned to a group of repeaters, use remove_repeater_group_constraints command.\n For example: fc_shell> remove_repeater_group_constraints -type type_list"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Shielding Example"}, {"role": "assistant", "content": "Example 22 provides an example of shielding clock nets using preroute shielding and shielding critical nets using postroute shielding.\n Example 22 Shielding Flow Example # Define shielding rule create_routing_rule shield_rule \\ -shield_widths {M1 0.1 M2 0.1 M3 0.1 M4 0.1 M5 0.1 M6 0.3} \\ -shield_spacings {M1 0.1 M2 0.1 M3 0.1 M4 0.1 M5 0.1 M6 0.3} # Assign shielding rule to clock nets set_clock_routing_rules -clocks CLK \\ -rules shield_rule # Perform clock tree synthesis synthesize_clock_trees # Route the clock nets, reusing the global routing result route_group -all_clock_nets -reuse_existing_global_route true # Perform preroute shielding for the clock nets create_shields -nets $clock_nets -with_ground VSS 545 Shielding Nets Feedback # Assign shielding rule to critical nets set_routing_rule -rule shield_rule $critical_nets # Route signal nets using shielding soft rules route_auto # Perform postroute shielding for critical nets create_shields -nets $critical_nets -with_ground VSS"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock-Gate Levels and Stages"}, {"role": "assistant", "content": "The tool uses the following definitions for clock-gate levels and stages in clock-gating commands and options: The clock-gate level is related to the fanin of a clock gate.\n Level 0 refers to a clock source.\n Level 1 refers to the first clock gate downstream from the clock source.\n Level 2 refers to a clock gate driven by a clock gate of level 1.\n Level N refers to a clock gate driven by a clock gate of level N-1.\n The clock-gate stage is related to the fanout of a clock gate.\n Stage 0 refers to a register driven by a clock gate.\n Stage 1 refers to a clock gate that only drives registers directly or across buffers, inverters, or hierarchical transitions.\n In addition, stage 1 is assigned to clock gates whose stage cannot be determined, such as unloaded clock gates.\n Stage N refers to a clock gate that drives at least one clock gate of stage N-1, either directly or across buffers, inverters, or hierarchical transitions.\n The tool keeps a separate count of levels and stages for all clock gates and for tool- inserted clock gates.\n Figure 47 shows a simple circuit with two preexisting clock gates (P1 and P2) and three tool-inserted clock gates (T1, T2, and T3).\n Table 23 lists the levels and stages for each of the clock gates.\n 290 Introduction to Clock Gating Feedback Figure 47 Design With Multiple Clock Gates Table 23 Clock-Gate Levels and Stages Object Type Level (all clock gates) Level (tool-inserted clock gates) Stage (all clock gates) Stage (tool-inserted clock gates) P1 Preexisting clock gate P2 Preexisting clock gate T1 Tool-inserted clock gate T2 Tool-inserted clock gate T3 Tool-inserted clock gate 291 Clock-Gating Prerequisite Conditions Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Providing Block-Level Test Models"}, {"role": "assistant", "content": "You can provide test model of the subblocks for the top-level design implementation when running hierarchical synthesis.\n To do so, generate the test model for the mapped block 829 Specifying Block-Level Power Intent Feedback design during block-level synthesis and then annotate the test model to the subblock during top-level synthesis.\n For example, Generating the test model during block-level synthesis # Read block RTL and constraints # Specify DFT configuration set_dft_signal...\n set_scan_configuration...\n create_test_protocol...\n compile_fusion -to initial_opto insert_dft write_test_model -output block_des.mapped.ctl Running top-level synthesis with the block-level test model # Read RTL and constraints # Specify DFT configuration read_test_model block_des.mapped.ctl set_dft_signal...\n set_scan_configuration...\n create_test_protocol...\n compile_fusion -to initial_opto insert_dft"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Via Ladders"}, {"role": "assistant", "content": "To query the via ladders in a block, use the get_via_ladders command.\n To report on the via ladders in a block, use the report_via_ladders command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Global Routing During Design Planning"}, {"role": "assistant", "content": "During design planning you can perform exploration-mode global routing by using the -floorplan true option with the route_global command.\n fc_shell> route_global -floorplan true If you are using the hierarchical flow, enable virtual-flat global routing by using the -virtual_flat option with the route_global command.\n When you set the -virtual_flat option to all_routing, Zroute routes all the nets in the block and preserves the hierarchy and pin constraints.\n You can increase the virtual-flat global routing speed by routing only the top-level nets.\n To do this, set the -virtual_flat option to top_and_interface_routing_only.\n When the -virtual_flat option is set to off which is the default, Zroute ignores the physical hierarchy and routes the block as flat.\n fc_shell> route_global -floorplan true -virtual_flat all_routing"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Placement Bounds"}, {"role": "assistant", "content": "A placement bound is a constraint that controls the placement of groups of cells.\n It allows you to group cells to minimize wire length and place the cells at the most appropriate locations.\n For example, you might want to define a bound for clock-gating cells or extremely timing-critical groups of cells that you want to guarantee will not be disrupted for placement by other logic.\n Table 8 lists the types of placement bounds supported by the Fusion Compiler tool.\n Table 8 Types of Placement Bounds Bound type Description Soft move bound The tool tries to place the cells in the move bound within a specified region, during coarse placement.\n However, there is no guarantee that the cells are placed inside the bounds.\n Soft move bounds are honored during coarse placement, but not legalization.\n Hard move bound The tool must place the cells in the move bound within a specified region.\n Hard move bounds are honored during both coarse placement,and legalization.\n However, they are not honored during clock tree synthesis.\n 145 Specifying Physical Constraints for Placement and Legalization Feedback Table 8 Types of Placement Bounds (Continued) Bound type Description Exclusive move bound The tool must place the specified cells within the specified region and place all other cells outside of the exclusive move bounds, during both coarse placement and legalization.\n The placement of newly added buffers in exclusive move bounds is controlled by the opt.buffering.exclusive_hard_bound_buffering_mode application option.\n By default, during buffering, the tool can add new cells to an exclusive hard move bound if it improves the QoR.\n If you set this application option to, the tool honors the exclusive hard move bound.\n Soft group bound The tool tries to place the cells in the group bound within a floating region; however, there is no guarantee that the cells are placed inside the bounds.\n Hard group bound The tool must place the cells in the group bound within a floating region, whose actual coordinates are determined by the tool.\n Dimensionless group bound The tool determines the shape and location of the group bound based on the effort used to bring cells closer inside the group bound.\n To define a placement bound, use the create_bounds comandcomandscreate_bounds create_bound command.\n When you define a bound, you must use the -name option to specify its name.\n In general, you also specify the cells and ports to be included in the bound.\n If a hierarchical cell is included, all cells in the subdesign belong to the bound.\n However, you can create an empty bound and specify the contents of the bound later by using the add_to_bound command.\n You can remove objects from a bound by using the remove_from_bound command.\n You must also specify the options required for the specific type of bound you want to create.\n The following topics describe how to create the various types of move bounds: Defining Move Bounds Defining Group Bounds Querying Placement Bounds Removing Placement Bounds"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Naming Styles for Multibit Registers"}, {"role": "assistant", "content": "Fusion Compiler allows you to customize the naming styles for multibit registers.\n You can use the application options described in this topic to modify the default naming styles to match the requirements of your design flow or a third-party tool.\n 248 Performing Multibit Optimization Feedback Specifying a Name Separator When creating the name for a multibit register, the tool concatenates the names of the single-bit registers and uses the _ character as the name separator.\n For example, when the tool combines the single-bit registers named reg1 and reg2, the multibit register is named reg1 reg2.\n To change the default name separator, use the multibit.naming.multiple_name_separator_style application option.\n Specifying a Name Prefix To specify a prefix for the multibit register name, use the multibit.naming.name_prefix application option.\n Compacting Hierarchical Names When combining single-bit registers with hierarchical names, the tool uses the full hierarchical names of the single-bit registers for the concatenated multibit register name.\n For example, when the tool combines the single-bit registers named A/B/P/reg1 and A/B/ Q/reg2, the multibit register is named A/B/P/reg1_A/B/Q/reg2.\n To make the multibit register name more compact, specify that common hierarchical names should not be repeated by setting the multibit.naming.compact_hierarchical_name application option to true.\n If you do so, when the tool combines the single-bit registers named A/B/P/reg1 and A/B/Q/reg2, the multibit register is named A/B/P/reg1_Q/reg2.\n Specifying a Range Separator for Contiguous Bits of a Bused Register When combining contiguous bits of a bused register, the tool uses the : character as the range separator.\n For example, when the tool combines single-bit bused registers named regA[0], regA[1], and regA[2], the multibit register is named regA[2:0].\n To change the range separator, use the multibit.naming.range_separator_style application option.\n Specifying an Element Separator for Noncontiguous Bits of a Bused Register When combining noncontiguous bits of a bused register, the tool uses the, character as the element separator.\n For example, when the tool combines the single-bit bused registers named regA[1] and regA[3], the multibit register is named regA[3,1].\n To change the element separator, use the multibit.naming.element_separator_style application option.\n 249 Performing Multibit Optimization Feedback Specifying the Expanded Naming Styles When Combining Elements of a Multidimensional Register Array To specify the expanded naming styles for the multibit registers created by combining elements of a multidimensional register array, use the multibit.naming.expanded_name_style application option.\n For more information on this application option, see the man page."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying RedHawk and RedHawk-SC Working Directories"}, {"role": "assistant", "content": "During rail analysis, RedHawk/RedHawk-SC Fusion creates a working directory to store the generated files, including analysis logs, scripts, and various output data.\n By default, 875 Specifying RedHawk and RedHawk-SC Working Directories Feedback the RedHawk or RedHakw-SC working directory is named RAIL_DATABASE.\n To use a different name for the working directory, use the rail.database application option.\n The following figure shows the data structures: RAIL_CHECKING_DIR: The directory where RedHawk Fusion saves report files on the missing information during rail analysis.\n For example, the tool generates the following report files in the RAIL_CHECKING_DIR directory when static rail analysis is run: libcell.apl_current libcell.apl_cap libcell.missing_liberty RAIL_DATABASE: The directory where the tool saves and retrieves results and log files that are generated during power calculation and rail analysis.\n This directory contains the following sub-directories: in-design.redhawk or in-design.redhawk_sc: The directory that contains the following sub-directory: design_name.result: The directory where RedHawk or RedHawk-SC saves the analysis result files.\n design_name : The directory where RedHawk or RedHawk-SC writes analysis results for the Fusion Compiler tool to retrieve for map display and data query.\n For example, running the open_rail_result command loads the data in this design_name directory for displaying maps in the GUI.\n 876 Preparing Design and Input Data for Rail Analysis Feedback If you finish the analysis and want to keep the data for later retrieval, you need to save the existing rail data to another working directory by using the rail.database application option before proceeding to another analyze_rail run.\n For example, fc_shell> set_app_options -name rail.database \\ -value RAIL_DATABASE_STATIC_RUN Otherwise, the RedHawk/RedHawk-SC tool overwrites the previously generated rail data with the new data, and issues the following warning message: Warning: Rail result still open!\n Will be overwritten!\n To avoid the warning message, run the close_rail_result command to remove all rail data from memory before proceeding to another analyze_rail command run."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Options for Signoff Design Rule Checking"}, {"role": "assistant", "content": "Before you run the signoff_check_drc command, configure the run by setting the application options shown in Table 43.\n To set the application options, use the set_app_options command.\n To see the current settings, use the report_app_options command.\n Table 43 Application Options for Signoff Design Rule Checking Application option Default Description signoff.check_drc.runset (required) N/A Specifies the foundry runset to use for design rule checking.\n signoff.check_drc.\n auto_eco_threshold_value 20 Specifies the maximum percentage of change to the block to perform incremental design rule checking using the -auto_eco true option.\n signoff.check_drc.\n excluded_cell_types {} Specifies the cell types to exclude from checking.\n You can specify one or more of the following values: lib_cell (standard cells), macro (macro cells), pad (I/O pad cells), and filler (filler cells).\n signoff.check_drc.\n fill_view_data read_if_uptodate Controls whether the IC Validator tool reads the fill data.\n By default, it reads the fill data only if its timestamp is newer than the timestamp of the design view.\n To read the fill data regardless of its timestamp, set this application option to ( read ).\n To never read the fill data, set this application option to discard signoff.check_drc.\n ignore_blockages_in_cells true Controls whether the IC Validator tool reads only the pin information from the frame view true ) or both the blockages and the pin information ( false ).\n signoff.check_drc.\n ignore_child_cell_errors false Controls whether the IC Validator tool reports both top-level and child-level errors to the error data file ( false ) or only top-level errors ( true ).\n signoff.check_drc.\n max_errors_per_rule 1000 Specifies the maximum number of errors to report per rule.\n signoff.check_drc.\n read_design_views {} Specifies the reference cells for which the IC Validator tool reads the design view instead of the frame view.\n Using the design view can expose problems that are masked by the frame view abstraction.\n 667 Performing Signoff Design Rule Checking Feedback Table 43 Application Options for Signoff Design Rule Checking (Continued) Application option Default Description signoff.check_drc.\n read_layout_views {} Specifies the reference cells for which the IC Validator tool reads the layout view instead of the frame view.\n Using the layout view can expose problems that are masked by the frame view abstraction.\n signoff.check_drc.\n run_dir signoff_check_drc_run Specifies the run directory, which contains the files generated by the signoff_check_drc command.\n You can specify either a relative path, in which case the directory is created under the current working directory, or an absolute path.\n signoff.check_drc.\n user_defined_options (none) Specifies additional options for the IC Validator command line.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string.\n signoff.physical.\n layer_map_file (none) Specifies the name of the layer mapping file.\n If the technology file and the foundry runset file used by the IC Validator tool do not use the same layer numbers, you must supply a layer mapping file to map the technology layers to the layers used in the runset file.\n For details about the format of the layer mapping file, see Defining the Layer Mapping for IC Validator In-Design Commands signoff.physical.\n merge_exclude_libraries (none) Specifies the cell libraries whose cells are excluded from replacement with the cell data in the stream files specified in the signoff.physical.\n merge_stream_files application option.\n signoff.physical.\n merge_stream_files (none) Specifies the stream (GDSII or OASIS) files to merge into the current block for signoff design rule checking.\n When you use this option, the GDSII or OASIS data replaces the cell library data for the cells defined in the specified stream files.\n 668 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Intra-shield Placement"}, {"role": "assistant", "content": "The custom.route.bus_intra_shield_placement application option specifies how the bus trunk will be shielded.\n Valid values are: Valid Value Description double_interleave Shields each wire individually.\n half_interleave Inserts shared shielding every two wires.\n interleave Inserts shared shielding between adjacent wires.\n outside (Default) Places shields on the outside of the trunk or group.\n 767 Using Custom Routing Application Options Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Optimization Targets at the Postroute Stage"}, {"role": "assistant", "content": "At the final stages of your design flow, you can use the route_opt command to perform concurrent clock and data optimization on specific critical path groups or endpoints by using the following steps: 1.\n Enable targeted concurrent clock and data optimization for the route_opt command by setting the route_opt.flow.enable_targeted_ccd_wns_optimization application option to true 2.\n Specify the optimization target by using one or both of the following settings: Specify the path groups to optimize by using the ccd.targeted_ccd_path_groups application option Note: If a path group you specify with this application option is also specified as a path group to skip by using the ccd.skip_path_groups application option, the path group is skipped during targeted concurrent clock and data optimization.\n Specify the endpoints to optimize by using the ccd.targeted_ccd_end_points_file application option You must specify at least one of these settings.\n If you specify both, the tool optimizes the specified endpoints of the specified paths groups.\n 3.\n (Optional) Specify the type of optimization to perform by using the ccd.targeted_ccd_select_optimization_moves application option.\n The valid values are 381 Implementing Clock Trees and Performing Post-CTS Optimization Feedback auto, the default, which enables all optimization types, including buffering size_only, which enables sizing only equal_or_smaller_sizing, which enables sizing only to cells that are the same size or smaller footprint_sizing, which enables sizing only to cells with the same footprint 4.\n (Optional) Specify an optimization effort by using the ccd.targeted_ccd_wns_optimization_effort application option.\n The valid values are high (default), medium, and low.\n The higher the effort, the more timing QoR improvement you will see in the targeted paths, but at the expense of the timing QoR of other paths.\n 5.\n (Optional) Specify a threshold beyond which the slack for the path groups that are not targeted can be degraded by using the ccd.targeted_ccd_threshold_for_nontargeted_path_groups application option.\n By default, if the path groups that are not targeted have positive slack, the tool can degrade this slack until it reaches zero.\n For the route_opt command, you can enable both regular concurrent clock and data optimization by using the route_opt.flow.enable_ccd application option and targeted concurrent clock and data optimization by using the route_opt.flow.enable_targeted_ccd_wns_optimization application option.\n If you enable both, the tool performs regular concurrent clock and data optimization first, followed by targeted concurrent clock and data optimization.\n The following script performs targeted concurrent clock and data optimization on a block that has already undergone routing and postroute optimization: open_lib design1 open_block blk.post_route #Disable regular CCD optimization, which was previously performed set_app_options \\ -name route_opt.flow.enable_ccd -value false #Enable targeted CCD optimization set_app_options \\ -name route_opt.flow.enable_targeted_ccd_wns_optimization \\ -value true #Specify the path group and endpoints to target set_app_options -name ccd.targeted_ccd_path_groups -value clkA set_app_options -name ccd.targeted_ccd_end_points_file \\ -value clkA_ep.txt 382 Implementing Clock Trees and Performing Post-CTS Optimization Feedback #Specify the optimization type and effort set_app_options \\ -name ccd.targeted_ccd_select_optimization_moves -value size_only set_app_options -name ccd.targeted_ccd_wns_optimization_effort \\ -value medium # Perform the targeted CCD optimization route_opt"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Avoiding Overlapping Repeaters With Existing Tap Cells"}, {"role": "assistant", "content": "Use the -honor_special_cell option to avoid overlapping with existing tap cells when inserting repeaters."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Checking Options"}, {"role": "assistant", "content": "Before checking for missing vias or unconnected pins in the design, use the set_missing_via_check_options command to specify the necessary options.\n To check or remove the option settings, use the report_missing_via_check_options or remove_missing_via_check_options command, respectively.\n Table 68 lists the commonly used options for the set_missing_via_check_options command.\n For a detailed description about each option, see the man page.\n Table 68 Commonly Used Options for the set_missing_via_check_options Command Option Description -redhawk_script_file Uses an existing RedHawk script file for the missing via check.\n 891 Missing Via and Unconnected Pin Checking Feedback Table 68 Commonly Used Options for the set_missing_via_check_options Command (Continued) Option Description exclude_stack_via Excludes stacked vias from the missing via check.\n By default, the tool includes stacked vias during analysis.\n check_valid_vias Reports if the metal overlap can accommodate a valid via model.\n -exclude_cell -exclude_instance Excludes the area covered by all instances of the specified cell, or by a list of cell instances from the missing via check.\n By default, the tool performs checking at the full-chip level.\n -exclude_regions Specifies rectangular regions to exclude from the missing via check.\n sort_by_hot_inst Sorts missing vias by voltage drop values.\n By default, the tool sorts by the average delta voltage between defined layers.\n -threshold Sets a voltage threshold that triggers a missing via check.\n Set the option to -1 to disable voltage check filtering.\n The default is 1 V.\n This option is valid only when the checking is run during voltage drop analysis.\n -min_width Ignores segments smaller than the specified width.\n -pitch Specifies the pitch for missing vias on parallel wires crossing or touching GDSII blocks.\n -gds Flags missing vias that are inside the GDSII block region and are in routes across the GDSII blocks.\n By default, the missing via check ignores items that are inside or overlap a block that has been processed by the GDS2DEF or GDSMMX utility.\n -ignore_inter_met -toplayer -bottomlayer Ignores wires on all layers between the specified top and bottom layers."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Multibit Registers"}, {"role": "assistant", "content": "After you run the compile_fusion command, you can report the registers that are transformed due to multibit banking and debanking by using the report_transformed_registers -multibit command.\n The following example shows a portion of a report generated by the report_transformed_registers -multibit command.\n fc_shell> report_transformed_registers -multibit...\n **************************************** Attributes: mb - multibit mbd - multibit debanked...\n Register Optimization MB_2_MB_1 mb (source:MB_2, MB_1) MB_0_MB_3 mb (source:MB_0, MB_3) MB_5, MB_6 mbd (source: MB_5_MB_6)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Handling Fixed Cells During Relative Placement"}, {"role": "assistant", "content": "To specify how to handle fixed cells in the floorplan during legalization of relative placement groups, use the -place_around_fixed_cells option with the set_rp_group_options command.\n Table 59 shows the different settings you can specify for the -place_around_fixed_cells option.\n Table 59 Settings for the -place_around_fixed_cells Option To do this Use this setting Legalize relative placement groups around fixed standard cells and avoid fixed physical-only cells.\n standard Legalize relative placement groups around fixed physical-only cells and avoid fixed standard cells.\n physical_only Legalize relative placement groups around both fixed standard cells and fixed physical-only cells.\n This is the default.\n all Avoid both fixed standard cells and fixed physical-only cells.\n none For hierarchical relative placement groups, you can use the set_rp_group_options -place_around_fixed_cells command and specify different settings for the top-level and the lower-level relative placement groups.\n If you do not specify a setting for the lower- level placement groups, the value of the top-level relative placement group is used for the lower-level relative placement groups.\n 804 Specifying Options for Relative Placement Groups Feedback Assume a hierarchical relative placement group named top-rp contains three lower-level relative placement groups named rp1, rp2, and rp3.\n The following example specifies a less restrictive setting for the top level and a more restrictive setting for the lower-level group named rp1.\n It also specifies that the setting for the rp1 lower-level group overrides the top- level setting when legalizing the cells in the rp1 group.\n fc_shell> set_rp_group_options top-rp \\ -place_around_fixed_cells physical_only fc_shell> set_rp_group_options rp1 \\ -place_around_fixed_cells none fc_shell> set_app_options -name set_rp_group_options -value true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Differential-Pair Options"}, {"role": "assistant", "content": "The following Custom Router application options allow you to control differential-pair routing: Application Option Description custom.route.diffpair_twist_jumper_enable Twists the nets in the group.\n custom.route.diffpair_twist_jumper_interval Specifies the distance between each twist.\n custom.route.diffpair_twist_jumper_offset Specifies the distance between the first twist and the connected pins.\n The default is 0.\n custom.route.diffpair_twist_jumper_style Specifies the twist style.\n Valid values are: diagonal : Applies 45-degree twists to the wires.\n none (default): Does not twist the wires.\n orthogonal : Applies 90-degree twists to the wires."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Insertion Delay Requirements"}, {"role": "assistant", "content": "To override the default phase delay of zero for sink pins (derived or user-specified), use the -delay option with the set_clock_balance_points command to specify the 345 Defining the Clock Trees Feedback insertion delay requirements.\n The tool adds the specified delay (positive or negative) to the calculated insertion delay up to the specified sink pin.\n The syntax to define the insertion delay requirement for one or more sink pins is set_clock_balance_points [-clock clock -delay delay [-rise] [-fall] [-early] [-late] -balance_points pins [-corners corners The -clock option is not required.\n If you do not use it, the insertion delay requirement applies to all clocks.\n Clock tree synthesis uses the specified delay value for the path delay calculations used to build the clock tree.\n By default, the specified delay value is used for both longest-path and shortest-path calculations for both rising-edge and falling-edge paths.\n To control when the specified delay value is used, use the -rise -fall -early, and -late options.\n When you define insertion delay requirements, by default, they apply to all corners.\n To apply the definition to specific corners, use the -corners option.\n For example, to specify that clock tree synthesis should use an insertion delay of 2.0 ns for rising-edge shortest-path calculations for the U2/CLK pin for the CLK clock in the current corner, use the following command: fc_shell> set_clock_balance_points -clock [get_clocks CLK] \\ -rise -early -delay 2.0 -balance_points [get_pins U2/CLK] To report the user-defined insertion delay for sink pins, use the report_clock_balance_points command.\n This command reports the user-defined sink pins, the derived sink pins with user-specified insertion delay, and the user-defined ignore pins."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Metal Fill With the IC Validator Tool"}, {"role": "assistant", "content": "By default, when you use the signoff_create_metal_fill -mode remove command, the IC Validator tool removes all metal and via fill from the current block, including the typical critical dimension (TCD) structures.\n To remove the metal fill only from specific regions, use the -coordinates option, as described in Specifying the Regions for Metal Fill Insertion To remove the metal fill only from specific layers, use the -select_layers option, as described in Specifying the Layers for Metal Fill Insertion By default, when you use this option, the IC Validator tool does not remove the TCD structures.\n To remove the TCD structures in addition to the metal and via fill, set the signoff.create_metal_fill.tcd_fill application option to true before running the signoff_create_metal_fill command.\n To remove the metal fill only over critical nets, use one or both of the -nets and -timing_preserve_setup_slack_threshold options to identify the critical nets.\n Note: The existing fill is not considered when determining the critical nets for pattern-based metal fill, but not for track-based metal fill.\n To honor certain rules when removing the metal fill, use the -remove_by_rule option.\n You can specify one or more of the following rules: Nondefault routing rules ( ndr This rule applies to both pattern-based and track-based metal fill.\n Maximum density rules ( max_density_threshold This rule applies only to track-based metal fill.\n When you enable this rule, metal fill removal honors the maximum density threshold set by the signoff.create_metal_fill.max_density_threshold application option.\n For example, to honor nondefault routing rules during fill removal, use the following command: fc_shell> signoff_create_metal_fill -mode remove \\ -remove_by_rule {ndr} See Also Specifying the Layers for Metal Fill Insertion Specifying the Regions for Metal Fill Insertion 740 Inserting Metal Fill With IC Validator In-Design Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Building the Local Clock Subtree Structures"}, {"role": "assistant", "content": "In a structural multisource clock tree, the local subtrees are directly driven by the clock mesh.\n You can synthesize these local subtrees by using the synthesize_multisource_clock_subtrees command.\n Before you synthesize the local subtrees, you must 1.\n Build the global clock distribution structure.\n 2.\n Model the clock mesh net with a realistic annotated delay and transition values using the set_annotated_delay and set_annotated_transition commands.\n 3.\n Remove dont_touch size_only fixed, and locked attributes setting on the clock cells that are not required.\n These settings prevent the synthesize_multisource_clock_subtrees command from merging or splitting clock cells, if necessary.\n 4.\n Specify settings for local subtree synthesis by using the set_multisource_clock_subtree_options command.\n You must specify The clock for synthesizing the subtrees by using the -clock option.\n The drivers of the subtrees to be synthesized by using the -driver_objects option.\n The clock specified with the -clock option should pass through each drivers specified with the -driver_objects option.\n Optionally you can Prevent the tool from merging specific clock tree cells by using the -dont_merge_cells option.\n Balance the levels of the local subtree by using the -balance_levels true option and specify a target number of levels, which applies to all sinks of the local subtree, by using the -target_level option.\n Optionally, you can apply a different target number of levels to specific sink pins and clock balance points by using the set_multisource_clock_subtree_constraints command with the -pins and -target_level options.\n Specify a maximum total wire delay from any subtree driver to any of its sinks by using the -max_total_wire_delay option and the corner it applies to by using the -corner option.\n 429 Implementing Multisource Clock Trees Feedback Enable the reordering of clock-gating cells by using the -enable_icg_reordering true option.\n When you enable this feature, the tool swaps the position of a clock-gating cell with the buffer that is driving the clock-gating cell.\n Then, the buffer is gated by the clock- gating cell, thereby reducing the dynamic power consumption.\n To perform reordering, you must Enable scenarios used for structural multisource clock tree synthesis for dynamic power optimization Annotate switching activity for the enable pins of the clock-gating cells You can prevent specific clock-gating cells from being reordered by using the set_multisource_clock_subtree_constraints command with the -cells and -ignore_for_icg_reordering options.\n To report the settings you specified, use the report_multisource_clock_subtree_options command.\n To remove the settings you specified, use the remove_multisource_clock_subtree_options command.\n 5.\n (Optional) Enable multicorner optimization by setting the cts.multisource.enable_multi_corner_support application option to true.\n The default is false By default, the tool uses the worst corner associated with the mode in which the subtree options are defined.\n When you enable this feature, the tool considers all corners associated with the mode in which the subtree options are defined.\n 6.\n (Optional) Ignore the maximum capacitance, maximum fanout, or both constraints of the clock drivers by using the cts.multisource.ignore_drc_on_subtree_driver application option.\n When you synthesize multisource clock subtrees, by default, the tool considers the maximum transition, capacitance, and fanout constraints of the clock drivers you specify.\n However, the clock drivers typically have relaxed or no maximum capacitance or maximum fanout constraint, which can affect the multisource clock tree QoR.\n The following example ignores both the maximum capacitance and maximum fanout constraints of the clock drivers: fc_shell> set_app_options \\ -name cts.multisource.ignore_drc_on_subtree_driver \\ -value \"max_fanout max_capacitance\" 7.\n (Optional) Enable fishbone routing for the subtree clock nets by using the cts.multisource.subtree_routing_mode application option.\n 430 Implementing Multisource Clock Trees Feedback fc_shell> set_app_options \\ -name cts.multisource.subtree_routing_mode -value fishbone 8.\n (Optional) Specify name prefixes and suffixes to use when merging and splitting clock cells during local subtree synthesis by using the following application options: cts.multisource.subtree_merge_cell_name_prefix cts.multisource.subtree_merge_cell_name_suffix cts.multisource.subtree_split_cell_name_prefix cts.multisource.subtree_split_cell_name_suffix cts.multisource.subtree_split_net_name_prefix cts.multisource.subtree_split_net_name_suffix When you run the synthesize_multisource_clock_subtrees command the tool performs the following steps: 1.\n Merges equivalent clock cells to remove any artificial boundaries between clusters of sinks.\n 2.\n Optimizes the subtree by splitting, sizing, and relocating the clock cells, and snaps the first level of clock cells to the clock straps.\n 3.\n Routes the clock nets.\n By default, it global routes the nets.\n However, if you enable fishbone routing by using the cts.multisource.subtree_routing_mode application option, the tool creates a mix of detail routed fishbone trunks and fingers, and global comb routes to connect the net loads to the fishbone fingers, as shown in Figure 97 You can control the fishbone routing by using the following application options: cts.routing.fishbone_max_tie_distance cts.routing.fishbone_max_sub_tie_distance cts.routing.fishbone_bias_threshold cts.routing.fishbone_bias_window cts.routing.fishbone_horizontal_bias_spacing cts.routing.fishbone_vertical_bias_spacing 4.\n Refines the clock trees by sizing and relocating cells based on the routing.\n 431 Analyzing the Clock Tree Results Feedback Figure 97 Detail Fishbone Routes and Global Comb Routes Global comb route Fishbone trunk Fishbone finger You can run specific steps of the synthesize_multisource_clock_subtrees command by using the -from and -to options and specifying merge optimize route_clock, or refine Structural subtrees that you build by using the synthesize_multisource_clock_subtrees command are not changed or removed when you subsequently run any clock tree synthesis command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Minimum Path Resistance Analysis"}, {"role": "assistant", "content": "Note: Minimum path resistance analysis is supported in both RedHawk Fusion and RedHawk-SC Fusion analysis flows.\n Perform minimum path resistance analysis to quickly detect power and ground network weaknesses in the design.\n The minimum path resistance value of a node is the resistance value on the smallest resistive path to the ideal voltage source locations (taps).\n The ideal voltage sources can be power or ground pins, user-defined taps, or packages.\n Because this value represents only the resistance on a single path, it is not necessarily same as the effective resistance value from the node to the supply or ground; instead, it represents an upper bound on the effective resistance of a node to the supply or ground.\n 908 Performing Minimum Path Resistance Analysis Feedback To perform minimum path resistance analysis, run the analyze_rail -min_path_resistance command.\n You must specify the power and ground nets to analyze by using the -nets option.\n Note: In RedHawk-SC rail analysis flow, you must specify both the -voltage_drop and -min_path_resistance options for minimum path resistance calculation.\n You can perform minimum path resistance analysis before or during voltage drop analysis.\n When the analysis is completed, the tool writes the minimum path resistance values and the voltage drop results into the same rail result.\n The following example performs voltage drop analysis and minimum path resistance calculation at the same time.\n fc_shell> analyze_rail -nets {VDD VSS} \\ -min_path_resistance -voltage_drop static The following example performs only minimum path resistance analysis.\n fc_shell> analyze_rail -nets {VDD VSS} -min_path_resistance"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I clock_opt Command"}, {"role": "assistant", "content": "Applying useful skew techniques during datapath optimization to improve the timing QoR by taking advantage of the positive slack and adjusting the clock arrival times of registers is referred to as concurrent clock and data (CCD) optimization.\n By default, the tool performs concurrent clock and data optimization during the clock_opt command.\n To disable concurrent clock and data optimization for the clock_opt command, set the clock_opt.flow.enable_ccd application option to false You can change the default behavior of concurrent clock and data optimization during the clock_opt command by performing any of the following optional steps: 1.\n (Optional) Limit the latency adjustment values for concurrent clock and data optimization as described in Limiting the Latency Adjustment Values 2.\n (Optional) Control the latency adjustment of boundary registers for concurrent clock and data optimization as described in Excluding Boundary Paths 3.\n (Optional) Ignore specific path groups during concurrent clock and data optimization as described in Excluding Specific Path Groups 373 Implementing Clock Trees and Performing Post-CTS Optimization Feedback 4.\n (Optional) Ignore specific scenarios during concurrent clock and data optimization as described in Excluding Specific Scenarios 5.\n (Optional) Ignore specific sinks during concurrent clock and data optimization as described in Excluding Specific Sinks 6.\n (Optional) Control the effort of timing optimization performed during concurrent clock and data optimization as described in Controlling Timing Optimization Effort 7.\n (Optional) Control the effort of hold timing optimization performed during concurrent clock and data optimization as described in Controlling Hold Time Optimization Effort 8.\n (Optional) Control the adjustment of I/O clock latencies performed during concurrent clock and data optimization as described in Controlling the Adjustment of I/O Clock Latencies 9.\n (Optional) Analyze the effects of concurrent clock and data optimization as described in Reporting Concurrent Clock and Data Timing"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Changing the QoR Display Style"}, {"role": "assistant", "content": "By default, the comparison tables show the QoR values for all runs.\n For example, the NVE number for the following run is 2374: To cycle through different display styles of the data, right-click anywhere in the table.\n You can view the data as a percentage delta against the baseline as an absolute delta against the baseline (shown in For example, as a percentage delta, the NVE number shows 2.7% fewer failing endpoints than the baseline: As an absolute delta, the NVE number shows 65 fewer failing endpoints than the baseline: See Also Sorting and Filtering the Data Exploring the Detailed Comparison Data 273 Performing Design Analysis Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Timing-Driven Power Grid Augmentation"}, {"role": "assistant", "content": "Timing-driven power grid augmentation inserts PG augmentation shapes in the specified regions of the block, except around timing-critical nets.\n By default, the tool does not perform timing-driven PG augmentation.\n To perform timing-driven power grid augmentation, 1.\n Ensure that the block is fully routed with very few or no DRC violations.\n 2.\n Run voltage drop analysis using RedHawk Fusion, as described in Performing Voltage Drop Analysis The IC Validator tool uses the results of this voltage drop analysis to drive the power grid augmentation.\n 3.\n Set up the IC Validator environment as described in Setting Up the IC Validator Environment 4.\n (Optional) Enable distributed processing by using the set_host_options command, as described in Enabling IC Validator Multicore Processing 5.\n Set the application options for performing power grid augmentation, as described in Setting Options for Power Grid Augmentation At a minimum, you must define the power and ground nets on which to perform PG augmentation.\n To specify the power net, set the signoff.create_pg_augmentation.power_net_name application option.\n To specify the ground net, set the signoff.create_pg_augmentation.ground_net_name application option.\n If your design contains more than one power net, you must perform PG augmentation once for each power net.\n 703 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback 6.\n Save the block to disk.\n When you run the signoff_create_pg_augmentation command, the IC Validator tool uses the on-disk information for the block, not the information in memory.\n To ensure accurate information, use the save_block command to save the current state of the block before running the signoff_create_pg_augmentation command.\n 7.\n Perform timing-driven power grid augmentation by using the signoff_create_pg_augmentation command with one or both of the following options: -nets This option explicitly specifies the critical nets.\n -timing_preserve_setup_slack_threshold This option enables the tool to automatically determine the critical nets based on a setup slack threshold.\n The unit for the slack threshold setting is the library time unit.\n You must also specify the technology node for which to perform the augmentation by using the -node option.\n If you must perform incremental PG augmentation because your design contains more than one power net, use the -mode add command on subsequent runs to append the PG augmentation shapes to the existing shapes.\n 8.\n Run voltage drop analysis using RedHawk Fusion, as described in Performing Voltage Drop Analysis This second voltage drop analysis run measures the voltage drop after power grid augmentation.\n During timing-driven PG augmentation, the signoff_create_pg_augmentation command 1.\n Performs timing analysis, including multicorner-multimode analysis, to minimize timing impact 2.\n Identifies timing-critical nets based on the options you specify 3.\n Removes existing PG augmentation shapes By default, the command removes the PG augmentation shapes from the entire block.\n To keep the existing PG augmentation shapes, use the -mode add option.\n 4.\n Inserts PG augmentation shapes for the specified regions, except in the areas around the critical nets 704 Improving Instance Voltage Drop by Augmenting the Power Grid Feedback 5.\n Saves the updated block to disk 6.\n Generates a summary report See Also Standard Power Grid Augmentation Guided Power Grid Augmentation Removing PG Augmentation Shapes"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Options for Signoff Metal Fill Insertion"}, {"role": "assistant", "content": "Before you run the signoff_create_metal_fill command, configure the run by setting the application options shown in Table 49.\n To set the application options, use the set_app_options command.\n To see the current settings, use the report_app_options command.\n Table 49 Application Options for Signoff Metal Fill Insertion Application option Default Description Options that apply to all flows signoff.create_metal_fill.\n apply_nondefault_rules false Controls whether metal fill insertion honors nondefault routing rules.\n signoff.create_metal_fill.\n auto_eco_threshold_value 20 Specifies the maximum percentage of change to the block to perform incremental metal fill insertion using the -auto_eco true option.\n signoff.create_metal_fill.\n flat false Controls whether the IC Validator tool uses the metal fill mode specified in the runset file ( false or uses the flat metal fill mode ( true ).\n signoff.create_metal_fill.\n read_design_views {} Specifies the reference cells for which the IC Validator tool reads the design view instead of the frame view.\n Using the design view can expose problems that are masked by the frame view abstraction.\n signoff.create_metal_fill.\n read_layout_views {} Specifies the reference cells for which the IC Validator tool reads the layout view instead of the frame view.\n Using the layout view can expose problems that are masked by the frame view abstraction.\n 708 Inserting Metal Fill With IC Validator In-Design Feedback Table 49 Application Options for Signoff Metal Fill Insertion (Continued) Application option Default Description signoff.create_metal_fill.\n run_dir signoff_fill_run Specifies the run directory, which contains the files generated by the signoff_create_metal_fill command.\n You can specify either a relative path, in which case the directory is created under the current working directory, or an absolute path.\n signoff.create_metal_fill.\n user_defined_options (none) Specifies additional options for the IC Validator command line.\n The string that you specify in this option is added to the command line used to invoke the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string.\n signoff.physical.\n merge_exclude_libraries (none) Specifies the cell libraries whose cells are excluded from replacement with the cell data in the stream files specified in the signoff.physical.\n merge_stream_files application option.\n signoff.physical.\n merge_stream_files (none) Specifies the stream (GDSII or OASIS) files to merge into the current block for metal fill insertion.\n When you use this option, the GDSII or OASIS data replaces the cell library data for the cells defined in the specified stream files.\n Options that apply only to pattern-based metal fill insertion signoff.create_metal_fill.\n runset N/A Specifies the foundry runset to use for pattern-based metal fill insertion.\n This application option is not used for track-based metal fill insertion signoff.physical.\n layer_map_file (none) Specifies the name of the layer mapping file.\n In general, the technology file and the foundry runset file used by the IC Validator tool use the same layer numbers.\n If they do not, you must supply a layer mapping file to map the technology layers to the layers used in the runset file (for details about the format of the layer mapping file, see Defining the Layer Mapping for IC Validator In-Design Commands Options that apply only to track-based metal fill insertion 709 Inserting Metal Fill With IC Validator In-Design Feedback Table 49 Application Options for Signoff Metal Fill Insertion (Continued) Application option Default Description signoff.create_metal_fill.\n max_density_threshold (none) Specifies the maximum density threshold value for a track fill layer.\n Use the following format to specify this information for each layer: layer_name max_density This application option applies only to track-based metal fill insertion and does not apply when you use the -mode add option.\n Options that apply only to timing-driven metal fill insertion (pattern-based or track-based) signoff.create_metal_fill.\n fill_over_net_on_adjacent_la yer false Controls whether the IC Validator tool inserts metal fill within the minimum spacing in the vertical extension of the net on the adjacent layers when performing timing-driven metal fill insertion.\n signoff.create_metal_fill.\n fill_shielded_clock false Controls whether the IC Validator tool inserts metal fill for shielded clock nets when performing timing-driven metal fill insertion.\n signoff.create_metal_fill.\n fix_density_errors false Controls whether the IC Validator tool performs density error fixing during timing-driven metal fill insertion.\n signoff.create_metal_fill.\n space_to_clock_nets Two times the minimum spacing specified in the technology file Specifies the minimum spacing between metal fill and a clock net on the same layer.\n Note that you must specify clock nets by using the -nets option.\n Any unspecified layers use the default spacing.\n signoff.create_metal_fill.\n space_to_nets Two times the minimum spacing specified in the technology file Specifies the minimum spacing between metal fill and a timing-critical net on the same layer.\n Any unspecified layers use the default spacing.\n signoff.create_metal_fill.\n space_to_nets_on_adjacent_la yer Two times the minimum spacing specified in the technology file Specifies the minimum spacing between metal fill and a timing-critical net on an adjacent layer.\n Any unspecified layers use the default spacing.\n 710 Inserting Metal Fill With IC Validator In-Design Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Clock-Gate Latencies"}, {"role": "assistant", "content": "During synthesis, the Fusion Compiler tool assumes that clocks are ideal.\n An ideal clock incurs no delay through the clock network.\n This assumption is made because real clock- network delays are not known until after clock tree synthesis.\n In reality, clocks are not ideal and there is a nonzero delay through the clock network.\n For designs with clock gating, the clock-network delay at the registers is different from the clock-network delay at the clock- 303 Controlling Clock-Gate Latencies Feedback gating cell.\n This difference in the clock-network delay at the registers and at the clock- gating cell results in tighter constraints for the setup condition at the enable input of the clock-gating cell.\n The tool can obtain clock-gate latencies in the following ways: Integrated latency estimation By default, the tool estimates and updates clock-gate latencies throughout the flow.\n Estimated clock latencies are more accurate than user-specified clock latencies.\n User-specified latency You can disable integrated latency estimation for specific instances and specify latency values manually."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Scaling CCD Offsets to New Scenarios for Reporting Timing"}, {"role": "assistant", "content": "To copy concurrent clock and data (CCD) offsets to the new scenarios for consistent timing or QoR reports, use the copy_useful_skew command.\n During CCD, when a pin's CTS balance point offsets are derived in only a subset of the active scenarios, use this command to copy the offsets to the in-active scenarios and active scenarios that do not have the CCD offsets.\n The copy_useful_skew command also ensures that the corresponding constraints of the set_clock_latency command are set on all the pins and scenarios, where a new offset value is computed.\n The average value of the offset is computed across all scenarios, where a balance point offset is defined.\n The average value is then scaled back in each active scenario using the scaling factor of the scenario corner."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Clock Trees"}, {"role": "assistant", "content": "After synthesizing and optimizing the clocks, you can detail route the clock nets by using the route_group command, as shown in the following example: fc_shell> route_group -all_clock_nets -reuse_existing_global_route true When you set the -reuse_existing_global_route option of the route_group command to true, the detail router uses the existing clock global routes, which ensures better correlation.\n Alternatively, you can detail route the clock nets by using the clock_opt command, as shown in the following example: fc_shell> clock_opt -from route_clock -to route_clock"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Register Replication"}, {"role": "assistant", "content": "You can perform logic optimization by running the compile_fusion -to logic_opto command.\n To identify registers that you want the tool to replicate during logic optimization, use the set_register_replication command.\n This command sets the register_replication attribute on the specified registers and improves the timing by balancing fanout.\n During logic optimization, the specified registers are replicated and the loads of the original registers are evenly distributed among the new replicated registers when the -num_copies option is used.\n When you use the -max_fanout option, the tool computes the number of copies and attempts to distribute loads evenly without violating the maximum fanout constraints.\n You can control the number of copies that are created by using one of the following methods: Specify the total number of registers after replication, including the original, by using the -num_copies option.\n Specify the maximum fanout of the replicated registers by using the -max_fanout option.\n If you specify both options, the -max_fanout option is ignored.\n The following example specifies that the tool should replicate the regA and regB registers by creating one additional copy of each register: fc_shell> set_register_replication -num_copies 2 regA fc_shell> set_register_replication -num_copies 2 regB Figure 33 shows the regA and regB registers before and after optimization.\n Figure 33 Before and After Register Replication r1 r2 r3 Out1 Out2 r1 r2 r3 RegB regA RegA regB regA regB Out2 Out1 238 Controlling Mapping and Optimization Feedback You can include logic in the fanin or fanout of the specified register by using the -include_fanin_logic or -include_fanout_logic option.\n You can specify any startpoint in the fanin or endpoint in the fanout of the register.\n The following example specifies that the tool should replicate the A_reg register and the logic in the path from this register to the U1 cell: fc_shell> set_register_replication -num_copies 2 A_reg \\ -include_fanout_logic U1 To specify endpoint registers or primary output ports that must be driven by the original register after replication, as shown in Figure 34, use the -driven_by_original_register option.\n The following example specifies that after replication, the r0 register must drive the r1, r2, and r3 registers: fc_shell> set_register_replication -num_copies 3 r0 \\ -driven_by_original_register {r1 r2 r3} Figure 34 Using the -driven_by_original_register Option r0 r1 r2 r3 Out1 Out2 Out3 r0 r1 r2 r3 Out1 Out2 Out2 r0_rep1 r0_rep2"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Identifying and Reverting Nonoptimal ECO Changes"}, {"role": "assistant", "content": "You can identify if ECO changes made with the size_cell add_buffer, and add_buffer_on_route commands can cause large displacements during ECO placement and legalization by using the report_eco_physical_changes command.\n 972 Placing ECO Cells Feedback You can revert the nonoptimal ECO changes made by the size_cell add_buffer, and add_buffer_on_route commands by using the revert_eco_changes command.\n To specify the cells for which to revert the ECO changes, use the -cells option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Handling Design Data Using the Early Data Check Manager"}, {"role": "assistant", "content": "While you identify the issues related to top-level closure and fix them, the tool enables you to explore the top-level flow in the presence of design data violations.\n The hierarchical checks can detect different types of mismatched, incomplete, and inconsistent data in designs.\n You can configure the following policies for the hierarchical checks to manage the design data violations: Error: When you apply this policy, the tool does not mitigate the violation, but issues an error message.\n Tolerate: When you apply this policy, the tool makes predictable and explainable assumptions to continue with the flow.\n No changes are made to the design or setup.\n Repair: When you apply this policy, the tool mitigates the violation using one or more repair strategies and records it.\n Repair can include changes in design and setup.\n Strict: When you apply this policy, depending on the policy supported by the check, the tool applies the policies in this order \u2013 error, tolerate, repair.\n Lenient: When you apply this policy, depending on the policy supported by the check, the tool applies the policies in this order \u2013 repair, tolerate, error.\n Note: Quality of results of the top-level flow might get impacted due to the toleration and repair of errors.\n Error toleration and repair is mainly provided for managing data violations during the early design exploration phases.\n In the implementation flow, you should use the strict policy for all checks."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Nondefault Routing Rules"}, {"role": "assistant", "content": "Zroute supports the use of nondefault routing rules, both for routing and for shielding.\n For routing, you can use nondefault routing rules to define stricter wire width and spacing rules, to define the pin tapering distance, to specify the vias used when routing nets with nondefault routing rules, and to specify multiple-patterning mask constraints.\n For shielding, you can use nondefault routing rules to define the minimum width and spacing rules.\n For information about working with nondefault routing rules, see the following topics: Defining Nondefault Routing Rules Reporting Nondefault Routing Rule Definitions Removing Nondefault Routing Rules Modifying Nondefault Routing Rules 494 Routing Constraints Feedback Assigning Nondefault Routing Rules to Nets Reporting Nondefault Routing Rule Assignments"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Improving Latency-Driven Clock-Gate Splitting"}, {"role": "assistant", "content": "The latency-driven clock-gate (CG) splitting now automatically identifies and evaluates different CG cloning moves.\n This improves clock insertion delay to meet the maximum level constraint.\n To enable level driven CG splitting, set the cts.icg.latency_driven_cloning application option to true Figure 80 Latency Driven Clock-Gate Splitting"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining the Shielding Rules"}, {"role": "assistant", "content": "Before you perform shielding, you must 1.\n Define the shielding rules.\n To define shielding rules, use the -shield_spacings and -shield_widths options of the create_routing_rule command.\n For example, to specify a shielding rule that uses spacing of 0.1 microns and width of 0.1 microns for metal1 through metal5 and spacing of 0.3 microns and width of 0.3 microns for metal6, use the following command: fc_shell> create_routing_rule shield_rule \\ -shield_widths {M1 0.1 M2 0.1 M3 0.1 M4 0.1 M5 0.1 M6 0.3} \\ -shield_spacings {M1 0.1 M2 0.1 M3 0.1 M4 0.1 M5 0.1 M6 0.3} For more information about the create_routing_rule command, see Using Nondefault Routing Rules 540 Shielding Nets Feedback 2.\n Assign shielding rules to the nets to be shielded.\n To avoid congestion issues and achieve the best balance of DRC convergence and timing closure, you should apply shielding rules only to high-frequency or critical clock nets and apply double-spacing rules to the lower-frequency clock nets.\n To assign shielding rules to clock nets, use the set_clock_routing_rules command.\n Note: You can use the set_clock_routing_rules command only before clock tree synthesis.\n To assign shielding rules to signal nets, use the set_routing_rule command.\n For more information about these commands, see Assigning Nondefault Routing Rules to Nets"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Timing-Driven Metal Fill Insertion"}, {"role": "assistant", "content": "Timing-driven metal fill insertion inserts metal and via fill in the specified regions of the block, except around timing-critical nets.\n Timing-driven metal fill insertion is supported 724 Inserting Metal Fill With IC Validator In-Design Feedback for both pattern-based and track-based metal fill insertion.\n By default, the tool does not perform timing-driven metal fill insertion.\n To perform timing-driven metal fill insertion, use one or both of the following options with the signoff_create_metal_fill command: -nets This option explicitly specifies the critical nets.\n -timing_preserve_setup_slack_threshold This option enables the tool to automatically determine the critical nets based on a setup slack threshold.\n The unit for the slack threshold setting is the library time unit.\n Be careful when choosing the threshold value; using a large threshold value can result in too many critical nets, which could reduce the metal density and create large empty areas.\n During timing-driven metal fill insertion, the signoff_create_metal_fill command 1.\n Performs timing analysis, including multicorner-multimode analysis, to minimize timing impact 2.\n Identifies timing-critical nets based on the options you specify 3.\n Removes existing metal and via fill By default, the command removes the metal and via fill from the entire block.\n For information about performing incremental metal fill insertion, see Incremental Metal Fill Insertion 4.\n Inserts metal and via fill in the empty regions for the specified regions, except in the areas around the critical nets To enable fill insertion for shielded timing-critical clock nets, set the signoff.create_metal_fill.fill_shielded_clock application option to true 5.\n Invokes the IC Validator tool to perform metal fill insertion By default, the minimum spacing between the metal fill and the net shapes of the critical nets is two times the minimum spacing specified in the technology file.\n This spacing requirement also applies to the vertical extension of the critical net on the adjacent layers.\n To modify these requirements, set the appropriate application options, as described in Specifying the Spacing Requirements for Timing-Driven Metal Fill Insertion Note: You can restrict the regions in which to perform timing-driven metal fill insertion, as described in Specifying the Regions for Metal Fill Insertion 725 Inserting Metal Fill With IC Validator In-Design Feedback and Performing Metal Fill Insertion Only in Modified Regions ; however, you cannot specify the layers.\n When performing timing-driven metal fill insertion, the signoff_create_metal_fill command inserts metal fill on all routing layers (or all changed layers, if you perform metal fill insertion only in the changed regions).\n 6.\n (Optional) Fixes density errors In some cases, the spacing requirements for timing-driven metal fill insertion might cause density errors.\n To fix these errors automatically during timing-driven metal fill insertion, set the signoff.create_metal_fill.fix_density_errors application option to true (the default is false ).\n For information about the density design rules, see Defining the Density Design Rules 7.\n Stores the metal fill data as fill cell objects in the design view 8.\n Writes the result files to the run directory For information about the generated result files, see Signoff Metal Fill Result Files See Also Pattern-Based Metal Fill Insertion Track-Based Metal Fill Insertion Specifying the Spacing Requirements for Timing-Driven Metal Fill Insertion By default, the minimum spacing between the metal fill and the net shapes of the critical nets is based on the minimum spacing specified in the technology file.\n For metal fill on the same layer as the net shape, the default minimum spacing is two times the minimum spacing value specified for the layer in the technology file.\n For metal fill on layers adjacent to the net shape, the default minimum spacing is the minimum spacing value specified for the layer in the technology file.\n For example, assume that the red rectangle in Figure 149 is a critical net shape.\n The yellow regions indicate where fill cannot be inserted and the gray regions indicate the inserted fill.\n Figure 149 Minimum Spacing From Metal Fill to Critical Net Shape 726 Inserting Metal Fill With IC Validator In-Design Feedback To override the default spacing requirements for timing-driven metal fill insertion, set the following application options: signoff.create_metal_fill.space_to_nets This application option defines the same-layer minimum spacing requirements between metal fill and a net shape of a timing-critical net.\n signoff.create_metal_fill.space_to_clock_nets This application option defines the same-layer minimum spacing requirements between metal fill and a net shape of a user-defined clock net that is specified in the -nets option.\n signoff.create_metal_fill.space_to_nets_on_adjacent_layer This application option defines the adjacent-layer minimum spacing requirements between metal fill and a net shape of a timing-critical net.\n signoff.create_metal_fill.space_to_clock_nets_on_adjacent_layer This application option defines the adjacent-layer minimum spacing requirements between metal fill and a net shape of a user-defined clock net that is specified in the -nets option.\n For each of these application options, use the following syntax to specify the spacing to use for each layer: { { layer value }...\n { layer value } } You can specify the spacing value either as a multiple of the minimum spacing ( x) or a distance in microns.\n For example, to set the minimum spacing between metal fill and a timing-critical net on the same layer to four times the minimum spacing for the M2 and M3 layers, use the following command: fc_shell> set_app_options \\ -name signoff.create_metal_fill.space_to_nets \\ -value {{M2 4x} {M3 4x}} To set the minimum spacing between metal fill and a timing-critical net on the same layer to 0.125 microns for the M2 layer and 0.133 microns for the M3 layer, use the following command: fc_shell> set_app_options \\ -name signoff.create_metal_fill.space_to_nets \\ -value {{M2 0.125} {M3 0.133}} 727 Inserting Metal Fill With IC Validator In-Design Feedback Defining the Density Design Rules The IC Validator tool can check and fix the following density design rules: Minimum density, which specifies the minimum percentage of metal allowed in the density checking window This rule is checked when you enable density error fixing by setting the signoff.create_metal_fill.fix_density_errors application option to true By default, the IC Validator tool uses the setting defined for the minDensity attribute in the DensityRule sections of the technology file.\n If this attribute is not defined for a layer, the IC Validator tool uses a default of 10 percent.\n To override the default, define the _min_density parameter in the IC Validator parameter file.\n Density gradient, which specifies the maximum percentage difference between the fill density of adjacent density checking windows This rule is checked if it is defined in the technology file and you enable density error fixing by setting the signoff.create_metal_fill.fix_density_errors application option to true The IC Validator tool uses the setting defined for the maxGradientDensity attribute in the DensityRule sections of the technology file.\n If this attribute is not defined for a layer, the IC Validator tool does not check this rule.\n Maximum open area, which specifies the maximum size of a square area that contains no polygons and does not interact with any polygons This rule is checked if it is defined.\n The maximum open area rule is defined in an IC Validator parameter file.\n Use the following syntax to define the maximum open area rule for each metal layer: _max_open_area_rule = value where is the metal layer number and value is the side length of the square in microns.\n For more information about the IC Validator parameter file, see Using an IC Validator Parameter File For more information about the technology file, see the Synopsys Technology File and Routing Rules Reference Manual 728 Inserting Metal Fill With IC Validator In-Design Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Auto Grouping Flow"}, {"role": "assistant", "content": "Auto repeater group creation allows you to derive virtual connections for register paths.\n For repeater group input mode, place_group_repeaters applies cutline based placement.\n You must specify cutline for each group.\n Repeaters are placed based on the intersection point between cutline and route.\n Build connectivity based on real connections for target cells.\n 1.\n To group a list of repeaters or repeaters of supernets, use the create_repeater_groups command.\n Also, specify the constraint option.\n The command automatically performs cell grouping and groups virtual connection with the following attributes: group_repeater_driver group_repeater_loads pin_pair group_id 2.\n Verify the path with the get_attribute report_repeater_group, and get_repeater_path_info commands.\n The get_attribute command reports the attributes of the group_repeater_driver or group_repeater_loads command.\n The command report_repeater_groups reports group information for specified groups or all groups, and reports repeater paths for all groups if -verbose is on.\n The get_repeater_paths_info command returns cells on repeater paths that include input cells.\n 3.\n Specify the cutline for a group manually with the set_repeater_group -group_id- cutline command.\n 4.\n Place interconnect repeaters on route with cutline for input repeater groups."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I ECO Fusion Flow"}, {"role": "assistant", "content": "The Fusion Compiler ECO Fusion flow allows you to use the PrimeTime physically aware ECO capabilities and the StarRC extraction capabilities (In-Design signoff extraction) within the Fusion Compiler tool.\n You can use this flow to fix timing and DRC violations and improve area and power QoR at the very late stages of the implementation flow.\n The Fusion Compiler ECO Fusion flow consists of the following steps: 1.\n Specify the settings required to run the PrimeTime ECO capabilities within the Fusion Compiler tool by using the set_pt_options command.\n The following example specifies the path to the PrimeTime executable and the settings for distributed processing: fc_shell> set_host_options -name pteco_host_option \\ -submit_command \"/lsf/bin/bsub -R \\\"rusage\\[mem=$MEM\\]\\\"\" fc_shell> set_pt_options -pt_exec /snps_tools/PT/pt_shell \\ -host_option pteco_host_option If there is a.synopsys_pt.setup file in the current working directory, the Fusion Compiler tool uses the information in this file.\n However, you can specify additional PrimeTime settings by using the -pre_link_script and -post_link_script options of the set_pt_options command.\n For more information, see the man page for the set_pt_options command.\n 2.\n Set up StarRC extraction as follows: a.\n Ensure that StarRC extraction is enabled.\n StarRC extraction is controlled by the extract.starrc_mode application option.\n The default is fusion_adv.\n You can also set the value to in-design or none To use the native extractor, set the value to none b.\n Specify a configuration file for running StarRC extraction by using the set_starrc_options -config command.\n 954 ECO Fusion Power Integrity Flow Feedback 3.\n Perform optimization by using the eco_opt command.\n By default, the eco_opt command fixes timing (setup and hold) and DRC violations, removes redundant buffers, and improves the total power QoR by using PrimeTime ECO capabilities.\n It then incorporates the ECO changes by using the Fusion Compiler ECO place and route capabilities.\n However, you can control the type of optimization by using the -type option.\n The following example uses the eco_opt command to fix only timing and DRC violations using exhaustive path-based analysis: fc_shell> eco_opt -pba_mode exhaustive -types {timing drc} The following example uses the eco_opt command to improve the leakage power QoR.\n However, it does not incorporate the ECO changes.\n Instead, it generates a file containing the ECO changes.\n fc_shell> eco_opt -pba_mode exhaustive -types {timing drc} \\ -write_change_file_only For more information, see the man page for the eco_opt command.\n 4.\n Analyze the PrimeTime QoR by using the check_pt_qor command.\n For more information, see the man page for the check_pt_qor command.\n Note: When you run the eco_opt command, the Fusion Compiler tool specifies the PrimeTime settings based on the Fusion Compiler timing analysis settings, such as derating factors, on-chip-variation settings, and so on.\n Therefore, for optimal convergence, ensure that the Fusion Compiler timing analysis settings at the postroute stage are consistent with the PrimeTime timing analysis settings.\n You can identify the differences in the Fusion Compiler and PrimeTime settings by using the check_consistency_settings command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Voltage Driven Power Switch Cell Sizing"}, {"role": "assistant", "content": "The Fusion Compiler tool can resize power switch cells to reduce total power and to mitigate the voltage drop in the design.\n Power switch cells have different voltage thresholds (V ) and are classified as high, standard, low, and ultra-low.\n For a power cell with high threshold voltage, the power consumption and leakage current is low, but the timing is also slow with a smaller drive strength.\n For a power cell with a low threshold voltage, the timing is faster but the power consumption and leakage current is high.\n With power switch cell sizing, the tool supports different drive strength and voltage threshold to reduce IR (voltage) drop in the design.\n Note: When the tool switches power cells (swapping), it can only swap cells with the same footprint but with different threshold voltages.\n This means, the cell cannot be swapped if the cell size and pin shapes are different.\n To perform power switch cell swapping, you can use the size_power_switches command to set the maximum IR drop target.\n To meet this target when swapping power cells, the tool tries to find another cell with higher V, but lower R ON value, so that it can reduce the IR drop.\n You can set the ON resistance (R ON ) value to be considered by the tool for swapping using the set_power_switch_resistance command.\n Based on the IR drop target and the set R ON value of the power cell, the tool tries to replace power cells to meet the targeted voltage drop.\n 918 Voltage Driven Power Switch Cell Sizing Feedback Note: If the tool does not find any suitable power cell that matches the targeted voltage drop and R ON value, it skips cell resizing.\n To perform voltage driven cell sizing, 1.\n Perform a voltage drop analysis using RH Fusion to get the maximum voltage drop of the cells driven by the power switch in question.\n Refer Performing Voltage Drop Analysis for more information.\n 2.\n Set the RON value limit to be considered for cell switching using the set_power_switch_resistance command.\n Provide the following values as input, Lib cell name - specifies the name of the library cell.\n On resistance value - specifies the RON value limit to be considered for cell sizing.\n You can get this information from the switch model files.\n For example, fc_shell> set_power_switch_resistance saed32hvt_pg_ss0p_v125c/HEAD2X2_HVT 0.015 3.\n Run the size_power_switches command to perform cell size switching.\n Provide the value for -max_irdrop option which specifies the allowed maximum effective voltage drop on supply nets for standard cells driven by switches.\n This is a mandatory input.\n For example, fc_shell> size_power_switches -max_irdop 0.05 For the other non-mandatory inputs to further refine the command action, see the man page for the size_power_switches command.\n The tool also provides the following commands to further help with power switch resistance: get_power_switch_resistance - This command fetches the R ON value of a power switch cell.\n reset_power_switch_resistance - This command resets the R ON value specified for a power switch cell.\n report_power_switch_resistance - This command reports all power switch library cells with a set R ON.\n Use the -verbose option with the command to display the group of cells with the same footprint, the R on value and the number of cells instantiated in the design.\n When using the -verbose option, you can also use -same_vt option to report power switch cells and their R ON value from current library with same VT but different driving strength cells.\n 919 Working With Macro Models Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Summary Report for Automatic Design Rule Fixing"}, {"role": "assistant", "content": "The signoff_fix_drc command writes a summary report file, result_summary.rpt, to the current working directory.\n Example 30 shows an example of this report.\n Example 30 result_summary.rpt Example Input DRC Error Database............\n./inputs/signoff_check_drc_run Limit to Cell.......................\n my_design Maximum Errors/Command..............\n 1000 691 Performing Signoff Design Rule Checking Feedback SIGNOFF AUTOFIX DRC SUMMARY: : : : : REMAINING : : : TOTAL : PROCESSED : TARGETED : TARGETED : FIX : DRC NAME : DRC : DRC : DRC : DRC : RATE : COMMENT M0.W.3 : Maximum width : 1 : 1 : 0 : 0 :  : 1 ignored: <#1> M4.L.3 : Edge length wi : 4 : 4 : 0 : 0 :  : 4 ignor ed: <#2> M4.L.5:2 : Edge length : 2 : 2 : 0 : 0 :  : 2 ignored: <#2> M4.W.3 : Maximum width : 1 : 1 : 0 : 0 :  : 1 ignored: <#1> VIA1.S.10.3 : Space of : 10 : 10 : 2 : 0 : 100.0% : 8 ignored: <#2> TOTAL : : : 2 : 0 : 100.0% : NOTE: Reasons : Detail Info #1 : size of error shapes greater than threshold #2 : shapes associated with error are not Zroute modifiable The following table describes each of the columns in the summary report: Table 45 Definitions of Columns in result_summary.rpt Column heading Description DRC NAME Name of the design rule from the runset TOTAL DRC Total number of DRC violations detected by the signoff_check_drc run PROCESSED DRC Total number of the detected DRC violations that went through the filtering process to determine whether they can be targeted TARGETED DRC Number of DRC violations that automatic DRC fixing will attempt to fix after the filtering process REMAINING TARGETED DRC Number of DRC violations that remain after automatic DRC fixing FIX RATE The ratio of remaining targeted DRC violations to targeted DRC violations COMMENT Explanation for ignored DRC violations; the detailed reason codes are provided in the NOTES section of the report 692 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Transparent Hierarchy Optimization"}, {"role": "assistant", "content": "Transparent hierarchy optimization (THO) enables the tool to transparently optimize hierarchical designs.\n THO enables you to optimize the top and subblocks concurrently while honoring the physical block boundaries, and at the same time using all advanced optimization techniques such as CCD, AWP, PrimeTime delay calculation, and so on.\n During THO, the tool optimizes the top-level and specific subblocks (design views) in the context of top-level timing.\n THO does not change the subblock shape and physical hierarchy.\n By default, the tool honors the pin locations, but provides an option to reassign pin locations to improve QoR.\n You can continue your signoff flow with hierarchical blocks because you do not have to flatten the design.\n Signoff extraction and PrimeTime STA can be run hierarchically.\n In addition, any late ECOs can be easier to implement as well.\n THO is available during compile_fusion in the final_place and final_opto stages, as well as during route_opt and hyper_route_opt 860 Transparent Hierarchy Optimization Feedback Figure 197 Transparent Hierarchy Optimization Flow THO Flow open_block -ref_libs_for_edit (Blocks linked with design view) Enable THO settings compile_fusion -from final_place route_opt OR hyper_route_opt T H O The following example flow shows the usage of THO in the overall implementation flow.\n In this example, the THO operations are run as an additional incremental optimization step on top of the typical hierarchical optimization flow.\n 861 Transparent Hierarchy Optimization Feedback The THO flow includes the following steps: Accessing Libraries Setting up Transparent Hierarchy Optimization Performing THO During compile_fusion final_place Stage Performing THO During compile_fusion final_opto Stage Rebudgeting After compile_fusion Performing THO During route_opt or hyper_route_opt"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting the Metal Density"}, {"role": "assistant", "content": "To report the metal density information, run the signoff_report_metal_density command.\n 734 Inserting Metal Fill With IC Validator In-Design Feedback To calculate the metal density information for a metal layer, the tool requires the following information: The density rule for the layer The tool determines the density rule for each layer by using the following settings, in order of priority: 1.\n The setting of the _min_density parameter in the IC Validator parameter file specified by the signoff.report_metal_density.user_defined_options application option 2.\n The setting of the signoff.report_metal_density.min_density application option 3.\n The setting of the minDensity attribute in the DensityRule section of the technology file 4.\n 10 percent The grid sizes for the layer The tool determines the grid sizes for each layer by using the following settings, in order of priority: 1.\n The setting of the _min_density_window or _density_gradient_window parameter in the IC Validator parameter file specified by the signoff.report_metal_density.user_defined_options application option 2.\n The setting of the signoff.report_metal_density.density_window or signoff.report_metal_density.gradient_window_size application option 3.\n The setting of the windowSize attribute in the DensityRule section of the technology file 4.\n 50 microns For information about defining the metal density and density gradient rules in the technology file, including the windowSize attribute, see the Synopsys Technology File and Routing Rules Reference Manual By default, the signoff_report_metal_density command Uses the fill data for the metal density calculation To use the design view if its timestamp is newer than the fill data, set the signoff.report_metal_density.fill_view_data application option to read_if_uptodate To use the design view regardless of its timestamp, set the signoff.report_metal_density.fill_view_data application option to discard 735 Inserting Metal Fill With IC Validator In-Design Feedback Creates the density and gradient windows starting from the lower-left corner of the chip boundary using a step size of half the window size To change the starting point for creating the windows, use the -starting_point option with the signoff_report_metal_density command.\n To change the step size, set the signoff.report_metal_density.density_window_step application option or the _window_step_size parameter in the IC Validator parameter file specified by the signoff.report_metal_density.user_defined_options application option.\n If you specify both, the IC Validator parameter overrides the application option.\n Computes the metal density for the entire block To compute the metal density for specific regions, use the -coordinates option with the signoff_report_metal_density command.\n When you use this option, the command combines the specified regions when reporting the metal density; it does not report the metal density individually for each specified region.\n To specify the coordinates, use the following format: {{x } {x }...\n {x }} Note that there must be a space between each set of coordinates.\n Computes the metal density for each metal layer from the minimum routing layer to the maximum routing layer To compute the metal density for specific layers, use the -select_layers option with the signoff_report_metal_density command.\n Does not generate heat maps To generate heat maps to enable viewing of the metal density information in the GUI, set the signoff.report_metal_density.create_heat_maps application option to true.\n For information about viewing the heat maps, see Viewing Density Heat Maps in the GUI Writes the report files to a directory named signoff_report_metal_density_run under the current working directory To change the name of the IC Validator working directory, set the signoff.report_metal_density.run_dir application option.\n By default, the report files are named report_metal_density.txt and gradient_density_report.txt.\n To change the file names, use the -output option with the signoff_report_metal_density command.\n When you use this option, the density report has the specified file name, while the gradient density report adds a.gradient file extension.\n For example, if you specify - output density.rpt, the density report is named density.rpt and the gradient density report is named density.rpt.gradient.\n 736 Inserting Metal Fill With IC Validator In-Design Feedback The signoff_report_metal_density command uses the options that you specify to generate the command line to invoke the IC Validator tool.\n You can specify additional options for the IC Validator command line by setting the signoff.report_metal_density.user_defined_options application option.\n The string that you specify in this option is added to the command line used to invoke metal density reporting in the IC Validator tool.\n The Fusion Compiler tool does not perform any checking on the specified string.\n See Also Using an IC Validator Parameter File"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Top-Level Closure With Abstract Views"}, {"role": "assistant", "content": "You can perform top-level closure by implementing the blocks first, and then implementing the top level, as shown in the following flow diagram: Figure 195 Top-Level Implemented After Blocks are Completed Abstract and frame views for each block Clock Tree Synthesis Routing Postroute Optimization Postroute Optimization Synthesis, Placement and Optimization Synthesis, Placement and Optimization Clock Tree Synthesis Routing Block-level flow Top-level flow 854 Creating ETMs and ETM Cell Libraries Feedback Alternatively, you can implement the blocks and top-level in parallel, as shown in the following flow diagram: Figure 196 Top and Block Levels Implemented in Parallel Clock Tree Synthesis Routing Postroute Optimization Postroute Optimization Synthesis, Placement and Optimization Synthesis, Placement and Optimization Clock Tree Synthesis Routing Block-level flow Top-level flow Abstract and frame views for each block When using abstracts at the top-level, you can perform top-level synthesis, placement, optimization, clock tree synthesis, routing, and postroute optimization using the commands supported at the block level.\n Currently the tool does not make changes within the abstracts during top-level closure.\n Therefore, you can create and use read-only abstracts."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Boundary Cell Insertion Requirements"}, {"role": "assistant", "content": "To remove one or more of the boundary cell insertion requirements specified by the set_boundary_cell_rules command, use the remove_boundary_cell_rules command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Placing ECO Cells With Minimal Physical Impact (MPI)"}, {"role": "assistant", "content": "To minimize the disturbance to the existing placement during ECO placement, use the following options with the place_eco_cells command: -legalize_mode minimum_physical_impact -max_displacement_threshold -remove_filler_references"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Preserving Timing During Redundant Via Insertion"}, {"role": "assistant", "content": "When you insert redundant vias, it changes the timing of your block.\n Short nets tend to slow down due to increased capacitance, whereas long nets tend to speed up due to decreased resistance.\n Zroute redundant via insertion has a timing-preservation mode that allows you to perform redundant via insertion without affecting the block timing by preventing insertion of redundant vias on critical nets.\n To enable timing-preservation mode for redundant via insertion, define the timing preservation constraints by using the following options of the add_redundant_vias command: -timing_preserve_setup_slack_threshold -timing_preserve_hold_slack_threshold -timing_preserve_nets You should timing-preservation mode only at the end of the flow, after using the normal redundant via insertion flows, which converge both the redundant via rate and the timing QoR.\n Timing-preservation mode can slightly increase the redundant via rate while maintaining timing.\n However, if you use timing-preservation mode earlier in the flow, before timing is met, it might severely reduce the redundant via rate due to critical nets."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Voltage Areas"}, {"role": "assistant", "content": "To remove voltage areas from a block, use the remove_placement_blockage comandcomandsremove_placement_blockage remove_voltage_areas command.\n To remove all voltage areas from a block, use the -all option.\n To remove specific voltage areas from a block, specify the voltage area names.\n 130 Setting Up Multivoltage Designs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reducing Dynamic Voltage Drop"}, {"role": "assistant", "content": "When running the compile_fusion command, you can reduce dynamic voltage drop across a block by enabling dynamic power shaping optimization by setting the compile.flow.enable_dps application option to true.\n The tool performs dynamic power shaping optimization during the final_opto stage of the compile_fusion command.\n When you enable this feature, the tool performs power analysis and uses useful skew techniques to reduce dynamic voltage drop.\n Optionally, you can customize the power analysis performed during dynamic power shaping optimization by using the ccd.dps.use_case application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Blockages"}, {"role": "assistant", "content": "To add a blockage within relative placement groups, use the -blockage option with the add_to_rp_group command.\n When you add a blockage using this command, you can specify The column and row position within the relative placement group by using the -column and -row options.\n If you do not specify a position, the tool adds the blockage to position (0,0).\n The size of the blockage by using the -height and -width options.\n If you do not specify the -height or -width option, the tool determines the size based on the tiling type of the relative placement group as follows: For a tiling type setting of bit_slice, the height default to the height of site row and the width to width of the column.\n For a tiling type setting of compression, the height default to the height of site row and the width to the width of one site.\n That the blockages can overlap with other relative placement blockages or other objects that are not relative placement cells by using the -allow_overlap option.\n The following example adds a blockage named gap1 to the rp1 relative placement group at position (0,2) that is one site row high and five site rows wide: fc_shell> add_to_rp_group rp1-blockage gap1 \\ -column 0 -row 2 -width 5 -height 1 791 Specifying Options for Relative Placement Groups Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying a Cell Name Prefix for Optimization"}, {"role": "assistant", "content": "You can specify a name prefix for the cells added on the data nets during optimization by using the opt.common.user_instance_name_prefix application option.\n The following example specifies a name prefix of CF_ for the cells added on the data nets during the compile_fusion command CO_ for the cells added on the data nets during the clock_opt command RO_ for the cells added on the data nets during the route_opt command fc_shell> set_app_options \\ -name opt.common.user_instance_name_prefix -value \"CF_\" fc_shell> compile_fusion fc_shell> set_app_options \\ -name opt.common.user_instance_name_prefix -value \"CO_\" fc_shell> clock_opt fc_shell> set_app_options \\ -name opt.common.user_instance_name_prefix -value \"PO_\" fc_shell> route_opt To specify a name prefix for the cells added on the clock network during clock tree synthesis, use the cts.common.user_instance_name_prefix application option, as described in Defining a Name Prefix for Clock Cells"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Nets in the GUI"}, {"role": "assistant", "content": "To route nets interactively in the active layout view, draw the routes with the layout editing tolsCreate Route tol Create Route tool.\n To activate the Create Route tool, click the button on the Edit toolbar or choose Create > Route.\n To draw route segments, you click points in the layout view.\n The tool displays flylines and target port and pin locations to guide you in drawing the route segments.\n It can also check for routing design rule violations as you draw the route segments.\n You can set options to adjust the routing, control the tool operation, and enable or disable routing aids.\n By default, the Create Route tool Ignores routing blockages To force the tool to honor these blockages, change the setting in the Mouse Tool Options panel.\n Note: The Create Route tool does not honor routing guides defined by the create_routing_guide command.\n Uses the metal width and metal spacing requirements defined in the technology file and ignores nondefault routing rules To force the tool to honor nondefault routing rules, change the setting in the Mouse Tool Options panel.\n When you enable this feature, the Create Route tool honors the metal width and metal spacing requirements from the nondefault routing rule and uses these settings to determine the width and pitch of the routes.\n Note: The shielding width and shield spacing defined in the nondefault routing rule are not used by the Create Route tool.\n 560 Routing Nets in the GUI Feedback If you route on grid and know that there no obstacles, you can reduce runtime by skipping the spacing checks during automatic welding and automatic alignment.\n To force the tool to ignore the spacing requirements during these tasks, change the settings in the Mouse Tool Options panel.\n You can reverse and reapply Create Route tool operations by using the GUI undo and redo capabilities.\n For detailed information about using the Create Route tool, click on the Mouse Tool Options panel after you activate the Create Route tool.\n This opens a Help page in the man page viewer."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Commands in the Background"}, {"role": "assistant", "content": "To improve runtime, you can run checking and reporting commands in the background while you run other commands in the foreground.\n This is useful in interactive sessions when you want to continue your work while the tool generates a report.\n To run commands in the background, use the redirect command with the -bg option.\n When you use this command, fc_shell returns immediately to execute the next command.\n If you issue an exit command in the parent process, the tool waits for all redirect -bg commands to complete before exiting.\n To list the commands supported by the redirect -bg command, use the list_commands -bg command.\n You can run either a single command or source a Tcl script that contains 69 Enabling Multicore Processing Feedback only supported commands.\n If the command or script includes a redirect -bg command, the -bg option is ignored.\n You can run at most two jobs in the background.\n If you specify more than two background jobs, they are queued.\n To specify the maximum number of cores to use for the background jobs, use the -max_cores option with the redirect command.\n The number of cores available for the parent process (as specified by the -max_cores option of the set_host_options command) is reduced by the number of cores allocated for background jobs.\n The following example redirects a Tcl script to run in the background: fc_shell> set_host_options -max_cores 8 fc_shell> redirect -bg -max_cores 3 -file bg_log.out \\ {source bg_script.tcl} Information: redirect -bg with max_cores 3 started.\n The maximum number of cores available in parent is reduced to 5.\n (BGE-004) Reporting Background Jobs To report the background jobs submitted with the redirect -bg command, use the report_background_jobs command.\n This command reports both the completed jobs and the jobs currently running in the background, as shown in the following example: fc_shell> report_background_jobs JOB'redirect -bg -file {background.log} source bg_script.tcl -max_cores 4'completed JOB(pid:13010)'redirect -bg -file {background_1.log} source bg_script_1.tcl -max_cores 3'is running To omit the completed jobs, use the -reset option with the report_background_jobs command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Chip Finishing and Design for Manufacturing"}, {"role": "assistant", "content": "The Fusion Compiler tool provides chip finishing and design for manufacturing and yield capabilities that you can apply throughout the various stages of the design flow to address process design issues encountered during chip manufacturing.\n For information about the chip finishing and design for manufacturing features, see the following topics: Inserting Tap Cells Performing Boundary Cell Insertion Finding and Fixing Antenna Violations Inserting Redundant Vias Optimizing Wire Length and Via Count Reducing Critical Areas Inserting Metal-Insulator-Metal Capacitors Inserting Filler Cells Inserting Metal Fill"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Annotating the Switching Activity"}, {"role": "assistant", "content": "When performing low-power placement and dynamic-power optimization, you obtain better power savings if you annotate switching activity on the design.\n You can annotate the switching activity in the following ways: Read a switching activity file (SAIF) by using the read_saif command.\n The switching activity is scenario specific.\n So, when you use this command, ensure that the current scenario is enabled for dynamic power optimization.\n Set the switching activity by using the set_switching_activity command.\n When you use this command, you can set the switching activity for a specific mode, corner, or scenario by using the -mode -corner, or -scenario options.\n When doing so, ensure that the scenarios you specify or the scenarios corresponding to the modes and corners you specify are enabled for dynamic power optimization.\n 185 Setting Up for Power-Related Features Feedback If you do not specify the switching activity, the tool applies the default toggle rate to the primary inputs and black box outputs and then propagates it throughout the design.\n To report the switching activity of a block, use the report_activity command.\n To remove switching activity of specific nets, pins, ports, or the entire block, use the reset_switching_activity command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running the signoff_fix_isolated_via Command"}, {"role": "assistant", "content": "You can use the signoff_fix_isolated_via command either to check for isolated vias only, or to check for and fix the isolated vias."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Attributes"}, {"role": "assistant", "content": "When rail analysis or missing via checking is complete, use the get_attribute attribute to query the results stored in the RedHawk working directory.\n You can query the attributes shown in Table 71, which are specific to the rail analysis results.\n Table 71 Rail Result Object Attributes Object Attributes Cell static_power 946 Querying Attributes Feedback Table 71 Rail Result Object Attributes (Continued) Object Attributes Pin static_current peak_current static_power switching_power leakage_power internal_power min_path_resistance voltage_drop average_effective_voltage_drop_in_tw max_effective_voltage_drop (=effective_voltage_drop) max_effective_voltage_drop_in_tw min_effective_voltage_drop_in_tw effective_resistance The following example retrieves the effective_voltage_drop attribute for the cellA/VDD pin.\n fc_shell> get_attribute [get_pins cellA/VDD] effective_voltage_drop -0.02812498807907104 The following example retrieves the static_power attribute for the cellA cell.\n fc_shell> get_attribute [get_cells cellA] static_power 2.014179968645724e-05 947 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating ETMs and ETM Cell Libraries"}, {"role": "assistant", "content": "To create ETMs and ETM cell libraries in the Fusion Compiler tool, see the Creating ETMs and ETM Cell Libraries in the Fusion Compiler Tool topic.\n To create ETMs and ETM cell libraries in the PrimeTime and the Library Manager tools respectively, see the following topics: Creating ETMs in the PrimeTime Tool Creating ETM Cell Libraries in the Library Manager Tool 855 Creating ETMs and ETM Cell Libraries Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers at a Specified Interval"}, {"role": "assistant", "content": "To add buffers to one or more nets at a specified interval, specify A list of one or more library cells to select from by using the -lib_cell option The distance between the driver of the net and the first buffer by using the -first_distance option The distance between the load pin of the net and the last buffer by using the -last_distance option You must use the -last_distance option with the -repeater_distance option or the -repeater_distance_length_ratio option.\n You can also use the -last_distance option with the -first_distance option.\n However, you cannot use it with the following options: -location -user_specified_buffers -user_specified_bus_buffers Note: When you use the -last_distance option, the value of the eco.add_buffer_on_route.min_distance_buffer_to_load application option is ignored.\n The interval between the buffers by using the -repeater_distance option Optionally, you can scale the distance between the buffers by Specifying a different scaling factor for each layer using the -scaled_by_layer option Using the ratio between the default width for the layer and the actual route width as the scaling factor by specifying the -scaled_by_width option The following example adds the BUF1 library cell on the nets n2 and n5 at an interval of 150 microns.\n The distance between the driver and the first repeater cell is 100 microns.\n fc_shell> add_buffer_on_route {n2 n5} -lib_cell BUF1 \\ -first_distance 100 -repeater_distance 150 966 Adding Buffers on Routed Nets Feedback The following example adds the BUF2 library cell on the net n1 at an interval of 100 microns.\n The distance between the driver and the first repeater cell is 50 microns and the last distance is 20 microns.\n fc_shell> add_buffer_on_route -repeater_distance 100 \\ -first_distance 50 -last_distance 20 net1 -lib_cell BUF2 By default, the tool uses eco_cell and eco_net as the name prefix of all new cells and nets.\n To specify a name prefix for the new cells and nets, use the -cell_prefix and -net_prefix options, respectively."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Partitioning and Planning the Full Chip Design"}, {"role": "assistant", "content": "The hierarchical synthesis flow using abstracts includes the following two cases: Floorplans of subblock and top-level design are not available Floorplans of subblock and top-level design are available 818 Performing Hierarchical Synthesis Using Abstracts Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Clock Gating Constraints"}, {"role": "assistant", "content": "By default, the tool identifies preexisting clock-gating cells during the execution of the analyze and elaborate commands.\n During compile, the tool inserts one more level of clock-gating cells at the leaf level and implements clock-gating logic using the default 135 Specifying Clock Gating Constraints Feedback clock-gating settings if you do not specify any clock-gating constraints.\n You cannot disable clock gating.\n Before you set up clock-gating constraints, load your design and libraries in memory and then use the following commands to set up the constraints: The set_clock_gate_style command To select the type of integrated clock-gating cell, specify the following options: Option Description -test_point Specifies the test control position with respect the to integrated clock-gating cell.\n The valid values are none before, and after -observation_output Specifies the observation output pin.\n -target Specifies the target sequential elements to be clock-gated.\n The valid values are pos_edge_flip_flop and neg_edge_flip_flop -objects Specifies the objects to which the clock gate applies.\n The set_clock_gating_options command To define the netlist structure of the inserted clock-gating cells, specify the following options: Option Description minimum_bitwidth Specifies the minimum number of bits to gate together.\n The default is three.\n max_fanout Specifies the maximum number of cells gated by the same clock-gating cell.\n The default is infinite.\n The set_clock_gating_objects command To control clock gating for specified objects and override the default clock-gating behavior that is set during compile, specify the following options.\n An object can be a hierarchical cell, register, power domain, or module.\n Option Description -include Specifies a list of objects to gate as per the clock-gating style and clock-gating options.\n -exclude Specifies a list of objects to exclude from clock gating.\n 136 Specifying Physical Constraints for Placement and Legalization Feedback Option Description -clear Specifies to remove all clock-gating inclusion or exclusion for the specified list of objects.\n -reset Specifies to remove all criteria previously set by the set_clock_gating_objects command.\n The default During clock-gating optimization, the tool uses the following setup defaults: Setup Default Maximum fanout Infinite Minimum bit-width Three Clock-gating cell Latch-based cells for both positive-edge and negative-edge triggered flip-flops.\n If only one type of cell is available, the tool inserts inverters on both sides of the clock-gating cell.\n For more information, see Setting Up Clock Gating"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Calculating the Maximum Antenna Ratio"}, {"role": "assistant", "content": "calculated using surface area in single-layer mode (antenna mode 1), the diode ratio vector for the M1 layer is {0 0 1 0} (the default diode ratio vector), the layerMaxRatio value for the M1 layer is 400, and the following diodes are connected to a single M1 net: diode A with a diode-protection value of 0.5, diode B with a diode-protection value of 1.0, and diode C with a diode-protection value of 1.5.\n In this example, the v4 value is not specified so a value of 0 is used.\n Use the following command to define the antenna rules for this example: fc_shell> define_antenna_rule -mode 1 -diode_mode diode_mode -metal_ratio 400 -cut_ratio 20 Because this example uses the global layerMaxRatio value and the default diode ratio vector, you do not need to define a layer-specific antenna rule.\n As shown in Table 37, for diode modes 5 and 6, the maximum antenna ratio is computed as metal_area / ( gate_area equi_gate_area where the equivalent gate area, equi_gate_area, is computed by using the diode ratio vector: ( diode_protection v1 ) * ( v2 v3 ).\n For diode mode 5, the equivalent gate area is computed using the maximum diode protection, which is 1.5, so the maximum antenna ratio for the net is metal_area / ( gate_area + ((1.5 + 0) * (1 + 0))) = metal_area /(gate_area + 1.5) For diode mode 6, the equivalent gate area is computed using the total diode protection, which is 0.5+1.0+1.5=3.0, so the maximum antenna ratio for the net is metal_area / (gate_area + ((3.0 + 0) * (1 + 0))) = metal_area /(gate_area + 3.0) 609 Finding and Fixing Antenna Violations Feedback Example for Diode Modes 7 and 8 Assume that the antenna area is calculated using surface area in single-layer mode (antenna mode 1), the diode ratio vector for the M1 layer is {0.7 0.0 150 800}, the layerMaxRatio value for the M1 layer is 400, and the following diodes are connected to a single M1 net: diode A with a diode-protection value of 0.5, diode B with a diode-protection value of 1.0, and diode C with a diode-protection value of 1.5.\n In this example, the v4 value is not specified so a value of 0 is used.\n Use the following commands to define the antenna rules for this example: fc_shell> define_antenna_rule -mode 1 -diode_mode diode_mode -metal_ratio 400 -cut_ratio 20 fc_shell> define_antenna_layer_rule -mode 1 -layer \"M1\" \\ -ratio 400 -diode_ratio {0.7 0.0 150 800} As shown in Table 37, for diode modes 7 and 8, the maximum antenna ratio is computed as metal_area equi_gate_area ) / gate_area where the equivalent gate area, equi_gate_area, is computed by using the diode ratio vector: ( diode_protection v1 ) * ( v2 v3 ).\n For diode mode 7, the equivalent metal area is computed using the maximum diode protection, which is 1.5, so the maximum antenna ratio for the net is metal_area - ((1.5 + 0) * (150 + 800))) / gate_area = ( metal_area - 1025) / gate_area For diode mode 8, the equivalent metal area is computed using the total diode protection, which is 0.5+1.0+1.5=3.0, so the maximum antenna ratio for the net is metal_area - ((3.0 + 0) * 150 + 800)) / gate_area = ( metal_area - 1250) / gate_area Example for Diode Mode 14 With Multiple Gate Oxide Thicknesses Assume that the antenna area is calculated using surface area in single-layer mode (antenna mode 1), the design contains cells with two different gate oxide thicknesses, the diode ratio vector for the first oxide thickness (gate class 0) for the M1 layer is {1 0 1e9 1e9 0 1 2 285 1 285}, the diode ratio vector for the second oxide thickness (gate class 1) for the M1 layer is {1 0 1e9 1e9 1 0 2 165 1 28}, and the layerMaxRatio value for the M1 layer is 285.\n For diode mode 14, the diode ratio vector contains 10 values for each gate class.\n Because the design uses only two gate oxide thicknesses, only the vectors for gate class 0 and gate class 1 are used.\n However, you must specify all 40 values when defining the antenna 610 Finding and Fixing Antenna Violations Feedback rule.\n For unused gate classes (gate class 2 and gate class 3 in this example), specify very large ratios to disable the checks.\n Use the following commands to define the antenna rules for this example: fc_shell> define_antenna_rule -mode 1 -diode_mode 14 \\ -metal_ratio 285 -cut_ratio 10 fc_shell> define_antenna_layer_rule -mode 1 -layer \"M1\" \\ -ratio 285 -diode_ratio {1 0 1e9 1e9 0 1 2 285 1 285 \\ 1 0 1e9 1e9 1 0 2 165 1 28 \\ 1 0 1e9 1e9 0 1 2 1e9 1 1e9 \\ 1 0 1e9 1e9 0 1 2 1e9 1 1e9 } The following table shows the vector usage: Formula 1 Formula 2 With Diode No Diode With Diode No Diode Gate sum switch Diode protect ion multipl ier Offset Ratio Gate area multipl ier Diode protect ion multipl ier Ratio Gate area multipl ier Ratio Gate Class 0 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 Gate Class 1 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 Gate Class 2 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 Gate Class 3 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 Here: V0: Defines which gate areas are used for the check for the first formula: 0: Gate area of all gates that belong to the current gate class 1: Total gate area regardless of gate class V1: Defines the diode protection multiplier for the connected to diode case for the first formula V2: Defines the offset value for the connected to diode case for the first formula 611 Finding and Fixing Antenna Violations Feedback V3: Defines the ratio requirement for the not connected to diode case for the first formula V4: Defines which gate areas are used for the check for the second formula: 0: Gate area of all gates that belong to the current gate class 1: Total gate area regardless of gate class V5: Defines the gate area multiplier for the connected to diode case for the second formula V6: Defines the diode protection multiplier for the connected to diode case for the second formula V7: Defines the ratio requirement for the connected to diode case for the second formula V8: Defines the gate area multiplier for the not connected to diode case for the second formula V9: Defines the antenna ratio requirement for the not connected to diode case for the second formula"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Concurrent Clock and Data Optimization"}, {"role": "assistant", "content": "By default, the tool performs concurrent clock and data optimization during the compile_fusion command.\n You can disable it by setting the compile.flow.enable_ccd application option to false.\n The default is true During concurrent clock and data optimization, The tool uses ideal clock tree, and it updates clock latencies and balance points for all active scenarios.\n The tool adjusts the register latencies within the delayed and advanced latency settings for the most critical sequential elements in the design.\n By default, the maximum delayed latency is 100 ps, and the maximum advanced latency is 300 ps.\n All path groups are considered for useful skew computation.\n All boundary timing paths are considered during concurrent clock and data optimization.\n Note: In an incremental compile, enabling concurrent clock and data optimization has no effect.\n For best results, you should also do the following: Enable the hold scenario even during compile to reduce hold violations that are caused by clock latency insertions during concurrent clock and data optimization.\n The tool considers the hold scenario only for concurrent clock and data optimization, but not for other optimization steps.\n Enable concurrent clock and data optimization for the clock_opt command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Prechecks for Hierarchical Synthesis Flows"}, {"role": "assistant", "content": "To check the readiness for the hierarchical synthesis flow, use the following commands: check_design -checks block_ready_for_top Run this command after block synthesis to check whether the synthesized block is ready for the top-level synthesis.\n check_design -checks hier_pre_compile Run this command before top-level synthesis to check whether the subblocks and top- level design are ready for the hierarchical flow."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Postroute Redundant Via Insertion"}, {"role": "assistant", "content": "To perform postroute redundant via insertion, use the add_redundant_vias command.\n This command can replace single-cut vias with multiple-cut via arrays, single-cut vias with other single-cut vias that have a different contact code, and multiple-cut via arrays 626 Inserting Redundant Vias Feedback with different multiple-cut via arrays.\n During redundant via insertion, the detail router also checks the design rules within the neighboring partition to minimize DRC violations.\n By default, the add_redundant_vias command inserts redundant vias on all nets.\n To insert redundant vias only on specific nets, use the -nets option to specify the nets.\n Using net-specific redundant via insertion allows you to further improve the optimized via rate without causing large-scale routing and timing changes.\n After the vias are checked and replaced, the detail router rechecks for DRC violations and corrects any violations.\n If the percentage of redundant vias is not high enough, you can increase the effort level by using the -effort option to get a better redundant via rate.\n Increasing the effort level to high can increase the redundant via rate by about 3 to 5 percent by shifting the vias to make room for additional vias.\n However, because high-effort redundant via insertion moves the vias more, it can result in a less lithography-friendly pattern at the 45-nm technology node and below.\n In this case, you should use concurrent soft-rule-based redundant via insertion to improve the redundant via rate.\n You can also try to increase the postroute redundant via rate by setting the route.detail.optimize_wire_via_effort_level application option to high, which reduces the number of single vias and makes more room for redundant vias by reducing wire length.\n After you perform the initial postroute redundant via insertion, set the route.common.post_detail_route_redundant_via_insertion application option to enable automatic insertion of redundant vias after subsequent detail routing or ECO routing.\n This helps to maintain the redundant via rate in your block."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Objects to a Group"}, {"role": "assistant", "content": "After you create a relative placement group by using the create_rp_group command, you can add the following types of objects to it by using the add_to_rp_group command: Leaf cells, as described in Adding Leaf Cells Leaf cells, as described in Adding Hard Macro Cells Relative placement groups, as described in Adding Relative Placement Groups Blockages, as described in Adding Blockages When you add an object to a relative placement group, The relative placement group to which you are adding the object must exist.\n The object must be added to an empty location in the relative placement group.\n Only one object can be added in one location of relative placement group.\n To remove objects from a relative placement group, use the remove_from_rp_group command.\n You can remove leaf cells ( -cells ), relative placement groups ( -rp_group ), and blockages ( -blockage ).\n When you remove objects from a group, the space previously occupied by the removed objects is left unoccupied."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Routing Around the Block Boundary"}, {"role": "assistant", "content": "To control routing around the block boundary, use the derive_perimeter_constraint_objects command to place rectangular metal shapes, 481 Routing Constraints Feedback routing guides, and routing blockages along the boundary edges, as described in the following topics: Inserting Metal Shapes in the Preferred Direction Inserting Routing Guides Along the Nonpreferred-Direction Edges Inserting Routing Blockages Along the Boundary Edges Removing Perimeter Constraint Objects If you change the block boundary after creating the constraint objects, you must regenerate the objects.\n You cannot manually modify the constraint objects.\n To check the perimeter constraint objects, use the -check_only option with the derive_perimeter_constraint_objects command.\n By default, the checking results are stored in an error data file named block_name.err.\n To specify a different name for the error data file, use the -error_view option See Also Removing Perimeter Constraint Objects"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Routing Guides During Boundary Cell Insertion"}, {"role": "assistant", "content": "If your technology file defines metal cut allowed and forbidden preferred grid extension rules, you can create routing guides for these rules during boundary cell insertion by using the -add_metal_cut_allowed option with the set_boundary_cell_rules command.\n When you use this option, the compile_boundary_cells command creates the following routing guides: Metal cut allowed routing guides, which cover the area taken up by all the placeable site rows reduced by the vertical shrink factor, which is 50 percent of the smallest site row height Forbidden preferred grid extension routing guides, which cover the remaining area up to the block boundary Note: This feature is supported only by the compile_boundary_cells command; it is not supported by the compile_targeted_boundary_cells command.\n 597 Performing Boundary Cell Insertion Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Validating the Taps and Finding Invalid Taps"}, {"role": "assistant", "content": "When creating taps, by default the create_taps command verifies that the created taps are inserted in valid locations.\n The tool issues a warning message if the tap does not touch any layout shape.\n To place taps outside a shape without issuing a warning message, disable the checking by using the -nocheck option.\n The following command creates a tap with the -nocheck option enabled.\n No warning message is issued.\n fc_shell> create_taps -supply_net VDD -layer 3 \\ -point {100.0 200.0} -nocheck"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Ungrouping or Preserving Hierarchies During Optimization"}, {"role": "assistant", "content": "Ungrouping merges subdesigns of a given level of the hierarchy into the parent cell or design.\n It removes hierarchical boundaries and allows Fusion Compiler to improve timing by reducing the levels of logic and to improve area by sharing logic.\n By default, the compile_fusion command automatically ungroups logical hierarchies that do not have a dont_touch attribute setting.\n During optimization, the compile_fusion command performs the following types of automatic grouping: Area-based automatic ungrouping Before initial mapping, the command estimates the area for unmapped hierarchies and removes small subdesigns.\n Because the command performs automatic ungrouping at an early stage, it has a better optimization context.\n Additionally, datapath extraction is enabled across ungrouped hierarchies.\n These factors improve the area and timing quality of results.\n Delay-based automatic ungrouping The command ungroups hierarchies along the critical path and is used essentially for timing optimization.\n For ungrouping of DesignWare and datapath cells, see Datapath Implementation You can disable automatic ungrouping by setting the compile.flow.autoungroup application option to false.\n The default is true.\n However, doing do can affect the QoR.\n Therefore, it is better to limit ungrouping, rather than disabling it, using the following methods: Controlling the Automatic Ungrouping of Specific Types of Hierarchies To control the automatic ungrouping of specific types of hierarchies, use the set_autoungroup_options command.\n The following example specifies that parent hierarchies of blocks with UPF and SDC constraints should preserved and that automatic ungrouping of other hierarchies should begin from the third level: fc_shell> set_autoungroup_options -keep_parent_hierarchies UPF fc_shell> set_autoungroup_options -keep_parent_hierarchies SDC fc_shell> set_autoungroup_options -start_level 3 218 Controlling Mapping and Optimization Feedback The set_autoungroup_options command is cumulative and the settings are saved in the design library.\n To report information about the hierarchies that are automatically ungrouped or preserved, use the report_ungroup command.\n Controlling the Automatic Ungrouping of Specific Objects To force or prevent specific cell instances or modules being ungrouped during optimization, use the set_ungroup command with the true or false setting.\n The set_ungroup command sets the ungroup attribute to the appropriate value for the specified objects.\n If you set the attribute on a module, all cells that reference the module are affected.\n Note: The set_ungroup command has a higher priority than the set_autoungroup_options command.\n The following example script sets specific modules to be ungrouped and specific cell instances to be preserved during optimization: # Set modules A and B to be ungrouped set_ungroup [get_modules {A B}] true # Set cells u_C and u_D to be preserved set_ungroup [get_cells {u_C u_D}] false # Query the ungroup attribute get_attribute -name ungroup -objects [get_modules {A B}] get_attribute -name ungroup -objects [get_cells {u_C u_D}] compile_fusion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Introduction to Multisource Clock Trees Structures"}, {"role": "assistant", "content": "A multisource clock tree is a custom clock structure that has more tolerance to on-chip variation and has better performance across corners than traditional clock tree structures.\n These custom clock trees consist of A global clock structure, which includes The clock root A global clock tree, which is usually an H-tree structure Clock mesh drivers A clock mesh Local subtrees that can be driven By a predefined set of drivers, called tap drivers, that are connected to the clock mesh, as shown in Figure 83 Because the subtrees are built using regular clock tree synthesis commands such as the synthesize_clock_trees or clock_opt command, such a structure is called a regular multisource clock tree.\n Directly from multiple points of the clock mesh, as shown in Figure 84 Because the subtrees are built preserving the user-defined structure and optimized by merging and splitting the clock cells, such a structure is called a structural multisource clock tree.\n 397 Implementing Multisource Clock Trees Feedback Figure 83 Regular Multisource Clock Tree Clock root Global clock tree Clock mesh Mesh drivers Clock gates Tap drivers and sinks Global clock structure Local subtrees Figure 84 Structural Multisource Clock Tree Clock root Global clock tree Clock mesh Mesh drivers Clock gates and sinks Global clock structure Local subtrees 398 Implementing Multisource Clock Trees Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Implementing Power Aware Flexible H-Tree"}, {"role": "assistant", "content": "The tool derives tap driver configurations by adding power awareness in the flexible H-Tree synthesis flow, which is optimal in terms of total clock power and overall clock latency.\n 404 Implementing Multisource Clock Trees Feedback This requires at least one of the dynamic power scenarios to be defined and active during H-tree Synthesis.\n In case of multiple scenarios, the worst active scenario is considered for power costing.\n The initial tap configurations are generated based on floorplan shape, size, sink distribution, placement, routing constraints, and or each tap configuration.\n This helps to estimate the latency and power for each subtree, and then tabulates and compares the results of different tap configurations to determine the best solution for power aware flexible H-Tree synthesis.\n To enable power aware flexible H-tree synthesis, set the cts.multisource.power_aware_flexible_htree_synthesis application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tool"}, {"role": "assistant", "content": "Rather than creating an ETM for each mode and corner combination using the extract_model command in the PrimeTime tool and then using the Library Manager tool to combine the ETMs with the corresponding physical information to create a cell library, you can perform both steps together by using the extract_model command directly in the Fusion Compiler tool.\n The following Fusion Compiler script creates an ETM for every mode and corner of the design and then combines them with the corresponding physical information and creates the corresponding cell library: # Open the design, create a frame view, and set the PrimeTime options open block.nlib:block.design create_frame <options> ;# extract_model needs Frame for library preparation set_pt_options -pt_exec_path <> -work_dir ETM_work_dir \\ -post_link_script <tcl script with extract_model* variables> \\ # To use StarRC for Parasitic extraction set_app_options -name extract.starrc_mode -value true set_starrc_options -config <starrc_config_file> # Create the ETM and generate the ETM cell library extract_model By default, the Fusion Compiler tool writes out the generated ETM library into [pwd]/ETM_Lib_work_dir/block_name/label_name/ for labelled blocks [pwd]/ETM_Lib_work_dir/block_name/ for non-labelled blocks"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mapping of Scan Cells"}, {"role": "assistant", "content": "During test-ready compile, the tool replaces regular flip-flops with flip-flops that contain logic for testability.\n The following figure shows an example of how a D flip-flop is replaced with a scan register during test-ready compile.\n This type of architecture, a multiplexed flip- flop, incorporates a 2-input MUX at the input of the D flip-flop.\n The select line of the MUX enables two modes\u2014functional mode (normal data input) and test mode (scanned data input).\n In this example, the scan-in pin is si, the scan-enable pin is se, and the scan-out pin, so, is shared with the functional output pin, Q.\n 232 Controlling Mapping and Optimization Feedback si Clk se Q/so When you run the compile_fusion command, The tool maps all sequential cells directly to scan registers in your library The scan pins, such as scan enable and scan out, are unconnected The scan output pin of a scan register is used for scan connections Use the seqmap.bind_scan_pins application option to hold the scan enable pin inactive If the library contains no scan registers, the tool uses nonscan cells for mapping and issues a warning.\n Set the dont_use attribute on all scan registers in the library to map to nonscan cells"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Power Intent Concepts"}, {"role": "assistant", "content": "The UPF language establishes a set of commands to specify the low-power design intent for electronic systems.\n Using UPF commands, you can specify the supply network, switches, isolation, retention, and other aspects relevant to power management of a chip design.\n The same set of low-power design specification commands is to be used throughout the design, analysis, verification, and implementation flow.\n Synopsys tools are designed to follow the official IEEE 1801 UPF standard.\n The UPF language provides a way to specify the power requirements of a design, but without specifying explicitly how those requirements are implemented.\n The language specifies how to create a power supply network for each design element, the behavior of supply nets with respect to each other, and how the logic functionality is extended to support dynamic power switching to design elements.\n It does not contain any placement or routing information.\n In the UPF language, a power domain is a group of elements in the design that share a common set of power supply needs.\n By default, all logic elements in a power domain use the same primary supply and primary ground.\n Other power supplies can be defined for a power domain as well.\n A power domain is typically implemented as a contiguous voltage area in the physical chip layout, although this is not a requirement of the language.\n Each power domain has a scope and an extent.\n The scope is the level of logic hierarchy designated as the root of the domain.\n The extent is the set of logic elements that belong to the power domain and share the same power supply needs.\n The scope is the hierarchical level at which the domain is defined and is an ancestor of the elements belonging to the power domain, whereas the extent is the actual set of elements belonging to the power domain.\n Each scope in the design has supply nets and supply ports at the defined hierarchical level of the scope.\n A supply net is a conductor that carries a supply voltage or ground throughout a given power domain.\n A supply net that spans more than one power domain is said to be \"reused\" in multiple domains.\n A supply port is a power supply connection point between two adjacent levels of the design hierarchy, between the parent and child blocks of the hierarchy.\n A supply net that crosses from one level of the design hierarchy to the next passes through a supply port.\n supply set is an abstract collection of supply nets, consisting of two supply functions, power and ground.\n A supply set is domain-independent, which means that the power and ground in the supply set are available to be used by any power domain defined within the scope where the supply set was created.\n However, each power domain can be restricted to limit its usage of supply sets within that power domain.\n You can use supply sets to define power intent at the RTL level, so you can synthesize a design even before you know the names of the actual supply nets.\n A supply set is an abstraction of the supply nets and supply ports needed to power a design.\n Before such a 38 Fusion Compiler Concepts Feedback design can physically implemented (placed and routed), its supply sets must be refined, or associated with actual supply nets.\n supply set handle is an abstract supply set created for a power domain.\n By default, a power domain has supply set handles for the domain's primary supply set, a default isolation supply set, and a default retention supply set.\n These supply set handles let you synthesize a design even before you create any supply sets, supply nets, and supply ports for the power domain.\n Before such a design can be physically implemented, its supply set handles must be refined, or associated with actual supply sets; and those supply sets must be refined so that they are associated with actual supply nets.\n power switch (or simply switch ) is a device that turns on and turns off power for a supply net.\n A switch has an input supply net, an output supply net that can be switched on or off, and at least one input signal to control switching.\n The switch can optionally have multiple input control signals and one or more output acknowledge signals.\n A power state table lists the allowed combinations of voltage values and states of the power switches for all power domains in the design.\n level shifter must be present where a logic signal leaves one power domain and enters another at a substantially different supply voltage.\n The level shifter converts a signal from the voltage swing of the first domain to that of the second domain.\n An isolation cell must be present where a logic signal leaves a switchable power domain and enters a different power domain.\n The level shifter generates a known logic value during shutdown of the domain.\n If the voltage levels of the two domains are substantially different, the interface cell must be able to perform both level shifting (when the domain is powered up) and isolation (when the domain is powered down).\n A cell that can perform both functions is called an enable level shifter In a power domain that has power switching, any registers that must retain data during shutdown must be implemented as retention registers.\n A retention register has a separate, always-on supply net, sometimes called the backup supply, which keeps the data stable in the retention register while the primary supply of the domain is shut down."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Signoff Metal Fill Result Files"}, {"role": "assistant", "content": "The signoff_create_metal_fill command stores the output files in the run directory specified by the signoff.create_metal_fill.run_dir application option (or the signoff_fill_run directory if you do not use this option).\n For each fill run, the command creates a subdirectory named icv_run_# that contains the files generated for that run.\n When you perform metal fill insertion, the tool writes the following files to the output directory: block.LAYOUT_ERRORS, which contains details about the detected errors block.RESULTS, which contains a summary of the run results signoff_create_metal_fill.log, which contains a summary of the run environment icv_config_out, which contains the paths to the top-level block and the cell libraries layer.map, which contains the generated layer mapping file metal_fill_params.rh, which contains the metal fill parameters and options that you specified metal_fill_compress_params.rh, which contains the storage commands and indicates whether the compression mode was flat (NONE) or hierarchical (AUTO)./run_details directory, which contains all the data generated by the IC Validator tool for the metal fill insertion run"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking PG Electromigration Violations"}, {"role": "assistant", "content": "When PG electromigration analysis is complete, you can check the generated error files in the error browser or write the generated errors to an output file.\n The tool does not write the generated errors to the working directory, meaning the error data is deleted if you exit the tool without saving the block.\n Ensure that you save the block to keep the generated error data if you want to examine the errors in another session.\n 905 Performing PG Electromigration Analysis Feedback You can examine the generated error files in the error browser or write the generated errors to an output ASCII file.\n To examine the generated errors in the error browser, 1.\n Choose View > Error Browser from the GUI.\n 2.\n In the Open Error Data dialog box, select the errors to examine and click Open Selected.\n 3.\n Check the details of the errors in the Error Browser (see Figure 205 ).\n 906 Performing PG Electromigration Analysis Feedback Figure 205 Opening Generated Errors in the Error Browser To write errors to an ASCII file, use the following script: set fileName \"errors.txt\" set fd [open $fileName w] set dm [open_drc_error_data rail_pg_em.VDD.err] set all_errs [get_drc_errors -error_data $dm *] foreach_in_collection err $all_errs { set info [ get_attribute $err error_info]; puts $fd $info } close $fd 907 Performing Minimum Path Resistance Analysis Feedback Here is an example of the output error file: M1 (414.000,546.584 414.344,546.584) em ratio 23585.9% width 0.06 blech length 0.000 um current 0.0024963 M1 (414.344,546.584 416.168,546.584) em ratio 23401.3% width 0.06 blech length 0.000 um current 0.0024768 M1 (416.168,546.584 416.776,546.584) em ratio 23241.7% width 0.06 blech length 0.000 um current 0.0024599 M1 (416.776,546.584 417.992,546.584) em ratio 23082.2% width 0.06 blech length 0.000 um current 0.0024430 M1 (417.992,546.584 419.208,546.584) em ratio 22897.7% width 0.06 blech length 0.000 um current 0.0024235 M1 (419.208,546.584 419.512,546.584) em ratio 22731.1% width 0.06 blech length 0.000 um current 0.0024059 M1 (419.512,546.584 421.184,546.584) em ratio 22564.4% width 0.06 blech length 0.000 um current 0.0023882 M1 (421.184,546.584 421.488,546.584) em ratio 22349% width 0.06 blech length 0.000 um current 0.0023654 M1 (421.488,546.584 423.160,546.584) em ratio 22133.5% width 0.06 blech length 0.000 um current 0.0023426 M1 (423.160,546.584 423.616,546.584) em ratio 21967.2% width 0.06 blech length 0.000 um current 0.0023250"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Configuring an ICV Heat Map"}, {"role": "assistant", "content": "You can select or unselect violation types from the heat map, as shown in figure Figure 136 and Figure 137 Figure 136 Violation Type 676 Performing Signoff Design Rule Checking Feedback Figure 137 Violation Type in ICV Heat Map To control the opacity of the heat map squares, adjust the Alpha percentage value.\n Set this percentage to 100% to create a completely filled block.\n The lower you set the percentage, the more transparent the block becomes, as shown in Figure 138 and Figure 139 Figure 138 Completely Filled Block 677 Performing Signoff Design Rule Checking Feedback Figure 139 You can adjust the range of colored squares by modifying the Bins value, as shown in Figure 140 and Figure 141 Figure 140 Bins Value Set to 5 678 Performing Signoff Design Rule Checking Feedback Figure 141 Bins Value Set to 8 You can select or unselect layers from the heat map, as shown in Figure 142 and Figure 143 Figure 142 Selecting Layers 679 Performing Signoff Design Rule Checking Feedback Figure 143 Selecting Layers in the ICV Heatmap You can modify the squares of the heat map by right-clicking the colored squares and selecting Set Style.\n See Figure 144 and Figure 145 680 Performing Signoff Design Rule Checking Feedback Figure 144 Set Style Figure 145 Select Style 681 Performing Signoff Design Rule Checking Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Hierarchical Synthesis Using ETMs"}, {"role": "assistant", "content": "During the hierarchical flow, block designs are represented as a macro with a frame view, and the implemented blocks are modeled as extracted timing models (ETMs) for the top- level implementation of the design.\n An extracted timing model (ETM) is a Liberty model representation of a design that is generated by the extract_model command in the PrimeTime tool.\n The command captures the timing and power information of the design using relevant Liberty attributes, as shown in the following example.\n library(\"block1\") {...\n comment : \"PrimeTime Extracted Model.\" ; voltage_map(\"nom_voltage\", 1.08); voltage_map(\"VDD\", 1.08);...\n cell( block1 ) { timing_model_type : \"extracted\";...\n pg_pin(\"VDD\") { voltage_name : \"VDD\"; pg_type : primary_power;...\n Topics in this section Running the Hierarchical Synthesis Feasibility Analysis Flow Using ETMs Running the Hierarchical Synthesis Flow Using ETMs Example Script of Hierarchical Synthesis Using ETMs See Also SolvNet article 2284429, \"Top-level Closure Flow With Extracted Timing Models (ETMs)\" Creating ETMs and ETM Cell Libraries Linking to ETMs at the Top Level 824 Performing Hierarchical Synthesis Using ETMs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Tap Meshes"}, {"role": "assistant", "content": "tap mesh is a two-dimensional array of tap cells with a tap cell in each mesh window.\n A tap mesh is typically inserted outside of a place and route block, but you can insert one in any area that is either completely inside or completely outside the core area.\n To insert a tap mesh, use the create_tap_meshes command.\n You must specify the following information: The tap cell used in the tap mesh (the -lib_cell option) By default, the command inserts the tap cells with R0 orientation.\n To place the cells with a different orientation, use the -orientation option.\n By default, the tool uses the following naming convention for inserted tap cells: headerfooter__ library_cell_name _R _C number To identify the tap cells inserted in a specific run, use the -prefix option to specify a prefix string.\n When you use this option, the tool uses the following naming convention: prefix __ library_cell_name _R _C number The tap insertion region (the -bbox option) You specify the tap insertion region by specifying the lower-left and upper-right corners of its bounding box: -bbox {{ llx lly } { urx ury }} The mesh window (the -mesh_window option) You specify the size of the mesh window by specifying an integer value for the pitch in the x- and y-directions.\n -mesh_window { x_pitch y_pitch The mesh window is aligned with the lower-left corner of the tap insertion region.\n When inserting the tap mesh, the command does not honor the standard cell rows or sites.\n It places a tap cell in the lower-left corner of each mesh window.\n If that location is blocked, the command uses the closest available location, which is measured as the Manhattan distance to the lower-left corner of the mesh window.\n If there is no available location, the command issues a warning and does not place a tap cell in that mesh window.\n After insertion, the command fixes the placement of the inserted tap cells.\n 591 Inserting Tap Cells Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing the Placeability of a Relative Placement Group"}, {"role": "assistant", "content": "Before you run placement and optimization, you can check if a specific relative placement group can be placed by using the check_rp_constraints -analyze_placement command.\n To limit the analysis to a specific region or a specific number of random sites of the core area, use the -region or -trials option, respectively.\n To ignore physical design constraints, advanced design rules, or relative placement constraints during placement analysis, use the -no_pdc -no_adv, or -no_rp_constraints option, respectively.\n To report only the relative placement groups that do not meet a specific threshold, use the -threshold option.\n The tool reports a group only if the percentage of sites the group can be placed, relative to the total number of sites analyzed, is less than the specified threshold."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using a Hybrid Routing Flow"}, {"role": "assistant", "content": "In the hybrid flow, Custom Router is used to perform trunk routing without completing some pin connections, and then Zroute is used to complete the pin connections.\n This flow enables the use of Custom Router for prerouting while avoiding or reducing inconsistency and DRC violations associated with differences in the pin connection behavior between the two tools.\n To enable the hybrid routing flow, set the custom.route.skip_connect_pin_type application option to one or more of the following values, depending on your routing requirements.\n By default, this application option is set to none, which disables the hybrid routing flow.\n auto Custom Router identifies the routability of the pins in the block, and then completes the pin connections for the pins that can be connected.\n all Custom Router does not complete the pin connections for all pins in the block.\n stdcell Custom Router completes the pin connections for all pins in the block, except for standard cell pins.\n io Custom Router completes the pin connections for all pins in the block, except for I/O cell pins.\n macro Custom Router completes the pin connections for all pins in the block, except for macro pins.\n By default, when the hybrid flow is enabled, Custom Router determines how much space to leave between a route and an unconnected pin.\n To specify the maximum distance, 775 Using a DDR Routing Flow Feedback use the custom.route.distance_to_net_pin application option.\n Set the value in the following format: net_name distance The following script uses Custom Router for trunk routing and Zroute for all pin connections.\n set_app_options -name custom.route.skip_connect_pin_type -value all route_custom -nets {net1 net2} route_eco -nets {net1 net2} remove_redundant_shapes -nets {net1 net2} route_detail -incremental true The following script uses Custom Router for trunk routing and pin connections except standard cell pins, and then uses Zroute for standard cell pin connections.\n set_routing_rule -min_routing_layer m3 \\ -max_routing_layer m9 \\ -min_layer_mode allow_pin_connection \\ -max_layer_mode hard {net1 net2} set_app_options -name custom.route.skip_connect_pin_type \\ -value stdcell set_app_options -name custom.route.distance_to_net_pin \\ -value {{{net1 5.0} {net2 3.0}}} route_custom -nets {net1 net2} route_eco -nets {net1 net2} remove_redundant_shapes -nets {net1 net2} route_detail -incremental true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining an Outer Keepout Margin"}, {"role": "assistant", "content": "You can define an outer keepout margin on a hard macro, a hierarchical cell, or a leaf cell.\n When you define an outer keepout margin, you can either specify the keepout distance explicitly or, for hard macros, you can have the tool derive the keepout distance based on the macro pin count.\n To explicitly specify an outer keepout margin, use the -outer option to specify the margin distance for each side.\n You specify the left, bottom, right, and top margins using the following format: lx by rx ty.\n A value of 0 results in no keepout margin for that side.\n For example, to create a hard outer keepout margin with a margin of 10 on each side for a macro named my_macro, use the following command: fc_shell> create_keepout_margin -outer {10 10 10 10} my_macro To have the tool derive the outer keepout distance for a hard macro based on its pin count, use the -tracks_per_macro_pin option to specify the track-to-pin ratio.\n When you use this option, the tool calculates the keepout margin from the track width, the number of macro pins, and the specified track-to-pin ratio, which is typically set to a value near 0.5.\n A larger value results in larger keepout margins.\n The derived keepout margin is always hard; the -type setting is ignored.\n The derived margins are subject the minimum and maximum 138 Specifying Physical Constraints for Placement and Legalization Feedback values specified by the -min_padding_per_macro and -max_padding_per_macro options.\n For example, to have the tool derive the outer keepout margin for a macro named my_macro by using a track-to-pin ratio of 0.6 with a minimum keepout distance of 0.1 and a maximum keepout distance of 0.2, use the following command: fc_shell> create_keepout_margin -tracks_per_macro_pin 0.6 \\ -min_padding_per_macro 0.1 -max_padding_per_macro 0.2 my_macro"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Relative Placement Groups"}, {"role": "assistant", "content": "To query relative placement groups that contain specific objects or attribute values, use the get_rp_groups command.\n For example, the following command returns a collection consisting of all the relative placement groups: fc_shell> get_rp_groups {RP_TA RP_TCO RP_HO_1 RP_HO_2 RP_HO_3 RP_HO_4 RP_THO} The following command returns only the top-level relative placement groups: fc_shell> get_rp_groups -top {RP_TA RP_TCO RP_THO} The following command returns the relative placement group that contains the leaf cell named U129: fc_shell> get_rp_groups -of_objects U129 {RP_HO_4}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a Customized Via Mapping Table"}, {"role": "assistant", "content": "To define a customized via mapping, use the add_via_mapping command.\n At a minimum, you must specify the source via and its replacement vias by using the -from and -to options.\n The vias listed in these options must be either vias defined in the technology file or design-specific vias created by the create_via_def command.\n The vias listed in the -from option must be simple vias or via arrays.\n The vias listed in the -to option can be simple vias, simple via arrays, or custom vias.\n For information about creating design- specific vias, see Defining Vias Use the following options to refine the via mapping: -weight By default, all mappings have the same priority, and Zroute selects the redundant vias to use based on routability.\n To set the priority for a mapping, use the -weight option to assign an integer weight value between 1 and 10 to the mapping.\n If you do not assign a weight, the tool assigns a weight of 1.\n During redundant via insertion, Zroute uses the higher weighted redundant vias first.\n -transform By default, Zroute can rotate or flip the via arrays during redundant via insertion (the -transform all option).\n To allow only rotation of the via arrays during redundant via insertion, use the -transform rotate option.\n To allow only flipping of the via arrays during redundant via insertion, use the -transform flip option.\n To allow only the specified orientation of the via array during redundant via insertion, use the -transform none option.\n The tool saves the mappings defined by the add_via_mapping command in a via mapping table in the design library.\n By default, if you try to add a via mapping that already exists in the table, the command fails.\n To overwrite an existing mapping definition, use the -force option.\n Example 28 shows an example of using the add_via_mapping command to define a customized via mapping table.\n Example 28 Customized Via Mapping Table fc_shell> add_via_mapping \\ -from {VIA12 1x1} -to {VIA12T 2x1} -weight 5 fc_shell> add_via_mapping \\ -from {VIA12 1x1} -to {VIA12 2x1} -weight 1 625 Inserting Redundant Vias Feedback To see the customized via mappings associated with a block, use the report_via_mapping command.\n By default, this command shows all user-defined via mappings.\n To show the via mappings for specific source vias, use the -from option.\n To show the via mappings for specific replacement vias, use the -to option.\n To remove mappings from the via mapping table, use the remove_via_mappings command.\n To remove all via mappings, use the -all option.\n To remove the via mappings for specific source vias, use the -from option.\n To remove the via mappings for specific replacement vias, use the -to option.\n Using a Subset of the Via Mapping Table for Redundant Via Insertion To use a subset of the via mapping table for redundant via insertion, specify which weight groups from the via mapping table to use by setting one or both of the route.common.redundant_via_include_weight_group_by_layer_name and route.common.redundant_via_exclude_weight_group_by_layer_name application options.\n If you set only the route.common.redundant_via_include_weight_group_by_layer_name application option, Zroute selects redundant vias only from the specified weight groups.\n If you do not specify an entry for a layer, redundant via insertion is not performed on that layer.\n If you set only the route.common.redundant_via_exclude_weight_group_by_layer_name application option, Zroute selects redundant vias from all weight groups in the original via mapping table, except the specified weight groups.\n If you do not specify an entry for a layer, all weight groups are used for that layer.\n If you set both application options, Zroute selects redundant vias from the weight groups specified in the route.common.redundant_via_include_weight_group_by_layer_name application, excluding the weight groups specified in the route.common.redundant_via_exclude_weight_group_by_layer_name application option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing to Clock Straps"}, {"role": "assistant", "content": "After you create clock straps for a clock net by using the create_clock_straps command, you can route the drivers and loads of the clock net to the clock straps by using the route_clock_straps command and specify the clock net name by using the -nets option.\n The tool connects the drivers and the loads only to clock straps with the shape_use attribute setting of stripe.\n It does not connect to clock straps with the shape_use attribute setting of user_route 419 Implementing Multisource Clock Trees Feedback To specify a topology for connecting the clock drivers and sinks to the clock straps, use the -topology option as follows: To create a fishbone routing topology, the default topology, use the -topology fishbone option.\n In a fishbone topology, each driver pin is individually connected to the nearest stripe.\n To minimize wire length, multiple load pins are connected using comb routing to a single finger, which is connected to the stripe, as shown in Figure 91 Figure 91 Fishbone Topology Fanout Clock mesh strap ( shape_use user_route Clock mesh strap ( shape_use stripe Comb route Driver pins Load pins Finger route If you are using a fishbone topology, you can specify A maximum fanout for the loads of a finger, as shown in Figure 92, by using -fishbone_fanout option.\n Figure 92 Fanout of a Finger of the Fishbone Topology Finger Fanout A maximum span between any two loads connected to a finger, as shown in Figure 93, by using -fishbone_span option.\n 420 Implementing Multisource Clock Trees Feedback The span is measured orthogonal to the direction of the finger.\n Figure 93 Span and Subspan of the Fishbone Topology Subspan Span Subfinger Finger A maximum subspan between any two loads connected to a subfinger, as shown in Figure 93, by using -fishbone_sub_span option.\n The subspan is measured orthogonal to the direction of the subfinger.\n The layers to use for routing the fingers and subfingers by using the -fishbone_layers option.\n To create a comb routing topology, use the -topology comb option.\n In a comb topology, each driver and load pin is directly routed to the nearest stripe.\n However, if the Manhattan distance from a pin to the nearest stripe is more than the comb distance, the tool routes the pin to the nearest net shape using a Steiner topology, as shown in Figure 94.\n The default comb distance is two global routing cells.\n To change the comb distance, use the route.common.comb_distance application option.\n 421 Implementing Multisource Clock Trees Feedback Figure 94 Comb Topology Load pins Driver pins Clock mesh strap ( shape_use stripe Clock mesh strap ( shape_use user_route Comb route Pin that is further than the comb distance Comb routing is suitable when there are a large number of driver and load pins directly under the clock-mesh stripes.\n The tool uses stacked vias to connect the pins to the stripes, which are usually in the higher routing layers.\n However, this can contribute to physical DRC violations due to many adjacent stacked vias, as shown in Figure 95 Figure 95 Vias in the Comb Topology Driver and load pins Clock mesh strap on Stacked vias higher routing layer To create a substrap routing topology, use the -topology sub_strap option.\n In a substrap topology, additional straps that are parallel to the stripes are created on intermediate routing layers.\n This reduces the number of stacked vias, as compared to the comb topology.\n 422 Implementing Multisource Clock Trees Feedback Figure 96 Vias in the Substrap Topology Driver and load pins Clock mesh stripe on Substrap on intermediate higher routing layer routing layers For the substrap topology, you Must specify the layers in which to create the substrap by using the -sub_strap_layers option Can specify the maximum RC delay allowed for the substrap by using the -sub_strap_max_delay option The default is 2 ps.\n This delay constrains the length and the number of loads connected to the substrap."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Detail Routing"}, {"role": "assistant", "content": "IA1 = 97.81% (1091973/ 1116367 vias) Layer VIA2 = 99.97% (1071650/ 1071978 vias) The optimized via conversion rate based on total routed via count = 98.96% (2902130 / 2932706 vias) Layer VIA1 = 97.81% (1091973/ 1116367 vias) Weight 1 = 97.81% (1091973 vias) Un-optimized = 2.19% (24394 vias) Total number of nets = 255165 0 open nets, of which 0 are frozen Total number of excluded ports = 0 ports of 0 unplaced cells connected to 0 nets 0 ports without pins of 0 cells connected to 0 nets 0 ports of 0 cover cells connected to 0 non-pg nets Total number of DRCs = 7398 Total number of antenna violations = antenna checking not active Information: Routes in non-preferred voltage areas = 8170 (ZRT-559) Topology ECO iteration 1 ended with 0 qualifying violations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing Libraries"}, {"role": "assistant", "content": "The Fusion Compiler tool provides the following library analysis capabilities, which can help achieve the performance, power, and area goals of your design: Identify redundant, outlier, and equivalent cells in library cell families, which you can exclude from optimization during the subsequent steps in the implementation flow.\n Identify gaps in library cell families, which you can provide as feedback to your library vendor with the goal of improving the reference libraries.\n Compare the delay, power, area, and other characteristics of equivalent cells in different libraries or different versions of the same library, which can help you identify the appropriate libraries to use for design implementation.\n A family of library cells is a collection of cells that share some common properties.\n The tool can identify a family of library cells based on User-identified library cells properties, such function, threshold voltage, and so on User-defined library cells lexical attributes and settings User-specified custom library cell families The following figure shows the high-level flow for performing library analysis.\n 83 Analyzing Libraries Feedback Figure 8 Library Analysis Flow For more information about the different types of library analysis flows, see the following topics: Introduction to Redundancies, Outliers, Equivalences, and Gaps in Library Cell Families Identifying Redundancies, Outliers, Equivalences, and Gaps in Library Cell Families Comparing Libraries"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Multicore Configurations"}, {"role": "assistant", "content": "To remove the multicore configurations defined by the set_host_options command, use the remove_host_options command.\n To remove all multicore configurations, use the -all option.\n To remove a specific multicore configuration, specify the configuration name with the -name option.\n 67 Enabling Multicore Processing Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Physical Synthesis"}, {"role": "assistant", "content": "The Fusion Compiler tool synthesizes the RTL descriptions into optimized gate-level designs, optimizes them to achieve the best quality of results (QoR) in speed, area, and power, and allows early design exploration and prototyping.\n Topics in this section include Performing Unified Physical Synthesis Controlling Mapping and Optimization Performing Multibit Optimization Running Concurrent Clock and Data Optimization Performing Test Insertion and Scan Synthesis Specifying Settings for Performance, Power, and Area Improvement Performing Design Analysis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Considering the Dynamic Power QoR During Placement"}, {"role": "assistant", "content": "To consider the dynamic power QoR during placement, perform the following steps: 1.\n Annotate switching activity on the design, as described in Annotating the Switching Activity 2.\n Ensure that at least one scenario is enabled for dynamic-power optimization by using the set_scenario_status -dynamic_power true command.\n 3.\n Enable power-driven placement for the create_placement refine_placement compile_fusion, or clock_opt command by using one of the following methods: Enable dynamic-power-driven placement by setting the place.coarse.enhanced_low_power_effort application option to none low medium, or high.\n The default is low During dynamic-power-driven placement, the tool tries to improve both the timing and power of timing-critical nets and the power of the other nets.\n This improves the power QoR without affecting the timing QoR."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using the Command Log File"}, {"role": "assistant", "content": "The command log file records the commands processed by the Fusion Compiler tool, including setup file commands and application option settings.\n By default, the Fusion Compiler tool writes the command log to a file named fc_command.log in the directory from which you invoked fc_shell.\n You can change the name of the command log file by setting the sh_command_log_file variable in your.synopsys_fc.setup file.\n You should make any changes to this variable before you start the Fusion Compiler tool.\n If your user-defined or project-specific setup file does not contain this variable, the Fusion Compiler tool automatically creates the fc_command.log file.\n Each Fusion Compiler session overwrites the command log file.\n To save a command log file, move it or rename it.\n You can use the command log file to Produce a script for a particular implementation strategy Record the physical implementation process Document any problems you are having"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Finding Invalid Taps"}, {"role": "assistant", "content": "To find taps that fail the validity checking, use the get_taps command to report the taps that have is_valid_location attribute set to false For example, fc_shell> get_attribute [ get_taps Tap_1437 ] is_valid_location false"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Integrated Multibit-Register Optimization"}, {"role": "assistant", "content": "To perform integrated multibit register optimization during the compile_fusion command, 1.\n Enable multibit register optimization by setting the compile.flow.enable_multibit application option to true When you do so, by default, the tool performs the following multibit optimizations during different stages of the compile_fusion command: Combines single registers or smaller register banks at the RTL level to create larger register banks during the initial_map stage To disable this feature, set the compile.flow.enable_rtl_multibit_banking application option to false Splits multibit register banks created at the RTL level if the register bank includes registers on critical timing paths during the logic_opto stage To disable this feature, set the compile.flow.enable_rtl_multibit_debanking application option to false Creates multibit register banks considering placement during the initial_opto stage To disable this feature, set the compile.flow.enable_physical_multibit_banking application option to false You can enable placement-based multibit banking during the final_place stage of the compile_fusion command, instead of the initial_opto stage, by setting the compile.flow.enable_second_pass_multibit_banking application option to true and the compile.flow.enable_physical_multibit_banking application option to false You should enable placement-based multibit banking either during the initial_opto stage or the final_place stage; not both.\n Splits multibit register banks, if it improves total negative slack (TNS), during the initial_opto and final_opto stages To disable this feature, set the compile.flow.enable_multibit_debanking application option to false 2.\n (Optional).\n 245 Performing Multibit Optimization Feedback 3.\n Specify settings for multibit register banking by using the set_multibit_options command.\n For example, the following command excludes the reg[1] cell from multibit optimization during the RTL-banking stage: fc_shell> set_multibit_options -exclude [get_cells \"reg[1]\"] \\ -stage rtl The following command specifies that during the physical-banking stage, the tool banks only registers that are connected to the same bus: fc_shell> set_multibit_options -bus_registers_only \\ -stage physical 4.\n (Optional) Control multibit register optimization using application options as shown in the following table.\n Table 22 General Application Options for Controlling Multibit Register Optimization To do this Set this application option Ignore scan flip-flops that are not included in the SCANDEF information during banking multibit.banking.enable_strict_scan_check to true Consider multibit register library cells with multiple scan-in pins and internal scan-in pins during banking multibit.banking.lcs_consider_multi_si_cells to true Enable banking of registers driven by equivalent integrated-clock-gating (ICG) cells When you enable this feature,the tool might loose nondefault routing rules applied to the nets connected to the clock-gating cells.\n Therefore, check and reapply these nondefault routing rules after optimization.\n multibit.banking.across_equivalent_icg to true Enable timing-driven banking of power management cells The tool skips fixed cells and cells marked with dont_touch legalize_only, and user-specified size_only attributes mv.cells.enable_multibit_pm_cells to true Include cells with user-specified size_only settings during physical banking and debanking multibit.common.exclude_size_only_cells to false Enable multibit register rewiring for the compile_fusion command compile.flow.enable_multibit_rewiring to true 246 Performing Multibit Optimization Feedback To do this Set this application option Consider the toggle rate when performing RTL-based multibit reordering at the logic_opto stage compile.flow.enable_toggle_aware_rtl_multibit_ reordering to true Enable site aware debanking, clock useful skew (CUS), driver sizing, and early debanking of bottleneck multibit registers Multibit debanking features impact the debanking in the initial_opto (compile_fusion) the final_place, and the final_opto (compile_fusion/place_opt) stages.\n Multibit debanking doesn't impact RTL debanking, which is enabled in the logic_opto stage of the compile_fusion command.\n opt.common.enable_multibit_feature to true 5.\n (Optional) Create a multibit register bank from specific single-bit registers as described in Creating a Multibit Register Bank From Specific Single-Bit Registers 6.\n (Optional) Control the naming style used for multibit banking as described in Specifying Naming Styles for Multibit Registers 7.\n Perform optimization by using the compile_fusion command.\n 8.\n (Optional) Report multibit information.\n To report the multibit register banks inferred by the tool, use the report_transformed_registers -multibit command, as described in Reporting Multibit Registers To report multibit statistics such as the total number of single-bit and multibit registers, the multibit banking ratio, and so on, use the report_multibit command.\n For more information about how to determine why multibit register banking is not performed for specific cells, see Identifying Why Multibit Banking Is Not Performed 9.\n (Optional) Analyze the multibit banking components in the GUI as described in Viewing Multibit Components in the GUI"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Critical Nets"}, {"role": "assistant", "content": "To route a group of critical nets before routing the rest of the nets in the block, use the route_group command.\n To specify the nets to route, use one of the following options: -nets Use this option to specify the nets on the command line: fc_shell> route_group -nets collection_of_critical_nets -from_file Use this option to specify the nets in a file: fc_shell> route_group -from_file file_name If the specified nets are associated with a routing corridor, the nets are routed within the defined region.\n Note that global routing considers routing corridors as a hard constraint, while track assignment and detail routing consider routing corridors as a soft constraint and might route nets slightly outside of the routing corridor to fix DRC violations.\n By default, the route_group command ignores existing global routes, reuses dangling wires and existing detail routes on the specified nets, and runs global routing, track assignment, and detail routing on the specified nets.\n To perform incremental global routing, set the -reuse_existing_global_route option to true Note: You cannot use the -reuse_existing_global_route true option when routing the nets in a routing corridor.\n If you use this option, the global router ignores the routing corridors.\n To disable the reuse of dangling wires, set the -utilize_dangling_wires option to false To stop after global routing, set the -stop_after_global_route option to true By default, the detail router performs a maximum of 40 iterations search and repair iterations.\n If Zroute determines before then that all violations have been fixed or that it cannot fix the remaining violations, it stops.\n To change the maximum number of detail routing iterations, use the -max_detail_route_iterations option.\n By default, the route_group command does not fix soft DRC violations, such as bridge rule violations.\n To enable the fixing of soft DRC violations after the final detail routing 521 Routing Secondary Power and Ground Pins Feedback iteration, set the route.common.post_group_route_fix_soft_violations application option to true fc_shell> set_app_options \\ -name route.common.post_group_route_fix_soft_violations \\ -value true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Top-Level Closure With ETMs"}, {"role": "assistant", "content": "Before you can use the ETMs at the top level, you must perform the following tasks: Apply the top-level-only timing constraints and settings.\n If the cell instances represented by ETMs have internal clocks, you must reapply these clock definition from the top level.\n Avoid cross-boundary timing exceptions that refer to objects inside the blocks.\n To apply the UPF constraints and settings, you must: 1.\n Generate the block-level UPF from each of the block-level designs using the save_upf command.\n 2.\n At the top level, load the block UPF for each of the block instances that are represented by an ETM and the top only UPF: load_upf -scope <instance_name> block.upf load_upf top.upf Apply top-level placement constraints and settings such as hard keepout margins.\n When using ETMs at the top-level, you can perform synthesis, top-level placement, optimization, clock tree synthesis, routing, and postroute optimization using the commands supported at the block level."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Splitting Clock Cells"}, {"role": "assistant", "content": "You can manually split clock cells that have DRC violations by using the split_clock_cells -cells command, as shown in the following example: fc_shell> split_clock_cells -cells [get_cells U1/ICG*] The tool does not split the specified cells if They do not have DRC violations They have don't-touch, size-only, or fixed-placement attribute settings It is necessary to punch ports on the boundaries of power domains or blocks that have been identified with the set_freeze_ports command After splitting a cell, the tool Names the new cells using the <original_cell_name>_split_<integer> naming convention Copies all the settings and constraints from the original cell to the newly created cells 385 Implementing Clock Trees and Performing Post-CTS Optimization Feedback Instead of specifying the cells to split, you can specify one or more collection of loads that are driven by the same driver by using the -loads option, as shown in the following example: fc_shell> set loads1 [get_pins I1/reg*/CK] fc_shell> set loads2 [get_pins I2/reg*/CK] fc_shell> split_clock_cells -loads [list $load1 $load2] After splitting, each set of loads is driven by a newly created driver."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Tool-Inserted Clock-Gate Levels"}, {"role": "assistant", "content": "You can specify the maximum number of clock-gate levels that the tool should use for either all clock gates or only tool-inserted clock gates.\n If you specify a value for all clock gates, you must know how many clock-gate levels already exist in the RTL design.\n Alternatively, you can specify a value only for tool-inserted clock gates.\n For details about how the Fusion Compiler tool counts clock-gate levels, see Clock-Gate Levels and Stages 311 Controlling the Number of Clock-Gate Levels Feedback To specify the maximum number of clock-gate levels, use the set_clock_gating_tree_options command with one of the following mutually exclusive options: The -max_total_levels option specifies the maximum number of levels for all clock gates.\n The argument is an integer greater than or equal to 1.\n The -max_tool_inserted_levels option specifies the maximum number of levels for tool-inserted clock gates.\n The argument is an integer greater than or equal to 1.\n To restrict the clock-level control to specific clock sources, use the the -clocks option of the set_clock_gating_tree_options command, which takes a list of clocks as an argument.\n To allow clock-gate removal (also known as ungating) if some clock gates are not collapsible when the tool attempts to meet the maximum clock level constraint, use the -ungate_if_not_collapsible option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Introduction to Zroute"}, {"role": "assistant", "content": "Zroute has five routing engines: global routing, track assignment, detail routing, ECO routing, and routing verification.\n You can invoke global routing, track assignment, and detail routing by using task-specific commands or by using an automatic routing command.\n You invoke ECO routing and route verification by using task-specific commands.\n Zroute includes the following main features: Multithreading on multicore hardware for all routing steps, including global routing, track assignment, and detail routing A realistic connectivity model where Zroute recognizes electrical connectivity if the rectangles touch; it does not require the center lines of wires to connect A dynamic maze grid that permits Zroute to go off-grid to connect pins, while retaining the speed advantages of gridded routers A polygon manager, which allows Zroute to recognize polygons and to understand that design rule checks (DRCs) are aimed at polygons Concurrent optimization of design rules, antenna rules, wire optimization, and via optimization during detail routing Concurrent redundant via insertion during detail routing Support for soft rules built into global routing, track assignment, and detail routing Timing- and crosstalk-driven global routing, track assignment, detail routing, and ECO routing Intelligent design rule handling, including merging of redundant design rule violations and intelligent convergence Net group routing with layer constraints and nondefault routing rules Clock routing Route verification 439 Introduction to Zroute Feedback Optimization for DFM and design-for-yield (DFY) using a soft rule approach Support for advanced design rules, such as multiple patterning 440 Basic Zroute Flow Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Tapoffs"}, {"role": "assistant", "content": "Two Custom Router application options allow you to control tapoff operations: custom.route.bus_tap_off_enable custom.route.bus_tap_off_shielding The custom.route.bus_tap_off_enable application option connects pins to the bus trunk.\n If the custom.route.bus_tap_off_enable application option is turned on, you can use the custom.route.bus_tap_off_shielding application option to add shielding to the bus tapoffs."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Implementing Multisource Clock Trees"}, {"role": "assistant", "content": "The following topics introduce the different types of multisource clock trees and provides detailed information about the different multisource clock tree implementation flows and steps: Introduction to Multisource Clock Trees Structures Implementing a Regular Multisource Clock Tree Implementing a Regular Multisource Clock Tree Using Integrated Tap Assignment Implementing a Regular Multisource Clock Tree With an H-Tree-Only Global Clock Tree Structure Implementing MSCTS Multiple H-Tree Implementing Power Aware Flexible H-Tree Implementing a Structural Multisource Clock Tree Implementing a Structural Multisource Clock Tree Using Integrated Subtree Synthesis Improving the Correlation Between the SMSCTS and CCD Inserting Clock Drivers Synthesizing the Global Clock Trees Creating Clock Straps Routing to Clock Straps Analyzing the Clock Mesh 396 Implementing Multisource Clock Trees Feedback Performing Automated Tap Insertion and H-Tree Synthesis Specifying Tap Assignment Options and Settings Building the Local Clock Subtree Structures"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Threshold-Voltage-Based Filler Cell Insertion"}, {"role": "assistant", "content": "In the threshold-voltage-based flow, the tool selects the filler cells by using user-defined insertion rules, which are based the threshold-voltage types of the cells that border the gap.\n This flow is typically used only for established foundry nodes.\n To perform threshold-voltage-based filler cell insertion, 1.\n Ensure that the block is legalized by using the check_legality command.\n 2.\n Annotate the threshold-voltage types on the reference cells by using the set_cell_vt_type command.\n For example, to specify that all cells whose names end with _vtA have a threshold voltage type of vtA and the invx1 cell has a threshold voltage type of default, use the following commands: fc_shell> set_cell_vt_type -lib_cells \"*/*_vtA\" -vt_type vtA fc_shell> set_cell_vt_type -lib_cells \"mylib/invx1\" -vt_type default 3.\n Define the rules for inserting the filler cells by using the set_vt_filler_rule command.\n You define the rules by specifying the filler cells to insert based on the threshold- voltage types of the cells on the left and right of the gap being filled.\n For example, to specify that filler2x or filler1x cells can be inserted in a gap that has default threshold-voltage cells on the left and right sides and fillerA2x and fillerA1x cells 657 Inserting Filler Cells Feedback can be inserted in a gap that has vtA threshold-voltage cells on the left and right sides, use the following commands: fc_shell> set_vt_filler_rule -vt_type {default default} \\ -filler_cells {myLib/filler2x myLib/filler1x} fc_shell> set_vt_filler_rule -vt_type {vtA vtA} \\ -filler_cells {myLib/fillerA2x myLib/fillerA1x} 4.\n Insert the filler cells by using the create_vtcell_fillers command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Crosstalk-Driven Global Routing"}, {"role": "assistant", "content": "By default, the route_global command is not crosstalk-driven.\n To enable crosstalk-driven global routing, set the route.global.crosstalk_driven and time.si_enable_analysis application options to true before you run the route_global command.\n When you enable crosstalk-driven global routing, the tool calculates the net delays before invoking the global router.\n If the design library contains global route information, the tool uses the global route information to calculate the net delays; otherwise, it uses virtual routing to calculate the net delays.\n The global routing results can vary depending on whether the initial net delays were calculated by using global route information or virtual routing.\n To remove existing global route information from the signal nets in the block, use the -global_route and -net_types signal options with the remove_routes command, as shown in the following example: fc_shell> remove_routes -global_route -net_types signal"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Legalization Settings"}, {"role": "assistant", "content": "The tool performs legalization at various points during the design flow.\n The following topics describe settings for controlling legalization: Minimizing Large Displacements During Legalization Optimizing Pin Access During Legalization Enabling Advanced PG Net Checks 162 Specifying Legalization Settings Feedback Enabling Advanced Legalization Algorithms Setting Up for Variant-Aware Legalization Checking if Library Cells Are Legally Placeable"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fixing Site Name Mismatches"}, {"role": "assistant", "content": "If the site names used in the DEF file do not match the site names defined in the technology file, use the -convert_sites option to specify the site name mapping.\n For example, if the DEF file uses a site named CORE, but the technology file defines only a site named unit, use the following command to convert the site names when reading the DEF file: fc_shell> read_def -convert_sites { {CORE unit} } block.def"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Routing Corridors"}, {"role": "assistant", "content": "To remove routing corridors from the current block, use the remove_routing_corridors command.\n To remove specific routing corridors, specify the routing corridors, either as a list or collection, such as that returned by the get_routing_corridors command.\n To remove all routing corridors, specify the -all option.\n You can also remove routing corridors in the GUI by using the Delete tool."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Metal Fill"}, {"role": "assistant", "content": "The method you use to remove metal fill depends on the extent of the metal fill removal: To remove all metal fill from a block, specific layers of a block, or specific regions of a block, use the signoff_create_metal_fill command with the -mode remove option.\n This command uses the IC Validator tool to remove metal fill from the current block, as described in Removing Metal Fill With the IC Validator Tool To remove specific fill shapes, use the remove_shapes or remove_fill_cells commands.\n You would typically use this method when manually fixing DRC violations related to the metal fill.\n You might also be able to fix the DRC violation by modifying the metal fill shapes, as described in Modifying Metal Fill 739 Inserting Metal Fill With IC Validator In-Design Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Considering Wide Cell Density During Placement"}, {"role": "assistant", "content": "If a cell cannot straddle the vertical power straps and the width of the cell is more than half the pitch of the power straps, only one such cell can be placed between the power straps.\n Therefore, during placement, the tool must minimize the density of such wide cells to ensure that they can be placed and legalized without large displacements.\n For advanced technology nodes with wide cells, enable wide-cell modeling during placement by setting the place.coarse.wide_cell_use_model application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Locations for Repeater Groups"}, {"role": "assistant", "content": "Use one of the following mutually exclusive options to control repeater group location: -repeater_distance specifies the distance between repeater groups.\n This option supports the following additional options: -first_distance specifies the distance between the driver and the center of the first repeater group.\n -min_distance_repeater_to_load specifies the minimum distance between the last repeater group and the load.\n The default is one half of the value specified for the -repeater_distance option.\n -tolerance specifies the maximum delta distance over the value specified for -repeater_distance.\n The default is 5 \u03bcm.\n -relative_distance specifies the distance between the driver and the first repeater group, the distance between the first and second repeater groups, the distance between the second and third repeater group, and so on.\n -location specifies the location of the center of each repeater group.\n -number_of_repeater_groups specifies the total number of repeater groups to be inserted evenly along the route.\n -cutlines specifies the location pairs that define the cutlines.\n Cutlines must be perpendicular to the routes and the repeater groups are centered around the cutlines."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Loading the Signal Electromigration Constraints"}, {"role": "assistant", "content": "The Fusion Compiler tool supports the following formats for specifying electromigration constraints: Interconnect Technology File (ITF) An ITF file can contain the following types of electromigration constraints: delta temperature, duration and duty ratio, via size, via direction, metal length, and via-to-via spacing relaxation.\n The Fusion Compiler tool supports both unencrypted and encrypted ITF files.\n Advanced Library Format (ALF) An ALF file can contain the following types of electromigration constraints: temperature, metal width, and contact area.\n The electromigration constaints are stored in the design library as a lookup table.\n The tool determines the limit values by looking up the values in the lookup table and then using linear interpolation or extrapolation.\n To load the signal electromigration constaints into the design library, use the read_signal_em_constraints command.\n By default, the command reads an unencrypted ITF file.\n To read an encrypted ITF file, use the -encrypted option.\n To read an ALF file, use the -format ALF option.\n The constraints loaded by the read_signal_em_constraints command overwrite any existing signal electromigration constraints in the design library.\n For example, to read an unencrypted ITF file, use the following command: fc_shell> read_signal_em_constraints em.itf For example, to read an encrypted ITF file, use the following command: fc_shell> read_signal_em_constraints -encrypted em.itf.enc To read an ALF file, use the following command: fc_shell> read_signal_em_constraints -format ALF em.alf"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Physical Constraints Extracted From the DEF File"}, {"role": "assistant", "content": "The read_def command extracts physical constraint information from DEF files and annotates it on the block.\n However, only the following physical constraints are extracted and annotated: Placement Area Port Locations Cell Locations Placement Blockages 106 Importing the Floorplan Information Feedback Site Rows Routing Tracks Placement Bounds Routing Blockages Preroutes To visually inspect the extracted physical constraints, use the layout view in the GUI.\n All physical constraints extracted from the DEF file are automatically added to the layout view.\n Placement Area Placement area is computed based on the site array information.\n Port Locations For each port with the location specified in the DEF file, the tool sets the location on the corresponding port in the block.\n Note: If the DEF file does not contain port-location information, the tool inherits the port locations from the locations of the pad cells, as described in.\n Example 1 DEF Port Location Information PINS 2 ; -Out1 + NET Out1 + DIRECTION OUTPUT + USE SIGNAL + LAYER M3 (0 0) (4200 200) + PLACED (80875 0) N; -Sel0 + NET Sel0 + DIRECTION INPUT + USE SIGNAL + LAYER M4 (0 0)(200 200) + PLACED (135920 42475) N; END PINS Ports with changed names and multiple layers are supported.\n Example 2 DEF Port Locations With Changed Names and Multiple Layers PINS 2 ; - sys_addr\\[23\\].extra2 + NET sys_addr[23] + DIRECTION INPUT +USE SIGNAL + LAYER METAL4 ( 0 0 ) ( 820 5820 ) + FIXED ( 1587825 2744180 ) N ; - sys_addr[23] + NET sys_addr[23] + DIRECTION INPUT + USE SIGNAL + LAYER METAL3 ( 0 0 ) ( 820 5820 ) + FIXED ( 1587825 2744180 ) N ; END PINS Example 3 DEF Port Orientation Information PINS 1; - OUT + NET OUT + DIRECTION INPUT + USE SIGNAL + LAYER m4 ( -120 0 ) ( 120 240 ) 107 Importing the Floorplan Information Feedback + FIXED ( 4557120 1726080 ) S ; END PINS Cell Locations For each cell with a location and the FIXED attribute specified in the DEF file, the tool sets the location on the corresponding cell in the block.\n Example 4 shows DEF macro location and orientation information, where the letters E and W denote east rotation and west rotation respectively.\n Example 4 DEF Cell Location Information COMPONENTS 2 ; - macro_cell_abx2 + FIXED ( 4350720 8160 ) E ; - macro_cell_cdy1 + FIXED ( 4800 8160 ) W ; END COMPONENTS Placement Blockages The read_def command imports hard, soft, and partial placement blockages defined in the DEF file.\n Note: DEF versions before version 5.7 did not support partial blockages.\n In addition, if your floorplanning tool creates a DEF file with DEF version 5.6, you need to manually add the #SNPS_SOFT_BLOCKAGE pragma to specify a soft blockage, as shown in Example 7 Example 5 DEF Hard Placement Blockage Information BLOCKAGES 50 ;...\n - PLACEMENT RECT ( 970460 7500 ) ( 3247660 129940 )...\n END BLOCKAGES Example 6 DEF Version 5.7 Soft Placement Blockage Information BLOCKAGES 50 ;...\n - PLACEMENT + SOFT RECT ( 970460 7500 ) ( 3247660 129940 ) ;...\n END BLOCKAGES Example 7 DEF Version 5.6 Soft Placement Blockage Information BLOCKAGES 50 ;...\n - PLACEMENT RECT ( 970460 7500 ) ( 3247660 129940 ) ; #SNPS_SOFT_BLOCKAGE...\n END BLOCKAGES 108 Importing the Floorplan Information Feedback Example 8 DEF Partial Placement Blockage Information BLOCKAGES 50 ;...\n - PLACEMENT + PARTIAL 80 RECT ( 970460 7500 ) ( 3247660 129940 ) ;...\n END BLOCKAGES Site Rows Site row information in the DEF file defines the placement area.\n Example 9 DEF Site Row Information ROW ROW_0 core 0 0 N DO 838 BY 1 STEP 560 0; Routing Tracks The track information in the DEF file defines the routing grid for designs based on standard cells.\n This information can be used during routing, and track support can enhance congestion evaluation and reporting to make it match more closely with the routing results.\n Example 10 DEF Routing Track Information TRACKS X 330 DO 457 STEP 660 LAYER METAL1 ; TRACKS Y 280 DO 540 STEP 560 LAYER METAL1 ; Placement Bounds If REGIONS defining bounds exist in the DEF file, the read_def command imports those placement bounds.\n Also, if any cells in the related GROUP are attached to the region, fuzzy cell matching occurs between these cells and the ones in the block.matched cells are attached to the bounds in the following ways: If there are regions in the block with the same name as in the DEF, the cells in the related group are attached to the region by the add_to_bound command in incremental mode.\n If the region does not exist in the block, it is created with the same name as in the DEF file by applying the create_bound command; matched cells in the related group are also attached.\n Example 11 DEF Placement Bound Information REGIONS 1 ; - c20_group ( 201970 40040 ) ( 237914 75984 ) + TYPE FENCE ; END REGIONS GROUPS 1 ; - c20_group cell_abc1 cell_sm1 cell_sm2 109 Importing the Floorplan Information Feedback + SOFT + REGION c20_group ; END GROUPS Routing Blockages Routing blockages are extracted similar to the way that placement blockages are extracted.\n Preroutes The tool extracts preroutes that are defined in the DEF file.\n Example 12 DEF Preroute Information SPECIALNETS 2 ; - vdd + ROUTED METAL3 10000 + SHAPE STRIPE ( 10000 150000 ) ( 50000 * ) + USE POWER ;...\n END SPECIALNETS"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Displaying Command Help"}, {"role": "assistant", "content": "Command help consists of either a brief description of aFusion Compiler command or a list of the options and arguments supported by an Fusion Compiler command.\n To display a brief description of a Fusion Compiler command, enter the help command followed by the command name.\n For example, to display a brief description of the report_timing command, use the following command: fc_shell> help report_timing To display the options supported by a Fusion Compiler command, enter the command name with the -help option on the command line.\n For example, to see the options supported by the report_timing command, use the following command: fc_shell> report_timing -help 47 Using Application Options Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Isolating Input and Output Ports"}, {"role": "assistant", "content": "You can isolate input and output ports to improve the accuracy of timing models.\n To insert isolation logic at specified input or output ports, use the set_isolate_ports command.\n Isolation logic can be either a buffer or a pair of inverters; by default, the command places buffers to isolate An input port from its fanout networks An output port from its driver When you specify the -force option with the set_isolate_ports command, the tool ensures that the library cells specified by the -driver option are not sized.\n Note that the tool does not place isolation logic on the following ports: Bidirectional ports Ports defined as clock sources or power pins Ports connected to nets that are marked with the dont_touch attribute 175 Controlling the Optimization of Cells, Nets, Pins, and Ports Feedback Example The following commands insert isolation logic to Input port in3 with a buffer Output port out1 with a buffer Output port out3 with the LIBCELL_BUFF library cell Output port out4 with a pair of inverters fc_shell> set_isolate_ports {in3 out1} fc_shell> set_isolate_ports -driver LIBCELL_BUFF out3 -force fc_shell> set_isolate_ports -type inverter out4 The following figures show the design without and with the isolation logic inserted by the set_isolate_ports commands, including buffers and an inverter pair: Without port isolation After running the port isolation commands in1 clk out3 rst in3 in2 out4 out2 out1 out1 out2 out3 out4 in1 clk rst in2 in3 LIBCELL_BUFF"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Working With Design Libraries"}, {"role": "assistant", "content": "You can create, open, query, save, or close a design library, using an absolute path, a relative path, or no path, by using the following commands: create_lib This command creates the library in memory and sets it as the current library.\n When you run this command to create a new design library, you must specify the library name.\n Slash (/) and colon (:) characters are not allowed in library names.\n The following command creates the my_libA library using a relative path: fc_shell> create_lib../my_lib_dir/my_libA {my_libA} open_lib This command opens the specified library, makes that library the current library, and opens all its associated reference libraries.\n Opening a library means loading it into memory and making its blocks accessible.\n The following example opens the my_libA library saved on disk: fc_shell> open_lib my_libA Information: Loading library file '/usr/lib/StdCells.ndm' Information: Loading library file '/usr/lib/RAMs.ndm' Information: Loading library file '/usr/lib/PhysicalOnly.ndm' {my_libA} current_lib By default, the library most recently opened is the current library.\n You can explicitly set any open library to be the current library by using the current_lib command.\n For example, fc_shell> current_lib my_libA {my_libA} save_lib When you create or change a library, the changes are stored in memory only.\n To save a library to disk, use this command.\n For example, fc_shell> save_lib lib_A Saving library 'lib_A' close_lib 74 Setting Up Libraries Feedback When you no longer need access to data in a library, you can close it by using the close_lib command.\n Be sure to save the changes in the library before you close it.\n For example, fc_shell> close_lib Closing library 'lib_A' In addition, you can use the current_lib get_libs, and report_lib commands to query design libraries.\n For more information, see the Design Libraries topic in the Fusion Compiler Data Model User Guide"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting the Routing Constraints"}, {"role": "assistant", "content": "You can set routing constraints for secondary power and ground pin routing in the same way as for regular signal routing.\n For example, you can set constraints by Defining the minimum and maximum routing layers by using the set_routing_rule command For more information about using the set_routing_rule command, see Specifying Net-Specific Layer Constraints Specifying the preferred pin connections by setting the route.common.single_connection_to_pins and route.common.connect_within_pins_by_layer_name application options For example, to require a single connection to the secondary power and ground pins and require that the M1 connections use vias contained within the pin shapes, use the following command: fc_shell> set_app_options \\ -name route.common.single_connection_to_pins \\ -value standard_cell_pins fc_shell> set_app_options \\ -name route.common.connect_within_pins_by_layer_name \\ -value {{M1 via_standard_cell_pins}} Defining the maximum number of power or ground pins in a cluster by setting the route.common.number_of_secondary_pg_pin_connections application option A cluster is a set of connected secondary power or ground pins that has one connection to a PG strap or ring.\n By default, the value of this option is 0, which means that there is no limit on the number of secondary power or ground pins in a cluster.\n For example, to connect all secondary power and ground pins directly to a PG strap or ring, use the following command: fc_shell> set_app_options \\ -name route.common.number_of_secondary_pg_pin_connections \\ -value 1 523 Routing Secondary Power and Ground Pins Feedback Defining a nondefault routing rule for secondary power and ground pin routing For example, to define a nondefault routing rule named wideSVDD for wide M1 and M2 and set the nondefault routing rule on the VDD2 net, to which the secondary power and ground pins are connected, use the following commands: fc_shell> create_routing_rule wideSVDD -widths { M1 0.3 M2 0.3 } fc_shell> set_routing_rule -rule wideSVDD {VDD2} For more information about using nondefault routing rules, see Using Nondefault Routing Rules By default, the constraints apply to both the secondary power and ground connections and the tie-off connections.\n To separate these connections so that you can set constraints only for the secondary power and ground connections, set the route.common.separate_tie_off_from_secondary_pg application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Balancing Skew Between Different Clock Trees"}, {"role": "assistant", "content": "The Fusion Compiler tool can automatically balance the skew between a group of clocks.\n The set of clocks considered during delay balancing is referred to as a clock balance group.\n You can define multiple clock balance groups.\n For each clock balance group, you can define a delay offset between the clocks.\n Together, the clock balance groups and their delay offset settings are referred to as interclock delay balancing constraints Note: The tool cannot balance skew between a generated clock and other clocks.\n To balance multiple clocks, perform the following steps: 1.\n Generate the interclock delay balancing constraints either by Manually defining the clock balance groups and their delay offsets, as described in Defining the Interclock Delay Balancing Constraints Having the tool generate them as described in Generating Interclock Delay Balancing Constraints Automatically 2.\n Balance the interclock delays as described in Running Interclock Delay Balancing"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying the Global Layer Constraints"}, {"role": "assistant", "content": "To specify the global layer constraints, use the set_ignored_layers command.\n By default, the global layer constraints are used for RC estimation, congestion analysis, and as soft constraints for routing.\n Use the following options to set the constraints and change the default behavior.\n To specify the minimum and maximum routing layers, use the -min_routing_layer and -max_routing_layer options.\n Specify the routing layers by using the layer names from the technology file.\n For example, to use layers M2 through M7 for routing, RC estimation, and congestion analysis, use the following command: fc_shell> set_ignored_layers \\ -min_routing_layer M2 -max_routing_layer M7 To allow the use of layers beyond the minimum or maximum routing layer only for pin connections, set the route.common.global_min_layer_mode and route.common.global_max_layer_mode application options to allow_pin_connection 199 Specifying the Routing Resources Feedback To change the constraints to hard constraints, set the route.common.global_min_layer_mode and route.common.global_max_layer_mode application options to hard To specify additional layers to be ignored for RC estimation and congestion analysis, use the -rc_congestion_ignored_layers option.\n The specified layers must be between the minimum and maximum routing layers.\n For example, to use layers M2 through M7 for routing and layers M3 through M7 for RC estimation and congestion analysis, use the following command: fc_shell> set_ignored_layers \\ -min_routing_layer M2 -max_routing_layer M7 \\ -rc_congestion_ignored_layers {M2} To change an existing layer constraint setting, simply reset that option.\n When you reset an option, it overrides the existing value of only that option; the other option settings remain unchanged.\n For example, assume that you used the previous command to set the minimum routing layer to M2 and the maximum routing layer to M7.\n To change the maximum routing layer from M7 to M8, but keep the other settings, use the following command: fc_shell> set_ignored_layers -max_routing_layer M8"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting the Policy for Early Data Checks"}, {"role": "assistant", "content": "To set or modify the policy for all the checks, or modify the policy settings for data checks, use the set_early_data_check_policy command.\n Use the following options to configure the policy: -checks : Specifies a predefined list of data checks.\n It supports an asterisk wildcard character (*) as the name of a check.\n -policy : Specifies the type of policy depending on what is supported by the check.\n This can be error : The tool issues an error message if the check does not support error as a policy.\n tolerate : The tool issues an error message if the check does not support tolerate as a policy.\n repair : The tool issues an error message if the check does not support repair as a policy.\n strict : The tool sets the first matching policy in the following order: 1.\n error 2.\n tolerate 3.\n repair For example, when a check supports the error and tolerate policies, and you select strict as the policy type, the error policy type is set.\n 850 Checking Designs With Abstracts for Top-Level-Closure Issues Feedback lenient : The tool sets the first matching policy in the following order: 1.\n repair 2.\n tolerate 3.\n error For example, when a check supports the error and tolerate policies, and you select lenient as the policy type, the tolerate policy type is set.\n Note: If you specify both the checks and policies, the configuration supports all the policies described in this section, depending on what the application-specific check supports.\n However, if you specify only the policies, but not the checks, the configuration supports only the strict and lenient policies.\n You can also use the if_not_exists keyword with the -policy option to set a policy on the current design only if the design does not already have a policy set.\n -strategy : Specifies the strategy to apply for a check.\n Note: -strategy is not applicable for the hierarchical checks.\n -references : Specifies the policy and strategy for reference subdesigns."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Mapping Sequential Elements Exactly as Described in RTL"}, {"role": "assistant", "content": "To specify that the tool maps sequential elements exactly as described in the RTL, set the compile.seqmap.exact_map application option to true.\n When this feature is enabled, the tool disables mapping to sequential library cells with inverted outputs or unused ports."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Supporting RedHawk-SC Customized Python Script Files"}, {"role": "assistant", "content": "common.power_integrity -value true clock_opt -from final_opto The following example uses a customized python script for concurrent clock and data optimization on a multicorner and multimode design on a grid system.\n 884 Specifying Ideal Voltage Sources as Taps Feedback #Required.\n Specify the below options to enable MCMM-based optimization.\n set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true set_app_options -name rail.generate_file_type -value python #Use user-defined test_def_files for DEF variable to match #with customized python set_app_options -name rail.generate_file_variables \\ -value {DEF test_def_files } create_rail_scenario -name func.ss_125c -scenario func.ss_125c set_rail_scenario -name func.ss_125c -voltage_drop dynamic create_rail_scenario -name func.ff_125c_ -scenario func.ff_125c set_rail_scenario -name func.ff_125c \\ -generate_file {PLOC DEF SPEF TWF LEF} \\ -custom_script_file./customized.py set_host_options -submit_protocol sge \\ -submit_command {qsub -V -notify -b y -cwd -j y \\ -P bnormal -l mfree=16G} # Enable IR-driven CCD analysis before running route_opt set_app_options -name opt.common.power_integrity -value true route_opt See Also Specifying RedHawk and RedHawk-SC Working Directories"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reading the Design"}, {"role": "assistant", "content": "Before you read a design, you must create or open the design library associated with the design, as described in Setting Up Libraries The tool can read RTL designs in SystemVerilog, Verilog, or VHDL and gate-level netlists in Verilog format.\n Use the following methods to read designs: Reading RTL Files in SystemVerilog, Verilog, or VHDL Format Reading Designs Using the -autoread Option Reading Designs Using the VCS Command-line Options Reading Verilog Gate-Level Netlist Files Reading Mixed Gate-Level Netlists and RTL Files 98 Reading the Design Feedback By default, when the tool reads the RTL or gate-level netlist files, it creates a block in the current design library and increments its open count.\n The tool determines the top-level module of the block by identifying the module that is not instantiated by any other modules in the specified files and uses the top-level module name as the block name.\n Use the following commands to work with blocks: create_block : Creates a block open_block : Opens an existing block current_block : Sets or reports the current block save_block : Saves a block close_blocks : Closes a block See Also Blocks Working With Design Libraries"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Clock Tree Power Reduction Techniques"}, {"role": "assistant", "content": "You can enable clock tree power reduction techniques by using the cts.compile.power_opt_mode application option as shown in the following table.\n Table 26 Settings for the cts.compile.power_opt_mode Application Option To do this Use this setting Relocate clock-gating cells closer to their drivers to reduce the length of input nets of the clock-gating cells, which have high switching activity gate_relocation Use clustering techniques to improve power low_power_targets 361 Specifying the Clock Tree Synthesis Settings Feedback Table 26 Settings for the cts.compile.power_opt_mode Application Option (Continued) To do this Use this setting Use both clock-gate relocation and clustering techniques to improve power all"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Abstracts for Signal Electromigration Analysis"}, {"role": "assistant", "content": "To create an abstract that can be used for signal electromigration analysis at the top-level, set the abstract.enable_signal_em_analysis application option to true before you run the create_abstract command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Groups"}, {"role": "assistant", "content": "The following topics provide information related to the placement and legalization of relative placement groups: Relative Placement in a Design Containing Obstructions Legalizing Relative Placement Groups in a Placed Design Creating New Relative Placement Groups in a Placed Design"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Checking Relative Placement Groups Before Placement"}, {"role": "assistant", "content": "Before you run placement and optimization, you can check the relative placement constraints for issues that might lead to critical or noncritical failures after placement by using the check_rp_constraints command.\n The following example checks for possible relative placement constraint violation in the group named rp_volt1: fc_shell> check_rp_constraints rp_volt1 ********************************************************************** *** Report : Relative Placement Summary Total number of specified top level relative placement groups: 1 Total number of relative placement groups which may not honor its constraints: 1 ************************************************************************* RP Group: rp_volt1 Warning: The height of relative placement group 'rp_volt1' is more than the height of voltage area or exclusive move bound.\n (RPGP-018) 812 Analyzing Relative Placement Groups Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Fanin-Based Sequential Clock Gating"}, {"role": "assistant", "content": "Sequential clock gating is the process of extracting and propagating enable conditions from upstream or downstream sequential elements in the data path for the purpose of enabling clock gate insertion for additional registers.\n The Fusion Compiler tool supports fanin-based sequential clock gating, in which a register can be gated during a given clock cycle if all the registers in the transitive fanin did not change state in the previous clock cycle.\n To enable this feature, set the comple.clockgate.fanin_sequential application option to true (the default is false ).\n This feature requires the FC-New-Tech-Power license.\n Figure 62 and Figure 63 illustrate the general concept of fanin-based sequential clock gating.\n The circuit in Figure 62 has a register bank R1 whose transitive fanin consists 317 Fanin-Based Sequential Clock Gating Feedback of register bank R0.\n All registers in bank R0 share the same enable condition EN0 and all registers in both register banks are clocked by clock CLK.\n If in one clock cycle the registers in bank R0 are disabled (in other words, enable signal EN0 is 0), those registers do not change their values.\n Therefore, in the next clock cycle, the registers in bank R1 do not change their values and consequently they are candidates for clock gating.\n Figure 62 Before Clock Gating Figure 63 shows the clock-gate implementation.\n Clock gate CG1 is first inserted for register bank R0.\n The tool creates a new register RD1 to generate a delayed version of enable signal EN0.\n The delayed signal drives sequential clock gate SEQCG1 for register bank R1.\n Figure 63 After Clock Gating The Fusion Compiler tool implements several different clock-gating strategies as needed, based on analyzing the circuit.\n For example, if the fanin registers do not all have the same enable signals, the tool looks for common signals upstream from the enable signals and uses those signals as inputs to the inserted delay register.\n Sequential clock gates are inserted by the compile_fusion command.\n During the initial_map stage, the tool analyzes the local hierarchy of the registers and inserts clock gates as needed.\n During the logic_opto stage, the tool performs analysis across hierarchical boundaries and inserts additional clock gates as needed.\n The name of a clock gate inserted as a result of fanin-based sequential clock gating begins with the prefix seq_clock_gate_fi_.\n The rest of the name follows standard clock- 318 Fanin-Based Sequential Clock Gating Feedback gate naming conventions.\n If the tool inserts a delay register as a result of this feature, the register name begins with the prefix reg_seqcg_ followed by standard clock-gate naming conventions (in other words, the most common base name among the gated registers)."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Anchoring Relative Placement Groups"}, {"role": "assistant", "content": "By default, the Fusion Compiler tool can place a relative placement group anywhere within the core area.\n You can control the placement of a top-level relative placement group by anchoring it.\n To anchor a relative placement group, use the set_rp_group_options command with the -x_offset and -y_offset options.\n The offset values are float values, in microns, relative to the lower-left corner in the core area.\n If you specify both the x- and y-coordinates, the group is anchored at that location.\n If you specify only one coordinate, the Fusion Compiler tool determines the placement by maintaining the specified coordinate and sliding the group along the line passing through the unspecified coordinate.\n To specify a corner of relative placement group to anchor it by, use the -anchor_corner option.\n The tool places the relative placement group such that the corner specified by this option is placed on the anchor point specified by the -x_offset and -y_offset options.\n The settings for the -anchor_corner option are as follows, and are shown in Figure 172 bottom_left The anchor point of the relative placement group is set to its bottom-left corner.\n The default is the bottom-left corner.\n bottom_right The anchor point of the relative placement group is set to its bottom-right corner.\n 793 Specifying Options for Relative Placement Groups Feedback top_left The anchor point of the relative placement group is set to its top-left corner.\n top_right The anchor point of the relative placement group is set to its top-right corner.\n rp_location The anchor point of the relative placement group is the element in the relative placement group at the position specified by the -anchor_row and -anchor_column options.\n When you use the -anchor_corner rp_location setting, the position specified with the -anchor_row and -anchor_column options must contain a cell, keepout, or a relative placement hierarchy.\n Figure 172 Bottom-Left, Bottom-Right, Top-Left and Top-Right Anchor Corners Bottom-left anchor corner Bottom-right anchor corner Top-left anchor corner Top-right anchor corner For example, to anchor a relative placement by its bottom let corner at location (100, 100), as shown Figure 173, use the following command: fc_shell> set_rp_group_options misc1 -anchor_corner bottom_left \\ -x_offset 100 -y_offset 100 794 Specifying Options for Relative Placement Groups Feedback Figure 173 Anchored Relative Placement Group I33 I32 I34 misc1 I30 I31 I35 I43 I42 I44 I40 I41 I45 I53 I52 I54 I50 I51 I55 (100,100)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling High-Effort Area Mode"}, {"role": "assistant", "content": "On designs that need further reduction of area, set the compile.flow.high_effort_area application option to true Running high-effort area mode during compile might increase runtime because the tool performs multiple passes of placement and optimization to obtain optimal area results.\n 261 Performing Design Analysis Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Relative Placement Constraint Violations"}, {"role": "assistant", "content": "After you run placement and optimization, use the report_rp_groups command to identify placement issues and relative placement violations.\n You must either specify which relative placement groups to analyze or specify the -all option to analyze all relative placement groups.\n By default, the command reports the following types of relative placement groups: Placed groups that do not have constraint violations Placed groups that have constraint violations that are not critical Failed groups that have constraint violations that are critical Groups that have not yet been placed You can modify the default behavior by using the options described in Table 61 Table 61 The report_rp_groups Command Options To do this Use this option Report information only about the groups that are not placed due to critical relative placement violations -critical Report information only about the groups that are placed but do not meet their relative placement constraints -non_critical Report information only about the groups that have not yet been placed -unplaced 813 Analyzing Relative Placement Groups Feedback Table 61 The report_rp_groups Command Options (Continued) To do this Use this option Report detailed information -verbose You can also run this command before you run placement and optimization and identify the unplaced groups in the design."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Metal Shapes in the Preferred Direction"}, {"role": "assistant", "content": "To insert rectangular metal shapes along the preferred-direction edges of the current block, use the derive_perimeter_constraint_objects command with the -perimeter_objects metal_preferred option.\n When you specify this object type, the command creates one or more rectangular metal shapes parallel to each preferred-direction boundary edge.\n The metal shapes are floating; they are not connected to any logical nets.\n If your technology does not specify a maximum area for these floating shapes, you can insert continuous metal shapes along the preferred-direction boundary edges, as described in Inserting Continuous Metal Shapes Parallel to Preferred-Direction Edges If your technology specifies a maximum area for these floating shapes or you need more flexibility in placing the metal shapes, insert multiple metal shapes, called metal stubs, along the preferred-direction boundary edges, as described in Inserting Metal Stubs Parallel to Preferred-Direction Edges In addition to inserting metal shapes along the preferred-direction edges, you can insert short metal shapes perpendicular to the nonpreferred-direction edges, as described in Inserting Short Metal Shapes Perpendicular to Nonpreferred-Direction Edges 482 Routing Constraints Feedback Inserting Continuous Metal Shapes Parallel to Preferred-Direction Edges To insert continuous rectangular metal shapes along the preferred-direction edges of the current block, use the derive_perimeter_constraint_objects command with the -perimeter_objects metal_preferred option.\n When you specify this option, the command creates a single rectangular metal shape parallel to each preferred-direction boundary edge.\n By default, The metal shapes are inserted only in the top-level block To insert metal shapes in all soft macros in a hierarchical block, use the -hierarchical option.\n The metal shapes are inserted on all routing layers To insert the metal shapes only on specific routing layers, use the -layers option.\n The metal shapes have the default metal width specified for the routing layer in the technology file For information about specifying the default metal width for a layer, see the \"Default Width Rule\" topic in the Synopsys Technology File and Routing Rules Reference Manual The metal shapes abut the nonpreferred-direction edges To specify an offset from the nonpreferred-direction edges, use the -spacing_from_boundary option.\n Use the following format to specify the offset for each layer: {{ layer_name offset_value }...} The offset value must be a positive value.\n The metal shapes are placed on the closest wire track to the preferred-direction edge Figure 101 shows the metal shapes inserted for an L-shaped block on a layer whose preferred direction is horizontal.\n Each metal shape is placed on the closest track to the edge.\n W is the default width for the layer and S is the spacing specified for the layer by the -spacing_from_boundary option.\n 483 Routing Constraints Feedback Figure 101 Continuous Metal Shape Perimeter Constraint Objects Inserting Metal Stubs Parallel to Preferred-Direction Edges To insert metal stubs along the preferred-direction edges of the current block, use the derive_perimeter_constraint_objects command with the -perimeter_objects metal_preferred and -stub options.\n When you specify both of these options, the command creates rectangular metal shapes parallel to each preferred-direction boundary edge based on the parameters you specify with the -stub option.\n Use the following format to specify the shape parameters in microns: offset_value start_value length_value spacing_value By default, The metal shapes are offset from the preferred-direction edge by the value specified in the offset_value argument The offset value is measured from the block edge to the center of the metal shape.\n It can be a positive value, zero, or a negative value.\n The absolute value of a negative value must be greater than the stub width.\n A positive value must be less than half of the smaller of the width or height of the block boundary.\n The first metal shape is offset from the nonpreferred-direction edge by the value specified in the start_value argument The start value must be greater than or equal to 0 and less than the smaller of the width or height of the block boundary.\n For horizontal shapes, the metal shapes start at the left edge.\n For vertical shapes, the metal shapes start at the bottom edge.\n Note: When you use the -stub option, the command uses the specified start_value and ignores the -spacing_from_boundary option.\n 484 Routing Constraints Feedback The metal shapes have the length specified by the length_value argument The length value must be greater than 0 and less than or equal to the smaller of the width or height of the block boundary.\n The metal shapes have the default metal width specified for the routing layer in the technology file For information about specifying the default metal width for a layer, see the \"Default Width Rule\" topic in the Synopsys Technology File and Routing Rules Reference Manual The metal shapes are separated the space specified by the spacing_value argument The spacing value must be greater than or equal to 0.\n The metal shapes are inserted only in the top-level block To insert metal shapes in all soft macros in a hierarchical block, use the -hierarchical option.\n The metal shapes are inserted on all routing layers To insert the metal shapes only on specific routing layers, use the -layers option.\n Figure 102 shows the metal stubs inserted for an L-shaped block on a layer whose preferred direction is horizontal.\n Each metal shape is placed at the specified offset, O, from the horizontal (preferred-direction) edge, where O is measured from the boundary to the center of the shape.\n The first metal stub is placed at the specified offset, S, from the vertical (nonpreferred-direction) edge.\n Each metal shape has a width of W, the default width for the layer and the specified length, L.\n The spacing between metal stubs is the specified spacing, SP.\n Figure 102 Metal Stub Perimeter Constraint Objects SP SP SP SP SP SP SP SP 485 Routing Constraints Feedback Inserting Short Metal Shapes Perpendicular to Nonpreferred-Direction Edges To insert additional short metal shapes in the preferred direction perpendicular to the nonpreferred-direction boundary edges, Specify the length of the metal shapes by using the -short_metal_length option Specify the distance between the metal shapes by using the -metal_spacing option For both of these options, you use the following format to specify the value for each layer: {{ layer_name value }...} Figure 103 shows the short metal shapes inserted for an L-shaped block on a layer whose preferred direction is horizontal.\n Each metal shape has a width of W, which is the default width for the layer, and a length of L, which is the length specified for the layer by the -short_metal_length option.\n The offset from the nonpreferred-direction edge is S, which is the spacing specified for the layer by the -spacing_from_boundary option.\n The distance between short metal shapes is SS, which is specified for the layer by the -metal_spacing option.\n Figure 103 Metal Shape Perimeter Constraint Objects With Additional Short Shapes SS"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Querying Routing Guides"}, {"role": "assistant", "content": "To find routing guides, use the get_routing_guides command.\n For example, to get all the routing guides in your block, use the following command: fc_shell> get_routing_guides * To find the routing guides in a specific location, use the get_objects_by_location -classes routing_guide command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Troubleshooting"}, {"role": "assistant", "content": "merged.\n 1004 Swapping Variant Cell Feedback Table 73 Group Repeater Placement and Insertion Troubleshooting (Continued) Command Error Code Message Troubleshooting Tips place_group_repeat ers ECO-268 Error: The cells in collection (%s) are invalid since they are placed before.\n Apply the command unplace_group_repeaters to unplace them.\n Check if the cells were placed before and added by the add_group_repeat ers command or placed the by place_group_repea ters command.\n add_group_repeaters place_group_repeat ers ECO-269 Error: Unable to check the current reference of cell '%s': %s.\n Check the reported reason and other printed messages for more details.\n Use the appropriate command to check if the current reference of cell is legal or illegal for the reported issue.\n add_group_repeaters place_group_repeat ers ECO-270 Error: Unable to find swappable variant reference for cell '%s': %s.\n Check if the current reference of cell is illegal for the reported issue.\n add_group_repeaters place_group_repeat ers ECO-271 Error: Candidate reference '%s' and reference (%s) of cell (%s) are not in the same variant cell group.\n Check errors for compatible issues between the candidate and current reference of cell.\n Error also occurs if they do not belong to the same variant cell group.\n unplace_group_repeat ers ECO-272 Error: The mixed input cells are not supported, which includes the cells added by add_group_repeaters and the cells placed by place_group_repeaters.\n unplace_group_repeat ers ECO-273 Error: There are no placed cells to be unplaced.\n Please double check the cell status.\n Check if there are placed cells that are not qualified.\n 1005 Fixing Multivoltage Violations Feedback Table 73 Group Repeater Placement and Insertion Troubleshooting (Continued) Command Error Code Message Troubleshooting Tips ECO-274 Warning: You are deleting cell %s with eco_repeater_group_id %d.\n Check if you are trying to delete a cell belonging to a repeater group.\n place_group_repeat ers ECO-275 Error: Failed to traverse cutlines.\n The nets may have too many blockages.\n Check the location to insert cell groups.\n Remove blockages or find cutlines and use the -repeater_group option.\n add_group_repeaters ECO-276 Warning: Unable to find free area for repeater on net (%s) at location (%s) within range {%s}.\n Check if checkerboard snapping service can find free space for a repeater set_repeater_group ECO-277 Warning: You are trying to override cells of repeater group %d.\n Use -override if you have to override cells.\n Check if you are trying to override cells without using the -override option.\n create_repeater_gro ups ECO-278 Error: Get 0 transparent cells from all supernets.\n Check if the input supernets have no transparent cells to group.\n create_repeater_gro ups ECO-279 Error: %s has multiple(%lu) inputs.\n Check if a cell or load has multiple inputs."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock-Gating Enable Condition"}, {"role": "assistant", "content": "The enable condition of a register or clock gate is a combinational function of nets in the design.\n The enable condition of a register represents the states for which a clock signal must be passed to the register.\n The enable condition of a clock gate corresponds to the states for which a clock is passed to the registers in the fanout of the clock gate.\n The tool uses the enable condition of the registers for clock-gate insertion.\n Enable conditions are represented by Boolean expressions for nets.\n For example: module TEST (en1, en2, en3, in, clk, dataout); input en1, en2, en3, clk; input [5:0] in; output [5.0] dataout; reg [5.0] dataout; wire enable; assign enable = (en1 | en3) & en2; always @( posedge clk ) begin if( enable ) dataout <= in; else dataout <= dataout; end endmodule In this example, the enable condition for the register bank dataout_reg* can be expressed as en1 en2 + en3 en2."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Unified Physical Synthesis"}, {"role": "assistant", "content": "The Fusion Compiler tool performs unified physical synthesis.\n The benefits of unified physical synthesis include Reduced runtime Unified physical synthesis streamlines the iterations of placement and optimization, and utilizes the initial placement and buffer trees built during synthesis to achieve the best runtime.\n Improved quality of results (QoR) The unified preroute optimization framework uses consistent costs in optimization algorithms to improve QoR.\n The best technologies, such as logic restructuring, concurrent clock and data optimization, multibit mapping, and advanced legalizer, are shared throughout the preroute flow.\n The Fusion Compiler compilation includes both top-down and bottom-up (hierarchical) compile strategies.\n In a top-down compile, all environment and constraint settings are 212 Performing Unified Physical Synthesis Feedback defined with respect to the top-level design.\n Top-down compile provides a push-button approach and handles interblock dependencies automatically, but it requires that all designs must reside in memory at the same time.\n In a hierarchical compile flow, you start optimization of design subblocks using a top-down approach and then continue incorporating the subblocks into higher-level blocks until the top-level design is complete.\n The following topics describe how perform unified physical synthesis: Using the compile_fusion Command Performing Prechecks Generating Verification Checkpoints During Compilation"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimization"}, {"role": "assistant", "content": "The following topics describe how you can control parasitic estimation during the preroute stage of the design flow: Enabling Global-Route-Layer-Based (GRLB) Preroute Optimization Enabling Route-Driven Estimation (RDE) for Preroute Optimization"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting the Boundary Cell Insertion Requirements"}, {"role": "assistant", "content": "To report the boundary cell insertion requirements specified by the set_boundary_cell_rules command, use the report_boundary_cell_rules command.\n This command reports only the user-specified settings; it does not report any default settings.\n 598 Performing Boundary Cell Insertion Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Saving Relative Placement Information"}, {"role": "assistant", "content": "The relative placement information is automatically saved in the design library database when you save the design by using the save_lib command.\n You can also save the relative placement information to a file that contains Tcl commands that re-creates the relative placement groups, their objects, and their settings.\n To do so, use the write_rp_groups -file_name command.\n You must either specify which relative placement groups to write commands for or specify the -all option to write commands for all relative placement groups.\n By default, the write_rp_groups command writes out commands for creating the specified relative placement groups and to add leaf cells, hierarchical groups, and blockages to these groups.\n The commands for generating subgroups within hierarchical groups are not written.\n You can modify the default behavior by using the options described in Table 62 Table 62 The write_rp_groups Command Options To do this Use this option Write all the relative placement groups within the hierarchy of the relative placement groups.\n If you omit this option, only the top-level group is written and subgroups are not.\n -hierarchical Write only create_rp_group commands to the script.\n -create Write only add_to_rp_group -cells commands to the script.\n -cell Write only add_to_rp_group -rp_group commands to the script.\n -rp_group Write only add_to_rp_group -blockage commands to the script.\n -blockage"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Clock Drivers"}, {"role": "assistant", "content": "Before you insert clock drivers, Specify all clock tree synthesis settings, including clock routing rules Specify that the inserted clock drivers should be aligned with the clock straps of the mesh structure by setting the cts.multisource.enable_clock_driver_snapping application option to true During multisource clock tree synthesis, you can use the create_clock_drivers command for the following: Insert mesh drivers for both regular or structural multisource clock trees.\n Tap drivers for regular multisource clock trees.\n When you insert mesh or tap drivers, Specify the loads to drive by using the -loads option.\n The load can be a net or a set of pins or ports connected to the same net.\n Specify where to add the clock drivers as exact locations by using the -location option.\n Alternatively, you can add the clock drivers in an X by Y grid pattern over the entire core area by using the -boxes option.\n You can limit the X by Y grid pattern to a specific area by using the -boundary option with the -boxes option.\n Specify a list of cells that can be used as clock drivers by using the -lib_cells option.\n You can specify both single-rail and dual-rail library cells.\n Alternatively, you can select the existing driver of the load net as a template for the clock drivers by using the -template option.\n If the template cell you specify is a buffer or inverter, you can also specify different versions of this buffer or inverter as clock drivers by using the -lib_cells option with the -template option.\n When you insert mesh drivers, to specify that the outputs of all the clock drivers must be connected together to drive the mesh net, use the -short_outputs option.\n The following example creates a grid of eight by eight mesh drivers, places them in a regular pattern that covers the full core area, shorts the outputs of the clock drivers and connects to the net named clk_mesh, and transfers preexisting routing shapes and vias from the net named clk to this net: fc_shell> create_clock_drivers -loads [get_nets clk1_mesh] \\ -boxes {8 8} -lib_cells [get_lib_cells my_lib/CKBUF8X] \\ -short_outputs -output_net_name clk_mesh \\ -transfer_wires_from [get_nets clk] 410 Implementing Multisource Clock Trees Feedback The following example creates a grid of five by five tap drivers that are placed within the rectangle bounded at the lower-left by (200, 200) and upper right by (1000, 1000).\n fc_shell> create_clock_drivers -loads [get_nets clkA] -lib_cells [get_lib_cells my_lib/CKBUF8X] \\ -boxes {5 5} -boundary [list {{200 200} {1000 1000}} ] In this example, one of the tap drivers drives all the loads of the original clock net named clkA.\n To distribute the loads among all the clock drivers, you must subsequently perform automated multisource tap assignment by using the synthesize_multisource_clock_taps command, as described in Specifying Tap Assignment Options and Settings You can use the create_clock_drivers to add multiple levels of clock drivers by using the -configuration option and specifying the configuration of drivers at each level.\n The following example inserts three levels of clock drivers.\n The first level consists of one buffer, the second level consists of four inverters in a 2x2 grid, and the third level consists of 16 inverters in a 4x4 grid.\n fc_shell> create_clock_drivers -loads [get_nets clk] \\ -configuration [list \\ [list -level 1 -boxes {1 1} -lib_cells buf32x ] \\ [list -level 2 -boxes {2 2} -lib_cells inv16x ] \\ [list -level 3 -boxes {4 4} -lib_cells inv8x ]] For this example, because there is no bounding box specified at any level, the drivers at each level are evenly distributed in the core area.\n The buffer in the first level is placed at the center of the core area, the four buffers in the next level are placed at the center of the four quadrants of the core area, and so on, resulting in an evenly placed clock drivers that can be routed to form an H-tree structure as shown in Figure 88 Figure 88 Clock Drivers Placed in an H-Tree Structure After it inserts the clock drivers, the tool marks the clock drivers that it inserts as fixed and don't touched.\n The tool avoids overlapping the clock drivers with other fixed cells, blockages, and macros.\n However, the clock drivers can overlap with cells that are not 411 Implementing Multisource Clock Trees Feedback fixed.\n The create_clock_drivers command does not legalize the design.\n To do so, run the legalize_placement command.\n If you run the create_clock_drivers command multiple times, to reduce runtime, run the legalize_placement command one time, after you complete all the create_clock_drivers command runs.\n When routing the H-trees, the tool uses the highest routing layers available, based on the routing rules specified for the clock nets.\n These same layers can contain prerouted nets such as power and ground nets.\n To prevent placing clock drivers under these preroutes, which can cause pin accessibility issues, the create_clock_drivers command creates temporary placement blockages for the preroutes on the same layers it uses for routing.\n After it completes routing, it removes these temporary placement blockages, as shown in the following example output.\n...\n Net: clk; Rule: htree_ndr; Min Layer: M8; Max Layer: M9...\n Information: Using routing H/V layer pair 'M9'/'M8' for net 'clk'.\n (CTS-659)...\n Converting metal shapes in horizontal layer M9 and vertical layer M8 into placement blockages.\n In total 703 placement blockages created.\n...\n Successfully deleted all temporary placement blockages and the cell map.\n If you specify multirow-height cells with the -lib_cell option of the create_clock_drivers command, the tool might not be able to place them due to the temporary placement blockages it creates for the preroutes.\n If so, you can prevent the tool from creating the temporary placement blockages by setting the cts.multisource.enable_pin_accessibility_for_global_clock_trees application option to false To remove clock drivers inserted by the create_clock_drivers command, use the remove_clock_drivers command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I ..."}, {"role": "assistant", "content": "The following example specifies that relative placement cell at column 1, row 2 of the RP1 relative placement group should be anchored at location (100, 100).\n fc_shell> set_rp_group_options RP1 \\ -anchor_corner rp_location -anchor_column 1 -anchor_row 2 \\ -x_offset 100 -y_offset 100 Figure 174 Using an Object Within the Relative Placement Group for Anchoring The relative placement group is anchored by placing the cell at column 1 row 2 at location (100, 100) 795 Specifying Options for Relative Placement Groups Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Assigning Nondefault Routing Rules to Nets"}, {"role": "assistant", "content": "The Fusion Compiler tool provides two commands for assigning nondefault routing rules to nets: set_clock_routing_rules This command assigns nondefault routing rules to clock nets before clock tree synthesis.\n During clock tree synthesis and optimization, the tool propagates the nondefault routing rules to the newly created clock nets.\n set_routing_rule This command assigns nondefault routing rules to signal nets and to clock nets after clock tree synthesis.\n The following topics describe how to assign nondefault routing rules to nets: Assigning Nondefault Routing Rules to Clock Nets Assigning Nondefault Routing Rules to Signal Nets Reporting Nondefault Routing Rule Assignments Assigning Nondefault Routing Rules to Clock Nets To assign a clock routing rule to a clock net, use the -rule option with the set_clock_routing_rules command.\n The specified rule must be a rule that you previously defined with the create_routing_rule command.\n To reset a clock routing rule to the default routing rule, use the -default_rule option.\n To change a clock routing rule, first reset it to the default routing rule and then use the -rule option after resetting the assignment to the default routing rule.\n 506 Routing Constraints Feedback By default, the set_clock_routing_rules command assigns the specified clock routing rule to all clock trees in the block.\n Table 31 shows the options used to restrict the routing rule assignment.\n Table 31 Restricting Clock Routing Rule Assignments To assign a nondefault routing rule to Use this option Specific clock trees -clocks clocks Nets connected to the clock root -net_type root Nets connected to one or more clock sinks -net_type sink Internal nets in the clock tree (all nets except the root and sink nets) -net_type internal Specific clock nets -nets nets Figure 107 shows the root, internal, and sink nets of a clock tree after clock tree synthesis.\n By default, the root-net routing rule is applied to all the single-fanout clock nets starting from the clock root up to the point where the clock tree branches out to a fanout of more than one.\n Internal-net routing rules are applied to the nets from this point until the sink nets.\n Figure 107 Root, Internal, and Sink Clock Net Types Sink nets Internal nets Root nets 200 sinks 200 sinks 200 sinks The following example specifies routing rules for the root, internal, and sink nets: fc_shell> set_clock_routing_rules -rules NDR1 -net_type root fc_shell> set_clock_routing_rules -rules NDR2 -net_type internal fc_shell> set_clock_routing_rules -rules NDR3 -net_type sink 2.\n You can use this option with the -clocks option to further restrict the assignment.\n This option is not valid with the -nets option.\n 507 Routing Constraints Feedback To specify a transitive fanout limit to use when identifying root nets, use the set_clock_tree_options -root_ndr_fanout_limit command.\n For example, to specify that any clock net with a transitive fanout of more than 300 be considered as a root net, use the following command: fc_shell> set_clock_tree_options -root_ndr_fanout_limit 300 Figure 108 shows the root, internal, and sink nets of the same clock tree when a transitive fanout limit of 300 is used for identifying the clock root nets.\n Figure 108 Using a Fanout Limit for Selecting Root Nets Sink nets Internal nets Root nets 200 sinks 200 sinks 200 sinks When calculating the transitive fanout of clock nets for the purpose of identifying root nets, the tool includes only the valid clock sinks; It does not include the ignore pins.\n If a net identified as a root net is less than 10 microns, the tool uses internal-net routing rules for that net.\n Note: Specifying a smaller value with the set_clock_tree_options -root_ndr_fanout_limit command increases the number of clock nets that are assigned the root-net routing rule, which can increase routing congestion.\n During clock tree synthesis and optimization, the tool also honors nondefault routing rules set by using the set_routing_rule command.\n However, the tool does not propagate these routing rules to any new clock nets it creates.\n If a net is assigned more than one nondefault routing rule, the tool uses the following priority to determine the effective routing rule: 1.\n Nondefault routing rule set by the set_routing_rule command 2.\n Net-specific clock routing rule set by the set_clock_routing_rules -nets command 508 Routing Constraints Feedback 3.\n Clock-specific clock routing rule set by the set_clock_routing_rules -clocks command 4.\n Global clock routing rule set by the set_clock_routing_rules command Assigning Nondefault Routing Rules to Signal Nets To assign a nondefault routing rule to a net, use the -rule option with the set_routing_rule command.\n The specified rule must be a rule that you previously defined with the create_routing_rule command.\n You must specify the nets to which to assign the nondefault routing rule.\n You can assign multiple nondefault routing rules to a net.\n To change the routing rule assignment for one or more nets, Use the -default_rule option to reset the nets to the default routing rule.\n To assign different nondefault routing rules to the nets, use the -rule option after resetting the nets to the default routing rule.\n Use the -no_rule option to remove all routing rules from the nets and allow the tool to automatically assign a routing rule to them.\n Use the -clear option to remove all routing rules and net-specific layer constraints from the nets.\n For example, to assign a nondefault routing rule called WideMetal to the CLK net, use the following command: fc_shell> set_routing_rule -rule WideMetal [get_nets CLK] To reset the routing rule for the CLK net to the default routing rule, use the following command: fc_shell> set_routing_rule -default_rule [get_nets CLK] Reporting Nondefault Routing Rule Assignments The Fusion Compiler tool provides commands to report the nondefault routing rules assigned by the set_routing_rule command and the clock routing rules assigned by the set_clock_routing_rules command.\n To report the nondefault routing rules assigned by the set_routing_rule command, use the -of_objects option with the report_routing_rules command.\n fc_shell> report_routing_rules -of_objects [get_nets *] To report the clock routing rule assignments, use the report_clock_routing_rules command.\n This command reports only the routing rules assigned by the set_clock_routing_rules command.\n 509 Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Signoff Analysis"}, {"role": "assistant", "content": "RedHawk Fusion or RedHawk-SC Fusion does not support RedHawk signoff analysis capabilities, such as signal electromigration or inrush current analysis.\n If you have the RedHawk signoff licenses, you can enable the following RedHawk signoff analysis features in the Fusion Compiler environment by using the rail.allow_redhawk_license_checkout application option.\n Signoff analysis features not included in the following list can only be run with the RedHawk standalone tool.\n 924 Writing Analysis and Checking Reports Feedback Dynamic analysis with custom macro models Dynamic analysis with package models Analysis with RTL-level VCD files To perform RedHawk signoff analysis, 1.\n Modify your GSR file or RedHawk run script to include the related configuration settings.\n 2.\n Set the following application option to enable the RedHawk signoff features: fc_shell> set_app_options \\ -name rail.allow_redhawk_license_checkout -value true Setting the rail.allow_redhawk_license_checkout application option to true allows the RedHawk tool to retrieve the related RedHawk licenses for performing signoff features inside the Fusion Compiler tool.\n The default is off 3.\n Run the analyze_rail command with the -extra_gsr_option_file or -redhawk_script_file option to perform the analysis defined in the GSR or RedHawk script file.\n Specify other settings as necessary.\n Note: You cannot display the RedHawk signoff analysis results in the Fusion Compiler GUI.\n 4.\n Proceed to other steps in the analysis flow.\n See Also An Overview for RedHawk Fusion and RedHawk-SC Fusion"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Linking to ETMs at the Top Level"}, {"role": "assistant", "content": "To link to ETMs at the top level, add the ETM libraries to the reference library list before you create the top-level design library, as shown in the following example: fc_shell> lappend nt_ref_lib \"AMS_BLK_ETM.ndm\" fc_shell> create_lib -technology tech.tf -ref_libs $nt_ref_lib TOP An ETM that contains multiple modes is called a moded ETM.\n For a cell instance that links to a moded ETM, you must specify the required mode by using the set_cell_mode command, as shown in the following example: fc_shell> current_mode m1 fc_shell> set_cell_mode m1 U1 For a cell instance that links to a moded ETM, if you do not specify a mode, the tool does not activate the timing arcs, timing checks, generated clocks, and case values.\n To report the cell modes for specific cell instances, use the report_cell_modes command.\n To switch a cell instance from its abstract view to its ETM or vice versa, use the set_reference command.\n The following example switches the UI cell instance from its abstract view to its ETM: fc_shell> set_reference -block AMS_BLK_ETM.ndm:AMS_BLK.timing U1 The following example switches the UI cell instance from its ETM to its abstract view: fc_shell> set_reference -block AMS_BLK.ndm:AMS_BLK.abstract U1 When you switch between ETMs and abstract views, reapply the top-level timing constraints.\n 859 Performing Top-Level Closure With ETMs Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Define a Blockage of a Predefined Category"}, {"role": "assistant", "content": "A category blockage is a special type of partial blockage that controls the placement of a predefined category of cells within the partial blockage.\n To create a category blockage, 1.\n Create the cell category by defining a user attribute for the category by using the define_user_attribute command and applying it to the affected cell references or instances by using the set_attribute command.\n To prevent the cell from being placed in the category blockage, set the attribute to true.\n To allow the cell in the category blockage, set the attribute to false When defining and applying attributes, observe the following rules: A blockage can only be controlled by a single attribute.\n Multiple blockages can be controlled by the same attribute.\n A cell can have multiple attributes, which could impact its placement in multiple category blockages.\n 142 Specifying Physical Constraints for Placement and Legalization Feedback The same attribute can be applied to a reference and an instance.\n If a cell instance and its reference have different attributes, the attribute on the cell instance takes precedence.\n 2.\n Create the category blockage by using the create_placement_blockage command with the -type category -blocked_percentage, and -category options.\n The argument to the -category option is the name of the user attribute.\n The following example defines a blockage that prevents a certain category of cells from being placed within it: define_user_attribute -type boolean \\ -classes lib_cell dr_cells set_attribute [get_lib_cells mylib/dr*] dr_cells true create_placement_blockage -boundary {{4300 2400} {4500 2700}} \\ -type category -blocked_percentage 45 -category dr_cell The following example defines a blockage that allows only a certain category of cells to be placed within it: define_user_attribute -type boolean \\ -classes lib_cell non_iso set_attribute [get_lib_cells mylib/*] non_iso true set_attribute [get_lib_cells mylib/iso*] non_iso false create_placement_blockage -boundary {{4300 2400}{4500 2700}} \\ -type category -blocked_percentage 30 -category non_iso Note: Category blockages are honored during placement, but not during legalization, optimization, or clock tree synthesis."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Antenna Properties"}, {"role": "assistant", "content": "In general, the antenna properties for standard cells and hard macros are defined in their frame views in the reference libraries.\n You can set default values for the antenna properties, which apply to cells that do not have antenna properties defined in the reference libraries.\n route.detail.default_diode_protection Specifies the diode protection value used for standard cell output pins during antenna analysis if the diode protection value is not specified in the e view of the cell.\n route.detail.default_gate_size Specifies the gate size used for standard cell input pins during antenna analysis if the gate size is not specified in the e view of the cell.\n route.detail.default_port_external_antenna_area Specifies the antenna area used for ports (top-level pins) during antenna analysis if the antenna area is not specified in the e view of the cell.\n route.detail.default_port_external_gate_size Specifies the gate size used for ports (top-level pins) during antenna analysis if the gate size is not specified in the e view of the cell.\n route.detail.macro_pin_antenna_mode Specifies how macro cell pins are treated for antenna considerations.\n 616 Finding and Fixing Antenna Violations Feedback route.detail.port_antenna_mode Specifies how the ports (top-level pins) are treated for antenna considerations.\n If you are using a hierarchical flow and create a block abstraction for a block, you must use the derive_hier_antenna_property command to extract the antenna information from the block to use at the next level of hierarchy.\n Note: If the hierarchical antenna properties are not defined for all layers for a macro, Zroute treats the data as incomplete, skips antenna analysis, and issues a ZRT-311 warning message.\n If you get this error message, see SolvNet article 027178, \"Debugging the ZRT-311 Message.\" See Also Annotating Antenna Properties on Hard Macro Cells"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Marking Clock Trees as Synthesized"}, {"role": "assistant", "content": "To prevent the Fusion Compiler tool from modifying them, you can mark existing clock trees in your design as synthesized clock tree by using the mark_clock_trees command as shown in Table 27 Table 27 Using the mark_clock_trees Command To do this Use this option Mark only the clock trees of specific clocks By default, the command marks all clocks defined by the create_clock and create_generated_clock commands in all modes of all active scenarios -clocks clock_list Mark the clock tree as synthesized This is the default behavior -synthesized Remove the synthesized attribute settings from the clock trees -clear Apply the dont_touch attribute setting on the clock trees -dont_touch Remove the dont_touch attribute settings from the clock trees -clear -dont_touch Propagate the nondefault clock routing rules specified by the set_clock_routing_rules command -routing_rules Propagate the clock cell spacing rules specified by the set_clock_cell_spacing command -clock_cell_spacing Mark the clock sinks as fixed -fix_sinks Freeze the routing of the clock nets -freeze_routing The tool traverses the clock trees and marks the clock trees as specified.\n Clock tree traversal continues until it finds an exception pin or a default sink pin."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Formal Verification"}, {"role": "assistant", "content": "The Formality tool uses formal techniques to prove or disprove the functional equivalence of two designs.\n It performs RTL-to-RTL, RTL-to-gate, and gate-to-gate verifications.\n Functional equivalence checking does not take into account static timing verification.\n The 34 Place and Route Design Flow Overview Feedback following figure shows an overview of the design flow from the Fusion Compiler tool to the Formality tool: Synthesis RTL/ netlist Ref.\n lib (NDM) Tech.\n data TLU+ files UPF files DEF/Tcl (Optional) SDC files (Optional) SVF files Design (NDM) Verilog UPF files Formality"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Resizing Cells"}, {"role": "assistant", "content": "You can resize a cell by using the size_cell command, as shown in the following example: fc_shell> size_cell U21 -lib_cell AND2X4 If you enable the freeze silicon mode by setting the design.eco_freeze_silicon_mode application option to true, by default, the size_cell command checks if a compatible 962 Adding Buffers on Nets Feedback spare cell is available within a distance of five times the unit site height before sizing the cell.\n If a compatible spare cell is not available, the tool does not size the cell.\n To control this distance, use the -max_distance_to_spare_cell option.\n To disable this feature, use the -not_spare_cell_aware option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Calculating the Maximum Antenna Ratio"}, {"role": "assistant", "content": "To control the method used to calculate the maximum allowable antenna ratio, you must specify the following information: How much protection the diodes provide (the diode protection mode) To specify the diode protection mode, use the -diode_mode option with the define_antenna_rule command, as described in Setting the Diode Protection Mode This is a required option of the define_antenna_rule command.\n How to perform antenna ratio calculation with diode protection (the diode ratio vector) To specify the diode ratio vector, use the -diode_ratio option with the define_antenna_layer_rule command, as described in Specifying the Diode Ratio Vector.\n This is a required option of the define_antenna_layer_rule command.\n 601 Finding and Fixing Antenna Violations Feedback Setting the Diode Protection Mode The diode protection mode specifies how much protection the diodes provide.\n Advanced technology designs often use cells and macros with different gate oxide thicknesses, which affect the antenna rule calculations.\n The Fusion Compiler tool uses gate classes to represent the various gate oxide thicknesses.\n The tool supports up to four gate oxide thicknesses: gate class 0, gate class 1, gate class 2, and gate class 3.\n If a cell pin does not have gate class data, it is treated as gate class 0.\n The Fusion Compiler tool supports 18 diode protection modes, most of which support only a single gate oxide thickness.\n For advanced technology designs that use cells and macros with different gate oxide thicknesses, you must use one of the diode protection modes that support multiple gate oxide thicknesses: 14, 16, and 18.\n To specify the diode protection mode, use the -diode_mode option with the define_antenna_rule command.\n This is a required option of the define_antenna_rule command.\n Table 35 defines how each of the diode protection mode settings affect the maximum antenna ratio for a net.\n The diode protection mode also affects the computation of the maximum antenna ratio for individual diodes.\n The antenna ratio calculation formulas for diodes are shown in Table 37 ; these formulas use the values in the diode ratio vector specified in the -diode_ratio option of the define_antenna_layer_rule command, as described in Specifying the Diode Ratio Vector Table 35 Diode Protection Mode Settings Diode protection mode Definition The diodes do not provide any protection.\n The diodes provide unlimited protection.\n In this mode, the highest metal layer is not checked for antenna violations because the input-to-output connection is completed when the highest metal layer is formed.\n Diode protection is limited; if more than one diode is connected, the largest value of the maximum antenna ratio for all diodes is used.\n Diode protection is limited; if more than one diode is connected, the sum of the maximum antenna ratios for all diodes is used.\n Diode protection is limited; if more than one diode is connected, the sum of the diode-protection values for all diodes is used to compute the maximum antenna ratio.\n Diode protection is limited; the maximum diode-protection value for all diodes is used to calculate the equivalent gate area.\n 602 Finding and Fixing Antenna Violations Feedback Table 35 Diode Protection Mode Settings (Continued) Diode protection mode Definition Diode protection is limited; the sum of the diode-protection values for all diodes is used to calculate the equivalent gate area.\n Diode protection is limited; the maximum diode-protection value for all diodes is used to calculate the equivalent metal area.\n Diode protection is limited; the sum of the diode-protection values for all diodes is used to calculate the equivalent metal area.\n Diode protection is limited; scaling is based on maximum diode protection.\n 10 Diode protection is limited; scaling is based on total diode protection.\n 11 Diode protection is limited; scaling is based on maximum diode protection.\n 12 Diode protection is limited; scaling is based on total diode protection.\n 13 Obsolete.\n 14 Diode protection is limited; two separate calculation formulas.\n Supports gate classes.\n 15 Internal use only.\n 16 Diode protection is limited; if more than one diode is connected, the sum of the diode-protection values for all diodes is used to compute the maximum antenna ratio.\n Supports gate classes.\n 17 Diode protection is limited; the sum of the diode-protection values for all diodes is used to calculate the equivalent gate area.\n The gate area calculation is done separately for the input and output pins.\n 18 Diode protection is limited; if more than one diode is connected, the sum of the diode-protection values for all diodes is used to compute the maximum antenna ratio.\n Supports gate classes and calculation depends on whether the pin is connected to a diode.\n Specifying the Diode Ratio Vector The diode ratio vector specifies the values used to calculate the maximum antenna ratio.\n To specify the diode ratio vector, use the -diode_ratio option with the define_antenna_layer_rule command.\n If you do not specify a diode ratio, the tool uses {0 0 1 0 0}.\n The actual usage of the diode ratio vector depends on the diode mode that was specified in the define_antenna_rule -diode_mode option.\n 603 Finding and Fixing Antenna Violations Feedback Table 36 shows the format of the diode ratio vector for the various diode modes.\n Table 37 shows how the vector values are used to calculate the maximum antenna ratio for each diode mode.\n In this table, dp represents the diode protection value specified for an output pin.\n For information about specifying this value, see Specifying Antenna Properties layerMaxRatio represents the maximum antenna ratio for the layer, as specified by the -ratio option of the define_antenna_layer_rule command or one the -metal_ratio or -cut_ratio option of the define_antenna_rule command if the layer-specific value is not defined.\n For examples of the maximum antenna ratio calculations, see Example for Diode Modes 2, 3, and 4 Example for Diode Modes 5 and 6 Example for Diode Modes 7 and 8 Example for Diode Mode 14 With Multiple Gate Oxide Thicknesses Table 36 Diode Ratio Vector Formats Diode modes Format 2-10, 17 v0 v1 v2 v3 v4 ]} The v4 value represents the upper limit of the diode protection and is optional.\n If you do not specify the v4 value, it is assumed to be 0, which means there is no upper limit.\n 11, 12 {{ v0 v1 v2 v3 v4 ]}{ s0 s1 s2 s2 s4 s5 }} The second vector, s0 s1 s2 s3 s4 s5}, specifies scaling values.\n 14 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 You specify one 10-value vector for each of the four gate classes.\n 16 v0 v1 v2 v3 v4 v5 v6 v7 v0 v1 v2 v3 v4 v5 v6 v7 v0 v1 v2 v3 v4 v5 v6 v7 v0 v1 v2 v3 v4 v5 v6 v7 You specify one 8-value vector for each of the four gate classes.\n 18 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 You specify one 12-value vector for each of the four gate classes.\n 604 Finding and Fixing Antenna Violations Feedback Table 37 Antenna Ratio Calculation Based on Diode Mode Diode mode Calculation 0, 1 Not used 2, 3, 4 If dp v0 and v4 <>0, antenna_ratio = min ((( dp v1 ) * v2 v3 ), v4 If dp v0 and v4 =0, antenna_ratio = ( dp v1 ) * v2 v3 If dp <= v0 antenna_ratio = layerMaxRatio antenna_ratio = metal_area / (gate_area + equi_gate_area) If max_diode_protection> v0 and v4 <>0, equi_gate_area = min (((max_diode_protection + v1 ) * v2 v3 ), v4 If max_diode_protection> v0 and v4 =0, equi_gate_area = (max_diode_protection + v1 ) * v2 v3 If max_diode_protection<= v0 equi_gate_area = 0 antenna_ratio = metal_area / (gate_area + equi_gate_area) If total_diode_protection> v0 and v4 <>"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Guard Bands"}, {"role": "assistant", "content": "Guard bands define hard keepout margins surrounding the voltage areas in which no cells, including level shifters and isolation cells, can be placed.\n The guard bands guarantee that the cells in different voltage areas are separated so that power planning does not introduce shorts.\n By default, voltage areas do not have guard bands.\n To define guard bands, use the -guard_band option with the create_voltage_area or create_voltage_area_shape command to specify the horizontal and vertical guard band width for each shape specified in the -region option.\n The horizontal guard band width applies to all vertical edges of the voltage area, while the vertical guard band width applies to all horizontal edges of the voltage area.\n Note: If you also use the -merge_regions option, you must specify the guard band widths for each disjoint shape after merging.\n You would typically use this option only when all the shapes to be merged are abutted or overlapping and therefore merge into a single shape.\n The effective boundary of a voltage area shape includes its guard band; however, the effective placeable area of the shape does not.\n 124 Setting Up Multivoltage Designs Feedback For example, Figure 16 shows the guard band around the PD1 voltage area that is defined by the following command: fc_shell> create_voltage_area -power_domains PD1 \\ -region {{0 0} {30 0} {30 10} {40 10} {40 30} {20 30} {20 25} {0 25}} \\ -guard_band { {3 1} } Figure 16 Voltage Area Guard Band To determine the effective guard bands for abutting or overlapping shapes associated with the same voltage area, the tool merges the shapes as described in Merging Voltage Area Shapes and then applies the guard bands defined for the top shape to the merged shape.\n For example, assume that you use the following command to define guard bands for the voltage area shapes shown on the right side of Figure 14 fc_shell> create_voltage_area -power_domains {PD1} \\ -region { {{0 0} {10 10}} {{10 0} {30 10}} {{15 5} {35 15}} } \\ -guard_band { {1 1} {3 3} {3 1} } {PD1} In this case, the effective guard band is the same as the guard band shown in Figure 16 which is the guard band defined for the merged shape.\n To determine the effective placement areas and guard bands for overlapping shapes associated with different voltage areas, the tool uses the effective boundaries to resolve the shapes as described in Resolving Overlapping Voltage Areas.\n The top shape retains it placement area and guard band; the effective placement area and guard bands of lower shapes does not include the overlapping region.\n Note that if abutting shapes have guard bands, they are no longer abutting, but overlapping, due to the effective boundary that includes the guard bands.\n For example, assume that you use the following commands to define guard bands for the voltage areas shown in Figure 15 fc_shell> create_voltage_area -power_domains PD1 \\ -region {{0 0} {30 30}} -guard_band { {2 2} } {PD1} fc_shell> create_voltage_area -power_domains PD2 \\ -region {{10 10} {20 20}} -guard_band { {2 2} } {PD2} 125 Setting Up Multivoltage Designs Feedback In this case, the effective placement area of PD1 is reduced by the effective boundary of PD2, which includes its guard band, as shown in Figure 17 Figure 17 Effective Boundaries of Overlapping Voltage Areas"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Mapping and Optimization"}, {"role": "assistant", "content": "The following topics describe how you can customize and control the mapping and optimization that is performed during the initial_map logic_opto, and initial_drc stages of the compile_fusion command: Ungrouping or Preserving Hierarchies During Optimization Controlling Boundary Optimization Controlling Datapath Optimization Controlling MUX Optimization Controlling Sequential Mapping Controlling Register Replication Controlling Register Merging 217 Controlling Mapping and Optimization Feedback Selectively Removing or Preserving Constant and Unloaded Registers Reporting Cross-Probing Information for Optimized Registers Controlling High-Fanout-Net Synthesis"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Running Commands in Parallel on Your Local Host"}, {"role": "assistant", "content": "You can improve runtime by running checking and reporting commands in parallel on your local host.\n You can run the commands either in the background (with the redirect -bg command) or in the foreground (with the parallel_execute command).\n These techniques do not require the use of additional licenses beyond the licenses required for the parent run.\n They also do not require you to use or configure distributed processing.\n When you use these techniques, consider the following guidelines: To reduce runtime and memory usage, run the update_timing command before running the commands in parallel; otherwise, each command that requires updated timing runs the update_timing command independently.\n To pass variables from a child process to the parent process, you must write the contents of the variables to a file during the child process, and then read that file in the parent process.\n See Also Running Commands in the Background Running Commands in Parallel"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting up Transparent Hierarchy Optimization"}, {"role": "assistant", "content": "To perform THO, you need to have design views.\n You might be linking to abstract views at the top.\n Use the instructions in the Changing the Block From Abstract to Design View section to switch the blocks you want to optimize to design views.\n Perform the following steps to set up THO: 1.\n To perform THO after block-level compile_fusion, you must propagate the CCD useful skew balancing offsets and latency offsets for integrated clock gating cells to the top-level timing context using the following commands: fc_shell> promote_clock_data -auto_clock all -latency_offset fc_shell> promote_clock_data -auto_clock all -balance_points 2.\n To enable and perform THO on the blocks, ensure that the blocks you want to optimize with THO are enabled for editing: fc_shell> set_editability -blocks {list of blocks} -value true 3.\n To verify block editability, use the following command: fc_shell> report_editability -blocks [get_blocks -hierarchical] 4.\n During THO, operations such as congestion updates and route-driven estimation (RDE) calculations inside subblocks as well as ECO-routing can be run using distributed processing.\n Use the following commands to perform the setup.\n You must specify your own queue parameters such as the qsub parameters as shown in the following example: Note: If host options are not specified, the tool runs the operations for the subblocks serially in the main process.\n fc_shell> set_host_options -name for_tho -num_processes 4 -max_cores 16 -submit_command [list qsub -P queue -pe mt 16 -l mem_free=100G -cwd fc_shell> set_hierarchy_options -host_option for_tho -blocks {list of blocks} 5.\n To enable THO, use the init_hier_optimization command.\n Depending on the stage, you must use different options as shown in the following sections."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Postroute Shielding"}, {"role": "assistant", "content": "To perform postroute shielding, you use the same command, create_shields, that is used for preroute shielding.\n If you want to use the default spacings and widths from the technology file for postroute shielding, you do not need to define and assign nondefault routing rules.\n If you specify the nets to be shielded by using the -nets option, the create_shields command shields these nets with the default spacing and widths.\n Postroute shielding should introduce few to no DRC violations.\n If DRC violations are created during shielding, the create_shields command triggers five detail routing iterations to fix them.\n If this does not fix the DRC violations, you can fix the remaining violations by running incremental detail routing with the route_detail -incremental true command.\n It is possible that postroute shielding might break some tie-off connections during the shield trimming process.\n In this case, use the route_eco command instead of the route_detail command to rebuild the tie-off connections and to fix the DRC violations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Via Ladder Rules"}, {"role": "assistant", "content": "A via ladder rule defines the number of rows and the number of cuts in each row for each layer in a via ladder.\n Via ladder rules can be defined in the technology file or by using the create_via_rule command.\n For example, each of the following methods creates an identical via ladder rule: Define the rule in the technology file.\n ViaRule \"VL1\" { cutLayerNameTblSize = 2 cutLayerNameTbl = (VIA1, VIA2) # via layer names cutNameTbl = (CUT1A, CUT2A) # cut names numCutRowsTbl = (2, 2) # rows in ladder numCutsPerRowTbl = (2, 2) # columns in ladder upperMetalMinLengthTbl = (L1, L2) # minimum length rule cutXMinSpacingTbl = (X1, X2) # X-direction spacing cutYMinSpacingTbl = (Y1, Y2) # Y-direction spacing maxNumStaggerTracksTbl = (S1, S2) # maximum staggering forHighPerformance = 0 447 Inserting Via Ladders Feedback forElectromigration = 1 For details about defining via ladder rules in the technology file, see the \"Via Ladder Rule\" topic in the Synopsys Technology File and Routing Rules Reference Manual Define the rule on the command line by using the create_via_rule command with a detailed specification and then specifying additional details by setting its attributes.\n fc_shell> create_via_rule -name VL1 -cut_layer_names {VIA1 VIA2} \\ -cut_names {CUT1A CUT2A} -cut_rows {2 2} -cuts_per_row {2 2} fc_shell> set_attribute [get_via_rules VL1] \\ upper_metal_min_length_table {L1 L2} fc_shell> set_attribute [get_via_rules VL1] \\ cut_x_min_spacing_table {X1 X2} fc_shell> set_attribute [get_via_rules VL1] \\ cut_y_min_spacing_table {Y1 Y2} fc_shell> set_attribute [get_via_rules VL1] \\ max_num_stagger_tracks_table {S1 S2} fc_shell> set_attribute [get_via_rules VL1] \\ for_high_performance false fc_shell> set_attribute [get_via_rules VL1] \\ for_electro_migration true Define the rule on the command line by creating an empty via rule with the create_via_rule command and then specifying the details by setting its attributes.\n fc_shell> create_via_rule -name VL1 fc_shell> set_attribute [get_via_rules VL1] \\ cut_layer_name_table_size 2 fc_shell> set_attribute [get_via_rules VL1] \\ cut_layer_name_table {via1 via2} fc_shell> set_attribute [get_via_rules VL1] \\ cut_name_table {CUT1A CUT2A} fc_shell> set_attribute [get_via_rules VL1] \\ num_cuts_per_row_table {2 2} fc_shell> set_attribute [get_via_rules VL1] num_cut_rows_table {2 2} fc_shell> set_attribute [get_via_rules VL1] \\ upper_metal_min_length_table {L1 L2} fc_shell> set_attribute [get_via_rules VL1] \\ cut_x_min_spacing_table {X1 X2} fc_shell> set_attribute [get_via_rules VL1] \\ cut_y_min_spacing_table {Y1 Y2} fc_shell> set_attribute [get_via_rules VL1] \\ max_num_stagger_tracks_table {S1 S2} fc_shell> set_attribute [get_via_rules VL1] \\ for_high_performance false fc_shell> set_attribute [get_via_rules VL1] \\ for_electro_migration true 448 Inserting Via Ladders Feedback The tool treats the via rules the same, regardless of the method used to create them.\n You can perform the following tasks for via rules: Create a collection of via rules by using the get_via_rules command Remove via rules by using the remove_via_rules command Display detailed information about the via rules by using the report_via_rules command Set or query via rule attributes To see the attributes supported on via rule objects, use the list_attributes -application -class via_rule command.\n Save the via rules in a technology file by using the write_tech_file command See Also Generating Via Ladder Rules for Electromigration Via Ladders"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Using Routing Guides to Encourage River Routing"}, {"role": "assistant", "content": "River routing is a special routing topology that tries to minimize the space taken by the router by compressing the routes to follow a particular contour.\n River routing is useful if there are tight routing channels or you need to minimize the space taken by routing.\n You can use a routing guide to encourage river routing within the routing guide boundary.\n To create this type of routing guide, use the -river_routing option with the create_routing_guide command.\n You must also use the -layers option to specify the affected layers.\n 478 Routing Constraints Feedback For example, to encourage river routing on the M2 layer within the rectangle with its lower- left corner at (0, 0) and its upper-right corner at (100, 100), use the following command: fc_shell> create_routing_guide -boundary {{0.0 0.0} {100.0 100.0}} \\ -river_routing -layers {M2}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Excluding Specific Scenarios"}, {"role": "assistant", "content": "To exclude a specific scenarios from concurrent clock and data optimization, use the ccd.ignore_scenarios application option and specify the name of the scenarios you want to ignore.\n For example, to ignore the scenario named scnB, use the following command: fc_shell> set_app_options -name ccd.ignore_scenarios \\ -value {scnB}} This setting affects concurrent clock and data optimization performed during the place_opt clock_opt, and route_opt commands."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling Improved Buffering for Multivoltage Nets"}, {"role": "assistant", "content": "Multivoltage nets are nets that logically or physically cross over more than one voltage area.\n You can enable the use of improved buffering techniques for fixing logical DRC violations on such nets during preroute optimization by setting the opt.buffering.enable_hierarchy_mapping application option to true This application option affects the compile_fusion and clock_opt commands.\n Enabling this feature reduces the number of buffers used to fix logical DRC violations.\n However, it can slightly increase the total negative slack or number of hold violations."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reducing Electromigration"}, {"role": "assistant", "content": "Clock cells consume more power than cells that are not in the clock network.\n Clock cells that are clustered together in a small area increase the current densities for the power and ground rails, which increases the potential for electromigration problems.\n One way to avoid the problem is to set spacing requirements between clock cells to prevent local clumping of the clock cells along a standard cell power rail between the perpendicular straps.\n To use this method to reduce electromigration in the block, 1.\n Define clock cell spacing rules for the inverters, buffers, and integrated clock-gating cells in the clock network by using the set_clock_cell_spacing command, as described in Defining Clock Cell Spacing Rules 2.\n Perform clock tree synthesis by using the synthesize_clock_trees command, as described in Performing Standalone Clock Trees Synthesis, or the clock_opt command, as described in Synthesizing, Optimizing, and Routing Clock Trees With the clock_opt Command Note: The clock cell spacing rules are also honored by the balance_clock_groups command.\n For information about using this command, see Balancing Skew Between Different Clock Trees 362 Specifying the Clock Tree Synthesis Settings Feedback 3.\n Check clock cell spacing rule violations by using the check_legality -verbose command.\n You should not see any violations if you set the appropriate clock cell spacing constraints."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Calculating the Antenna Ratio for a Pin"}, {"role": "assistant", "content": "The tool supports several ways to calculate the antenna ratio (antenna-area/gate-area).\n You control this calculation by specifying the following information: How the antenna area is calculated (the antenna area mode) Which metal segments are considered for the calculation (the antenna recognition mode) To specify these modes, use the -mode option with the define_antenna_rule and define_antenna_layer_rule commands, as described in Setting the Antenna Mode This is a required option for both of these commands.\n 612 Finding and Fixing Antenna Violations Feedback Setting the Antenna Mode The antenna mode controls the antenna ratio calculation by determining How the antenna area is calculated (the antenna area mode) The tool supports the following area calculation modes: Surface area, which is calculated as W x L Sidewall area, which is calculated as (W + L) x 2 x thickness Note: If you use sidewall area calculation, you must define the metal thickness by specifying the unitMinThickness unitNomThickness, and unitMaxThickness attributes in each Layer section of the technology file.\n Which metal segments are considered for the calculation (the antenna recognition mode) To tool supports the following antenna recognition modes: Single-layer mode In single-layer mode, the tool considers only the metal segments on the current layer; the metal segments on all lower layers are ignored.\n This mode allows the best routability.\n In this mode, the antenna ratio is calculated as antenna_ratio = connected metal area of the layer / total gate area Accumulated-ratio mode In accumulated-ratio mode, the tool considers the metal segments on the current layer and the lower-layer segments connected to the input pins.\n In this mode, the antenna ratio is calculated as antenna_ratio = accumulation of the single-layer mode ratios of the current layer and layers below Accumulated-area mode In accumulated-area mode, the tool considers the metal segments on the current and lower layers.\n In this mode, the antenna ratio is calculated as antenna_ratio = connected metal area of the current and lower layers/ total gate area For a detailed example of the antenna recognition modes, see Antenna Recognition Mode Example 613 Finding and Fixing Antenna Violations Feedback The Fusion Compiler tool supports six antenna modes, which are described in Table 39 To specify the antenna mode, use the -mode option with the define_antenna_rule and define_antenna_layer_rule commands.\n This is a required option for both commands.\n Table 39 Antenna Mode Settings Antenna mode value Area calculation mode Antenna recognition mode Surface Single-layer Surface Accumulated-ratio Surface Accumulated-area Sidewall Single-layer Sidewall Accumulated-ratio Sidewall Accumulated-area Antenna Recognition Mode Example Figure 125 shows a layout example with a lateral view, which is used to explain the antenna recognition modes.\n Table 40 shows the antenna ratios for each antenna recognition mode for this layout example.\n Figure 125 Layout Example for Antenna Recognition Modes 614 Finding and Fixing Antenna Violations Feedback Table 40 Antenna Recognition Modes and Ratios Considered segments Antenna ratio Single-layer mode M1 ratios Gate1: M1b / Gate1 Gate2: M1c / Gate2 Gate3: M1d / Gate3 M2 ratios Gate1: M2b / Gate1 Gate2: M2d / Gate2 Gate3: M2e / Gate3 M3 ratios Gate1, 2: (M3b + M3c) / (Gate1 + Gate2) Gate3: M3d / Gate3 M4 ratios Gate1, 2, 3: (M4a + M4b) / (Gate1 + Gate2 + Gate3) Accumulated-ratio mode M1 ratios Gate1: M1b / Gate1 Gate2: M1c / Gate2 Gate3: M1d / Gate3 M2 ratios Gate1: M1b / Gate1 + M2b / Gate1 Gate2: M1c / Gate2 + M2d / Gate2 Gate3: M1d / Gate3 + M2e / Gate3 M3 ratios Gate1: M1b / Gate1 + M2b / Gate1 + (M3b + M3c) / (Gate1 + Gate2) Gate2: M1c / Gate2 + M2d / Gate2 + (M3b + M3c) / (Gate1 + Gate2) Gate3: M1d / Gate3 + M2e / Gate3 + M3d / Gate3 M4 ratios Gate1: M1b / Gate1 + M2b / Gate1 + (M3b + M3c) / (Gate1 + Gate2) + (M4a + M4b) / (Gate1 + Gate2 + Gate3) Gate2: M1c / Gate2 + M2d / Gate2 + (M3b + M3c) / (Gate1 + Gate2) + (M4a + M4b) / (Gate1 + Gate2 + Gate3) Gate3: M1d / Gate3 + M2e / Gate3 + M3d / Gate3 + (M4a + M4b) / (Gate1 + Gate2 + Gate3) 615 Finding and Fixing Antenna Violations Feedback Table 40 Antenna Recognition Modes and Ratios (Continued) Considered segments Antenna ratio Accumulated-area mode M1 ratios Gate1: M1b / Gate1 Gate2: M1c / Gate2 Gate3: M1d / Gate3 M2 ratios Gate1: (M1b + M2b) / Gate1 Gate2: (M1c + M2d) / Gate2 Gate3: (M1d + M2e) / Gate3 M3 ratios Gate1, 2: (M1b + M1c + M2b + M2c + M2d + M3b + M3c) / (Gate1 + Gate2) Gate3: (M1d + M2e + M3d) / Gate3 M4 ratios Gate1, 2, 3: all metal areas / (Gate1 + Gate2 + Gate3)"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Constraints for Clock Nets"}, {"role": "assistant", "content": "By default, the Fusion Compiler tool uses the default routing rule and any available routing layers to route the clock trees.\n You can specify the minimum and maximum routing layers for clock nets as described in Specifying the Routing Resources.\n These routing layer constraints are used during RC estimation, congestion analysis, and routing.\n 365 Specifying the Clock Tree Synthesis Settings Feedback To reduce the wire delays in the clock trees, you can use wide wires and higher metal layers instead.\n routing rulenondefault, defined Wide wires are represented by nondefault routing rules.\n To use nondefault routing rules on the clock nets, you must first define the routing rules and assign them to the clock nets as described in Using Nondefault Routing Rules"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I final_place Stage"}, {"role": "assistant", "content": "During the final_place stage of compile_fusion, placement can be performed transparently across the top and blocks.\n Placement occurs within the boundaries of the 863 Transparent Hierarchy Optimization Feedback respective blocks, but it is global at the same time, ignoring pin locations to get straight paths.\n Placement can be wire length, timing, and congestion driven.\n THO provides an option to refine pin locations based on global placement.\n Pin locations can be refined for the specified set of blocks during coarse placement steps of the THO.\n 1.\n To refine pin locations and enable pin movement, use the following command: fc_shell> set_hierarchy_options -enable_pin_movement true -blocks {list of blocks} 2.\n To report the settings applied with the set_hierarchy_options command, use the report_hierarchy_options command.\n 3.\n To run the final_place stage with THO, use the following commands: fc_shell> init_hier_optimization -flow pre_route fc_shell> compile_fusion -from final_place -to final_place fc_shell> commit_hier_optimization The init_hier_optimization command issues messages similar to the following message to confirm which blocks are available for optimization: Information: Sub-block u1/a/i1 (Reference: ablock.design) is treated as modifiable.\n (HOPT-001) After global placement, THO calls the place_pins command to create the new pin placement.\n 864 Transparent Hierarchy Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling Clock Latencies, Path Groups, and Boundary Paths"}, {"role": "assistant", "content": "To specify a maximum delayed latency for useful skew computation, set the ccd.max_postpone application option to a specific value, as shown in the following example: fc_shell> set_app_options \\ ccd.max_postpone 50 256 Running Concurrent Clock and Data Optimization Feedback To specify a maximum advanced latency for useful skew computation, set the ccd.max_prepone application option to a specific value, as shown in the following example: fc_shell> set_app_options \\ ccd.max_prepone 100 To omit useful skew computation for specific path groups, specify one or more path groups with the ccd.skip_path_groups application option as follows: fc_shell> set_app_options ccd.skip_path_groups path_group_list To disable concurrent clock and data optimization for boundary timing paths, set the ccd.optimize_boundary_timing application to false, changing it from its default of true.\n All optimization on I/O paths and latencies for boundary registers will not be adjusted to improve register to register timing.\n fc_shell> set_app_options ccd.optimize_boundary_timing false"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Getting Information About Commands"}, {"role": "assistant", "content": "The following online information resources are available while you are using the Fusion Compiler tool: Command help, which is information about an Fusion Compiler command Man pages See Also Viewing Man Pages"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Clock Tree Exceptions"}, {"role": "assistant", "content": "Clock tree exceptions are user-defined changes to the default endpoints (balancing and ignore pins) derived by the tool for a specific clock.\n The Fusion Compiler tool supports the following types of clock tree exceptions: User-defined sink pins These exceptions define sink pins in addition to those derived by the tool for a clock tree.\n For example, you might define a tool-derived ignore pin as a clock sink.\n For information about defining sink pins, see Defining Sink Pins User-defined insertion delay requirements These exceptions specify special insertion delay requirements for a sink pin (either derived or user-specified).\n 344 Defining the Clock Trees Feedback For information about defining insertion delay requirements, see Defining Insertion Delay Requirements User-defined ignore pins These exceptions exclude clock endpoints that were derived as sink pins by the tool.\n For example, you might define an ignore pin to exclude all branches of the clock tree that fan out from some combinational logic or to exclude a tool-derived sink pin.\n For information about defining ignore pins, see Defining Ignore Pins"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling IC Validator Multicore Processing"}, {"role": "assistant", "content": "By default, the IC Validator In-Design commands use a single process to perform design rule checking.\n To reduce the turnaround time for design rule checking, use multicore processing, which includes multithreading, distributing processing, and parallel command execution.\n After you specify how many cores to use on different hosts, the IC Validator tool determines exactly how to take advantage of multithreading and parallel command execution to achieve the fastest runtimes.\n To enable multicore processing, you must define the configuration by using the set_host_options command.\n By default, the configuration applies to all Fusion Compiler commands that support multicore processing.\n To define a configuration that applies only to the IC Validator In-Design commands, use the -target ICV option.\n 661 Preparing to Run IC Validator In-Design Commands Feedback You can enable multicore processing on specific hosts, by using a job scheduler such as the Load Sharing Facility (LSF), or by using a combination of these methods.\n The following topics describe these methods: Running IC Validator on Specific Hosts Running IC Validator Using a Job Scheduler Running IC Validator Using Hybrid Multicore Processing For general information about the set_host_options command, see Enabling Multicore Processing"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Postroute Clock Tree Optimization"}, {"role": "assistant", "content": "When you detail route the clock nets of a block, its clock tree QoR can degrade due to the differences between the clock global routes used during clock tree synthesis and the clock detail routes.\n Clock tree QoR can further degrade when you detail route the signal nets due to coupling capacitance and crosstalk effects.\n You can perform clock tree optimization on a postroute design by using the synthesize_clock_trees -postroute command.\n When you do so, you should specify the type of routing performed on the design by using the -routed_clock_stage option.\n For example, to perform clock tree optimization on a design that has completed clock routing, use the following command: fc_shell> synthesize_clock_trees -postroute \\ -routed_clock_stage detail To perform clock tree optimization on a design that has completed both clock and signal routing, use the following command: fc_shell> synthesize_clock_trees -postroute \\ -routed_clock_stage detail_with_signal_routes Note: When you enable concurrent clock and data optimization, including power or area recovery that uses this technique, the tool does not optimize the clock latency or skew during postroute clock tree optimization; it only fixes the logical DRC violations on the clock network.\n 392 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Clock-Gating Options"}, {"role": "assistant", "content": "Use the set_clock_gating_options command to define the netlist structure of the inserted clock-gating cells.\n The following options are available: Option Description -minimum_bitwidth Specifies the minimum number of accumulated bits that can be gated.\n The default is 3.\n -max_fanout Specifies the maximum number of cells gated by the same clock-gating cell.\n The default is infinite.\n -objects Specifies the list of objects to which the clock-gating options are applied.\n The design objects can be hierarchical instances, power domains, and designs."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Assigning Nondefault Routing Rules to Critical Nets"}, {"role": "assistant", "content": "To improve timing QoR, you can enable the tool to automatically assign nondefault routing rules to nets with critical timing.\n When you enable this feature, the tool Chooses candidate nets based on slack and length Uses timing-driven optimization to assign nondefault routing rules to the nets Optimizes buffering for these nets To enable the feature, follow these steps.\n 1.\n Define nondefault routing rules by using the create_routing_rule command.\n For details, see Defining Nondefault Routing Rules 2.\n Report routing rules by using the report_routing_rules command.\n 3.\n Specify a prioritized list of nondefault routing rules for automatic assignment by using the opt.common.optimize_ndr_user_rule_names application option.\n 4.\n Enable the automatic assignment of nondefault routing rules during optimization by setting the compile.flow.optimize_ndr application option.\n The following script example creates two nondefault routing rules, ndr_1w2s and ndr_2w3s, and automatically assigns these nondefault routing rules to timing-critical nets during optimization: create_routing_rule \"ndr_1w2s\" -multiplier_spacing 2 create_routing_rule \"ndr_2w3s\" -multiplier_spacing 3 -multiplier_width 2 # Enables feature, defines priority set opt.common.optimize_ndr_user_rule_names { ndr_1w2s ndr_2w3s } set compile.flow.optimize_ndr compile_fusion Controlling Nondefault Routing Rule Assignment To specify a critical range for nondefault routing rule for optimization, set the compile.flow.optimize_ndr_critical_range application option to a value between 0 and 1.\n The default is 0.05.\n The specified value, as shown in the following example, is used to calculate the slack range [ *WNS, WNS] where WNS is the worst negative slack.\n Nets in the timing paths that have a slack value within the range are considered for nondefault routing rule assignment.\n fc_shell> set_app_options \\ -name compile.flow.optimize_ndr_critical_range -value 183 Specifying Settings for Preroute Optimization Feedback To set the maximum number of nets considered for automatic nondefault routing rules assignment, set the compile.flow.optimize_ndr_max_nets application option to an integer.\n The default is 2000.\n For example, fc_shell> set_app_options \\ -name compile.flow.optimize_ndr_max_nets -value 5000 When both the compile.flow.optimize_ndr_critical_range and compile.flow.optimize_ndr_max_nets application options are specified, the stricter constraint has priority."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I ECO Fusion Power Integrity Flow"}, {"role": "assistant", "content": "The Fusion Compiler ECO Fusion power integrity flow allows you to use the RedHawk Fusion rail analysis feature to identify power integrity issues and the PrimeTime physically aware ECO capabilities to fix them.\n 955 Manually Instantiating Spare Cells Feedback The Fusion Compiler ECO Fusion power integrity flow consists of the following steps: 1.\n Specify the path for saving the RedHawk Fusion rail analysis results by setting the rail.database application option.\n 2.\n Perform dynamic-vectorless or dynamic-vector-based voltage-drop analysis by using the analyze_rail -voltage_drop dynamic_vcd or analyze_rail -voltage_drop dynamic_vectorless command.\n 3.\n Specify the settings required to run the PrimeTime ECO capabilities within the Fusion Compiler tool by using the set_pt_options command.\n 4.\n Fix the identified power integrity issues by using the eco_opt -type power_integrity command.\n To fix power integrity (voltage drop) violations, the tool downsizes aggressor cells while considering the timing and DRC QoR.\n However, for this optimization to be effective, The aggressor cells should not be timing- or DRC-critical The cell library should have smaller versions of the aggressor cells without dont_use or dont_touch attribute settings.\n The following is an example script for running the ECO Fusion power integrity flow: set_app_options -name rail.database -value RAIL_DATABASE_BASELINE analyze_rail -voltage_drop dynamic_vcd -all_nets \\ -switching_activity {VCD./top.vcd top} set_pt_options -pt_exec /snps_tools/PT/pt_shell eco_opt -type power_integrity"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Setting Application Option"}, {"role": "assistant", "content": "To set application option before using the add group repeaters and place_group_repeaters commands, use the set_app_option -name eco.placement.variant_cell_swapping -value true command.\n Based on the requirement, you can plan the variant cell flow.\n The rules of variant reference swapping differ in various variant cell flows.\n By default, the variant cell support in the eco_change_legal_reference command detects the variant mode and settings automatically.\n The eco_change_legal_reference command checks whether the current reference of the cell is legal or illegal for the placed location.\n If it is illegal, the command attempts to find a legal reference from its variant cell group defined to swap with the illegal one.\n 992 Swapping Variant Cell Feedback To use the variant cell features directly for other cells, use the eco_change_legal_reference command.\n For complicated scenarios, you can switch the variant mode and tune the settings manually.\n Following are the new application options for variant cell support: To set variant mode for different customers and different design flows, use the set_app_options -name eco.placement.variant_cell_group_mode -value command.\n To honor the variant cell groups, which are not sharing timing view, use the set_app_options -name eco.placement.honor_cell_group_not_sharing_timing -value command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Viewing Density Heat Maps in the GUI"}, {"role": "assistant", "content": "After running the signoff_report_metal_density command, you can view heat maps in the GUI for both the minimum density and gradient density reports.\n Note: The signoff_report_metal_density command generates the heat maps only when the signoff.report_metal_density.create_heat_maps application option is set to true To display the minimum density heat map, choose View > Map > ICV Metal Fill Density Figure 151 shows a minimum density heat map.\n In this heat map, each colored tile corresponds in size to the density window step.\n To customize or standardize the density values in the heat map, set the bin range, which is indicated by a red oval in the figure.\n 737 Inserting Metal Fill With IC Validator In-Design Feedback Figure 151 Minimum Density Heat Map To display the density gradient heat map, choose View > Map > ICV Metal Fill Gradient 738 Inserting Metal Fill With IC Validator In-Design Feedback Figure 152 shows a density gradient heat map.\n In this heat map, each colored bar corresponds in size to the gradient window size.\n Figure 152 Density Gradient Heat Map"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Working With Macro Models"}, {"role": "assistant", "content": "Memory and macro cells are used in designs with advanced process technologies to reduce memory usage and improve the rail analysis performance.\n Macro models are supported in both RedHawk Fusion and RedHawk-SC Fusion analysis flows.\n To learn about working with macro models, see the following topics: Generating Macro Models Creating Block Contexts"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Controlling the Tapering Width"}, {"role": "assistant", "content": "By default, the wire is tapered to the default routing width, which is the routing width that is defined for the metal layer in the technology file.\n To taper the wire to the pin width rather than the default routing width, change the route.detail.pin_taper_mode application option to pin_width from its default of default_width before you perform detail routing.\n To enable pin tapering only when required to avoid DRC violations, set the route.detail.use_wide_wire_effort_level application option to either low or high This setting improves the nondefault via rate at a cost of longer runtime.\n You should use this option only when the majority of pins on the nets being routed are accessible with nondefault vias.\n To disable tapering for certain types of pins, set one or more of the following application options to true route.detail.use_wide_wire_to_input_pin route.detail.use_wide_wire_to_output_pin route.detail.use_wide_wire_to_macro_pin route.detail.use_wide_wire_to_pad_pin, and route.detail.use_wide_wire_to_port To disable tapering for all pins, set the -taper_distance option to 0 when you create the nondefault routing rule with the create_routing_rule command."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Library Cells as Repeaters"}, {"role": "assistant", "content": "Use the -lib_cell option to specify a library cell as a repeater.\n This option supports the following additional options: -lib_cell_input specifies the input pin of the library cell to connect, if it has multiple inputs.\n -lib_cell_output specifies the output pin of the library cell to connect, if it has multiple outputs."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Shielding Nets"}, {"role": "assistant", "content": "Zroute shields routed nets net shieldingshielding nets by generating shielding wires that are based on the shielding widths and spacing defined in the shielding rules.\n In addition to shielding nets on the same layer, you also have the option to shield one layer above and one layer below.\n Shielding above or below the layer is called coaxial shielding Figure 116 shows an example of coaxial shielding.\n Coaxial shielding provides even better signal isolation than same-layer shielding, but it uses more routing resources.\n Figure 116 Coaxial Shielding You can perform shielding either before or after signal routing.\n Shielding before signal routing, which is referred to as preroute shielding, provides better shielding coverage but can result in congestion issues during signal routing.\n Preroute shielding is typically used to shield critical clock nets.\n Shielding after signal routing, which is referred to as postroute shielding, has a very minimal impact on routability, but provides less protection to the shielded nets.\n 539 Shielding Nets Feedback Figure 117 shows the Zroute shielding flow, which is described in the topics that follow.\n Figure 117 Zroute Shielding Flow"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Hotspots"}, {"role": "assistant", "content": "The tool saves the generated hotspot data in memory.\n If you want to generate hotspots for other nets in another run, you need to remove the previously generated hotspot data from memory with the remove_hot_spots command before proceeding to another hotspot analysis run.\n For example, if you have run the generate_hot_spots command on the VDD net, you must first remove the hotspot data for the VDD net before generating hotspots for other nets.\n 943 Voltage Hotspot Analysis Feedback See Also Generating Hotspots Reporting Hotspots Voltage Hotspot Analysis Examples"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Optimization Targets at the Preroute Stage"}, {"role": "assistant", "content": "When performing concurrent clock and data optimization using the compile_fusion command, you can give a higher priority to the WNS optimization of Certain path groups by specifying them by using the ccd.targeted_ccd_path_groups application option, as shown in the following example: fc_shell> set_app_options -name ccd.targeted_ccd_path_groups \\ -value {PG1 PG2} If a path group you specify with this application option is also specified as a path group to skip with the ccd.skip_path_groups application option, the path group is skipped during concurrent clock and data optimization.\n 257 Performing Test Insertion and Scan Synthesis Feedback Certain endpoints by specifying a file containing the endpoints by using the ccd.targeted_ccd_end_points_file application option, as shown in the following example: fc_shell> set_app_options \\ -name ccd.targeted_ccd_end_points_file \\ -value endpoint_targets.tcl If you specify both path groups and endpoints, the tool optimizes only the specified endpoints that are in the specified path groups.\n The worst 300 timing paths by setting the ccd.enable_top_wns_optimization application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Analyzing and Fixing Antenna Violations"}, {"role": "assistant", "content": "antena rulescheckingenabling If the design library contains antenna rules, Zroute automatically analyzes and antena violationsenablingfixing fixes antenna violations.\n antena violationsfixingdisablingantena rulescheckingdisabling To disable the analysis and correction of antenna rules during detail routing, set the route.detail.antenna application option to false Just like other design rules, antenna rules are checked and corrected during detail routing.\n This concurrent antenna rule correction architecture reduces total runtime by minimizing the iterations.\n By default, Zroute Checks antenna rules and corrects violations for all clock and signal nets To disable fixing of antenna violations on specific nets, set the route.detail.skip_antenna_fixing_for_nets application option.\n Note that Zroute analyzes the antenna rules and reports the antenna violations on these nets, but does not fix the violations.\n Does not check or correct antenna rules for power and ground nets To check and correct antenna rules for power and ground nets, set the route.detail.check_antenna_on_pg application option to true Starts fixing antenna violations in the second iteration, after initial routing is complete and the basic DRC violations have been fixed To change the iteration in which Zroute starts fixing antenna violations, set the route.detail.antenna_on_iteration application option.\n 617 Finding and Fixing Antenna Violations Feedback Performs layer hopping to fix antenna violations Layer hopping decreases the antenna ratio by splitting a large metal polygon into several upper-level polygons.\n Zroute performs the following types of layer hopping: Breaking the antenna with a higher-level metal segment Zroute uses this technique to fix most antenna violations.\n For antenna violations that happen at metal-N, inserting a small segment of metal-(N+1) close to the gate reduces the ratio between the remaining metal-N, making the ratio much lower.\n This approach is not suitable for fixing top-metal layer antenna violations when the output pin can provide only limited protection because there is no way for the router to break antenna violations at the topmost metal layer.\n Moving down to a lower-level metal Zroute uses this technique to fix only topmost layer antenna violations when output pins provide only limited protection.\n For antenna violations that happen at metal-N, replace part of the metal-N with metal-(N-1 or lower) to reduce the ratio.\n However, splitting the metal layer into many pieces might have a negative impact on RC and timing delay.\n Zroute can also insert diodes to fix antenna violations.\n To enable the insertion of diodes to fix antenna violations, set the route.detail.insert_diodes_during_routing application option to true.\n To force Zroute to fix antenna violations by inserting diodes, disable layer hopping by setting the route.detail.hop_layers_to_fix_antenna application option to false.\n For information about inserting diodes to fix antenna violations, see Inserting Diodes During Detail Routing If both layer hopping and diode insertion are enabled, by default, Zroute first tries to use layer hopping to fix the antenna violation.\n To change the preference to diode insertion, set the route.detail.antenna_fixing_preference application option to use_diodes To delete the redundant diodes that are not needed to fix antenna violations, set the route.detail.delete_redundant_diodes_during_routing application option to true Spare diodes are not deleted as they do not connect to any nets.\n Port protection diodes that are inserted by detail route are not deleted.\n As with other design rule violations, antenna violations are reported at the end of each detail routing iteration.\n For example, DRC-SUMMARY: @@@@@@@ TOTAL VIOLATIONS = 506 @@@@ Total number of instance ports with antenna violations = 1107 antena ruleschecking To check for antenna violations, use the check_routes -antenna true command.\n 618 Finding and Fixing Antenna Violations Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Calculating the Maximum Antenna Ratio"}, {"role": "assistant", "content": "0, equi_gate_area = min (((total_diode_protection + v1 ) * v2 v3 ), v4 If total_diode_protection> v0 and v4 =0, equi_gate_area = (total_diode_protection + v1 ) * v2 v3 If total_diode_protection<= v0 equi_gate_area = 0 antenna_ratio = (metal_area - equi_metal_area) / gate_area If max_diode_protection> v0 and v4 <>0, equi_metal_area = min (((max_diode_protection + v1 ) * v2 v3 ), v4 If max_diode_protection> v0 and v4 =0, equi_metal_area = (max_diode_protection + v1 ) * v2 v3 If max_diode_protection<= v0 equi_metal_area = 0 If equi_metal_area>metal_area, equi_metal_area = metal_area antenna_ratio = (metal_area - equi_metal_area) / gate_area If total_diode_protection> v0 and v4 <>0, equi_metal_area = min (((total_diode_protection + v1 ) * v2 v3 ), v4 If total_diode_protection> v0 and v4 =0, equi_metal_area = (total_diode_protection + v1 ) * v2 v3 If total_diode_protection<= v0 equi_metal_area = 0 If equi_metal_area > metal_area, equi_metal_area = metal_area 605 Finding and Fixing Antenna Violations Feedback Table 37 Antenna Ratio Calculation Based on Diode Mode (Continued) Diode mode Calculation antenna_ratio = scale * metal_area / gate_area If max_diode_protection> v0 scale = max (1 / ((max_diode_protection + v1 ) * v2 v3 ), v4 If max_diode_protection<= v0 scale = 1.0 10 antenna_ratio = scale * metal_area / gate_area If total_diode_protection> v0 scale = max (1 / ((total_diode_protection + v1 ) * v2 v3 ), v4 If total_diode_protection<= v0 scale = 1.0 11 antenna_ratio = scale * metal_area / gate_area If max_diode_protection< v0 scale = s0 If max_diode_protection< v1 scale = s1 If max_diode_protection< v2 scale = s2 If max_diode_protection< v3 scale = s3 If max_diode_protection< v4 scale = s4 If max_diode_protection>= v4 scale = s5 12 antenna_ratio = scale * metal_area / gate_area If total_diode_protection< v0 scale = s0 If total_diode_protection< v1 scale = s1 If total_diode_protection< v2 scale = s2 If total_diode_protection< v3 scale = s3 If total_diode_protection< v4 scale = s4 If total_diode_protection>= v4 scale = s5 13 N/A 606 Finding and Fixing Antenna Violations Feedback Table 37 Antenna Ratio Calculation Based on Diode Mode (Continued) Diode mode Calculation 14 If connected to a diode, (metal or via area) / (gate-area) <= ( dp v1 v2 ) // formula1 and (metal or via area) / ( v5 *gate-area + v6 dp ) <= v7 // formula2 If not connected to a diode, (metal or via area) / (gate-area) <= v3 // formula1 and (metal or via area) / ( v8 * gate-area) <= v9 // formula2 15 N/A 16 If dp v0 and v4 <>0, allowable max-antenna-ratio = min ((( dp v1 ) * v2 v3 ), v4 If dp v0 and v4 =0, allowable max-antenna-ratio = ( dp v1 ) * v2 v3 If dp <= v0 allowable max-antenna-ratio = layerMaxRatio If (gate-area <= v5 ), antenna-ratio = antenna-area/(gate-area + v6 dp else antenna-ratio = antenna-area/ (gate-area + v6 dp v7 17 antenna_ratio = metal_area / (gate_area + equi_gate_area) If total_diode_protection> v0 and v4 <>0, equi_gate_area = min (((total_diode_protection + v1 ) * v2 v3 ), v4 If total_diode_protection> v0 and v4 =0, equi_gate_area = (total_diode_protection + v1 ) * v2 v3 If total_diode_protection<= v0 equi_gate_area = 0 18 If connected to a diode, If dp v0 and v4 <>0, allowable max-antenna-ratio = min ((( dp v1 ) * v2 v3 ), v4 If dp v0 and v4 =0, allowable max-antenna-ratio = ( dp v1 ) * v2 v3 If dp <= v0 allowable max-antenna-ratio = layerMaxRatio If (gate-area <= v5 ), antenna-ratio = antenna-area/(gate-area + v6 dp else antenna-ratio = antenna-area/(gate-area + v6 dp v7 If not connected to a diode, If (gate-area < v8 ), allowable max-antenna-ratio = v9 else allowable-max-antenna-ratio = v10 *(gate-area) v11 antenna-ratio = (antenna-area)/(gate-area) 607 Finding and Fixing Antenna Violations Feedback Example for Diode Modes 2, 3, and 4 Assume that the antenna area is calculated using surface area in single-layer mode (antenna mode 1), the diode ratio vector for the M1 layer is {0.7 0.0 200 2000}, the layerMaxRatio value for the M1 layer is 400, and the following diodes are connected to a single M1 net: diode A with a diode-protection value of 0.5, diode B with a diode-protection value of 1.0, and diode C with a diode-protection value of 1.5.\n In this example, the v4 value is not specified so a value of 0 is used.\n Use the following commands to define the antenna rules for this example: fc_shell> define_antenna_rule -mode 1 -diode_mode diode_mode -metal_ratio 400 -cut_ratio 20 fc_shell> define_antenna_layer_rule -mode 1 -layer \"M1\" \\ -ratio 400 -diode_ratio {0.7 0.0 200 2000} The maximum antenna ratio for each diode is computed by using the formula for the diode mode from Table 37.\n In this case, If dp v0 and v4 <>0, allowable max-antenna-ratio = min ((( dp v1 ) * v2 v3 ), v4 If dp v0 and v4 =0, allowable max-antenna-ratio = ( dp v1 ) * v2 v3 If dp <= v0 allowable max-antenna-ratio = layerMaxRatio Table 38 shows the maximum antenna ratio for each diode calculated using this formula.\n Table 38 Calculation of Maximum Antenna Ratio for Each Diode Diode Protection value Maximum Antenna Ratio 0.5 400 Protection value is less than the v0 value of 0.7, so use maximum antenna ratio of 400.\n 1.0 2200 Protection value is greater than the v0 value of 0.7, so maximum antenna ratio is (1.0+0.0) * 200 + 2000 = 2200.\n 1.5 2300 Protection value is greater than the v0 value of 0.7, so maximum antenna ratio is (1.5+0.0) * 200 + 2000 = 2300.\n 608 Finding and Fixing Antenna Violations Feedback The maximum antenna ratio for the net is computed by using the formula for the diode mode from Table 36 For diode mode 2, the maximum antenna ratio for the net is the largest of the maximum antenna ratio values for the diodes, 2300.\n For diode mode 3, the maximum antenna ratio for the net is the sum of the maximum antenna ratios for the diodes, 400 + 2200 + 2300 = 4900.\n For diode mode 4, the maximum antenna ratio for the net is computed by using the formula from Table 37 using the sum of the diode-protection values of the diodes, (0.5+1.0+1.5) * 200 + 2000 = 2600.\n Example for Diode Modes 5 and 6 Assume that the antenna area is"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Introduction to Physical Datapath With Relative Placement"}, {"role": "assistant", "content": "Relative placement is usually applied to datapaths and registers, but you can apply it to any cell in your design, controlling the exact relative placement topology of gate-level logic groups and defining the circuit layout.\n You can use relative placement to explore QoR benefits, such as shorter wire lengths, reduced congestion, better timing, skew control, fewer vias, better yield, and lower dynamic and leakage power.\n 781 Introduction to Physical Datapath With Relative Placement Feedback The relative placement constraints that you create and annotate implicitly generate a matrix structure of the instances and control the placement of the instances.\n You use the resulting annotated netlist for physical optimization, during which the tool preserves the structure and places it as a single entity or group, as shown in Figure 166 Figure 166 Relative Placement in a Floorplan Relative placement groups can be floating or fixed.\n Obstructions Relative placement cells Macro Relative placement groups Standard cells"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Global Layer Constraints"}, {"role": "assistant", "content": "To remove the global layer constraints, use the remove_ignored_layers command.\n You must specify one or more of the following options: -min_routing_layer This option removes the minimum routing layer setting.\n When you remove the minimum routing layer setting, it also removes the ignored layers for RC estimation and congestion analysis that are below the minimum routing layer.\n -max_routing_layer This option removes the maximum routing layer setting.\n When you remove the maximum routing layer setting, it also removes the ignored layers for RC estimation and congestion analysis that are above the maximum routing layer.\n -all This option removes the ignored layers for RC estimation and congestion analysis that are between the minimum and maximum routing layers.\n -rc_congestion_ignored_layers layer_list This option removes the specified ignored layers for RC estimation and congestion analysis.\n The specified layers must be between the minimum and maximum routing layers."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I An Overview for RedHawk Fusion and RedHawk-SC Fusion"}, {"role": "assistant", "content": "Both RedHawk Fusion and RedHawk-SC Fusion support gate-level rail analysis capabilities, including static and dynamic rail analysis.\n You can use RedHawk Fusion and RedHawk-SC Fusion to perform the following types of checking and analysis in the Fusion Compiler environment: Missing via and unconnected pin shape checking To check for missing vias or unconnected pin shapes in the design, you first configure the checking-related settings by using the set_missing_via_check_options command, and then perform the check by using the analyze_rail -check_missing_via command.\n For more information, see Missing Via and Unconnected Pin Checking Voltage drop analysis To perform voltage drop analysis, use the analyze_3d_rail -voltage_drop -electromigration command.\n To perform voltage drop analysis, use the analyze_rail -voltage_drop command or choose Rail > Analyze Rail and select \"Voltage drop analysis\" in the GUI.\n Set the -voltage_drop option to static dynamic dynamic_vcd, or dynamic_vectorless to choose the type of analysis you want to perform.\n For more information, see Performing Voltage Drop Analysis PG electromigration analysis To perform PG electromigration analysis, use the analyze_rail -electromigration command.\n For more information, see Performing PG Electromigration Analysis 870 An Overview for RedHawk Fusion and RedHawk-SC Fusion Feedback Minimum path resistance analysis To perform minimum path resistance analysis, use the analyze_rail -min_path_resistance command.\n In the RedHawk-SC analysis flow, you must use the -voltage_drop option together with the -min_path_resistance option for minimum path resistance analysis.\n For more information, see Performing Minimum Path Resistance Analysis Depending on the type of analysis you run, the tool generates visual displays (maps) of the results that you can view in the Fusion Compiler GUI, as well as error data that you can display in the Fusion Compiler error browser.\n These maps and error data help you discover problem areas and determine corrective action without leaving the Fusion Compiler environment.\n Note: RedHawk Fusion in the Fusion Compiler tool does not support RedHawk signoff analysis features, such as hierarchical analysis or dynamic analysis with lumped or SPICE packages.\n For more information, see Preparing Design and Input Data for Rail Analysis By default, RedHawk Fusion analyzes only the current design scenario when analyzing a multicorner-multimode design.\n For more information about how to create and specify a rail scenario for rail analysis, see Running Rail Analysis with Multiple Rail Scenarios Figure 198 shows where you would use these analysis capabilities in a typical design flow.\n Figure 198 Using RedHawk Fusion in the Fusion Compiler Design Flow Find missing vias Design planning place_opt Initial placement Static voltage clock_opt Static voltage Filler cell insertion drop analysis drop analysis Power-switch cell insertion Dynamic voltage drop analysis route_opt PG electromigration analysis and fixing 871 An Overview for RedHawk Fusion and RedHawk-SC Fusion Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Cells Within a Predefined Relative Placement Area"}, {"role": "assistant", "content": "To add cells anywhere within a predefined area of a relative placement group, use the -free_placement option with the add_to_rp_group command.\n With this option, you must specify The origin of the placement area by using the -column and -row options The height and width of the placement area by using the -height and -width options The number of columns and rows the cells occupy by using the -num_columns and -num_rows options For example, to add a leaf cell that occupies two columns and two rows to a placement area with a height of 4 and a width of 5 and is at position (0,0), use fc_shell> add_to_rp_group rp2 -cells U41 -free_placement \\ -column 0 -row 0 -height 4 -width 5 -num_columns 2 -num_rows 2"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Nondefault Routing Rules"}, {"role": "assistant", "content": "}} The tool selects the following vias: {VIA12_LH 1x1 R}, {VIA12_LH 1x1 NR}, {VIA12_LV 1x1 R}, {VIA12_LV 1x1 NR}, {VIA12_LH 1x2 R}, {VIA12_LH 1x2 NR}, {VIA12_LH 2x1 503 Routing Constraints Feedback R}, {VIA12_LH 2x1 NR}, {VIA12_LV 1x2 R}, {VIA12_LV 1x2 NR}, {VIA12_LV 2x1 R}, and {VIA12_LV 2x1 NR}.\n Specifying Nondefault Vias Using the -vias Option The syntax for specifying nondefault vias using the -vias option is create_routing_rule rule_name -vias { { via_type cut_number orientation via_type cut_number orientation...\n via_type cut_number orientation You can specify multiple via types per layer; each via type must be a via definition defined in the technology file or a via definition created by the create_via_def command.\n For each via type, you must explicitly specify the allowed cut numbers and orientation.\n To specify the orientation, use NR to indicate that the via is not rotated or to indicate that the via is rotated.\n The order of via specification is not important; during routing, Zroute selects the lowest cost nondefault via.\n For example, to specify the vias selected by the -cuts option in the previous example, use the following command: fc_shell> create_routing_rule via_rule \\ -vias { {VIA12_LH 1x1 R} {VIA12_LH 1x1 NR} {VIA12_LV 1x1 R} {VIA12_LV 1x1 NR} {VIA12_LH 1x2 R} {VIA12_LH 1x2 NR} {VIA12_LH 2x1 R} {VIA12_LH 2x1 NR} {VIA12_LV 1x2 R} {VIA12_LV 1x2 NR} {VIA12_LV 2x1 R} {VIA12_LV 2x1 NR} } Specifying Mask Constraints If you are using the precolored design flow for a design that uses multiple-patterning technology, you can set mask constraints on timing-critical nets, such as clock nets, by defining a precoloring rule and applying it to the nets.\n For details about the mask constraints, see Mask Constraints To define a precoloring rule, use the create_routing_rule command using the following syntax: create_routing_rule rule_name -mask_constraints layer constraint layer constraint...\n layer constraint where constraint is one of same_mask mask1_soft, or mask2_soft For example, to define a precoloring routing rule that sets mask_one constraints on the M4 and M5 layers, use the following command: fc_shell> create_routing_rule clock_mask1 \\ -mask_constraints {M4 mask_one M5 mask_one} 504 Routing Constraints Feedback Note: To ensure DRC convergence, you should set double-patterning mask constraints only on a very few timing-critical nets.\n Defining Shielding Rules To define shielding rules, use the create_routing_rule command using the following syntax: create_routing_rule rule_name -shield_widths { layer width layer width layer width -shield_spacings { layer spacing layer spacing layer spacing [-snap_to_track] Specify the routing layers by using the layer names from the technology file.\n You can define a single width and spacing value per layer.\n Zroute uses the default wire width for any layers not specified in the -shield_widths option and the default spacing for any layers not specified in the -shield_spacings option.\n By default, shielding wires are not snapped to the routing tracks.\n To snap shielding wires to the routing tracks, use the -snap_to_track option when you define the nondefault routing rule.\n For example, to specify a shielding rule that uses spacing of 0.1 microns and a width of 0.1 microns for M1 through M5 and spacing of 0.3 microns and a width of 0.3 microns for M6, use the following command: fc_shell> create_routing_rule shield_rule \\ -shield_widths {M1 0.1 M2 0.1 M3 0.1 M4 0.1 M5 0.1 M6 0.3} \\ -shield_spacings {M1 0.1 M2 0.1 M3 0.1 M4 0.1 M5 0.1 M6 0.3} Reporting Nondefault Routing Rule Definitions To report the nondefault routing rules defined by the create_routing_rule command, use the report_routing_rules -verbose command.\n By default, this command reports all of the nondefault routing rules for the current block.\n To limit the report to specific nondefault routing rules, specify the rule names as an argument to the command.\n fc_shell> report_routing_rules { rule_names To output a Tcl script that contains the create_routing_rule commands used to define the specified nondefault routing rules, use the -output option when you run the report_routing_rules command.\n Removing Nondefault Routing Rules To remove nondefault routing rules from the current block, use the remove_routing_rules command.\n When you remove a nondefault routing rule, the rule 505 Routing Constraints Feedback is removed from all nets to which it is applied and the rule definition is removed from the design library.\n To remove specific routing rules, specify the routing rules.\n To remove all routing rules, specify the -all option.\n For example, to remove the new_width_rule routing rule, use the following command: fc_shell> remove_routing_rules new_width_rule Modifying Nondefault Routing Rules To change the definition for an existing rule, you must use the remove_routing_rules command to remove the rule and then use the create_routing_rule command to redefine the rule.\n The tool issues an error message if you try to redefine an existing routing rule."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Shielding the Nets"}, {"role": "assistant", "content": "Shielding is needed around sensitive nets to reduce noise and crosstalk.\n When you perform custom routing by using the route_custom command, the tool automatically creates shields for the nets based on the constraints you specify by using the create_net_shielding command.\n To add shielding to the selected nets in a separate run, use the create_custom_shields command.The following example creates shields for net1 and net2.\n fc_shell> create_custom_shields -nets {net1 net2} To remove the shielding created by the create_custom_shields command, use the remove_custom_shields command.\n Doing this also removes the shielding created by the route_custom command.\n 774 Checking the Routing Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Performing Incremental Shielding"}, {"role": "assistant", "content": "By default, Zroute does not perform incremental shielding on nets that are modified after they were shielded.\n However, you can enable this capability for nets that were initially shielded with the create_shields command by changing the route.common.reshield_modified_nets application option from its default of off When you enable incremental shielding, Zroute performs incremental shielding during detail routing by removing the existing shielding from the modified nets and optionally reshielding these nets based on the new topology.\n To remove the existing shielding only, set the route.common.reshield_modified_nets option to unshield To remove the existing shielding and reshield the modified nets, set the route.common.reshield_modified_nets option to reshield Note: Zroute automatically detects the nets modified within the Fusion Compiler tool; however, nets modified externally and input by reading a DEF file are not supported by incremental shielding."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Embedding Tcl Commands in RTL Code"}, {"role": "assistant", "content": "To embed Tcl command in RTL code, use the fc_tcl_script_begin and fc_tcl_script_end directives.\n The following Tcl commands can be embedded in an RTL design: set_attribute set_ungroup set_size_only set_dont_touch set_dont_retime set_implementation set_optimize_registers 102 Mitigating Design Mismatches Feedback get_modules get_cells get_pins get_nets get_ports The following RTL example contains an embedded Tcl command that applies a size_only setting on all the registers with the iPort1.dout_reg name prefix: module bot ( myIntf1.datIn iPort1 ); always @(posedge iPort1.clk or negedge iPort1.rst) begin if (iPort1.rst == 1'b0) begin iPort1.dout <= '0; end else begin iPort1.dout <= iPort1.iData1 + iPort1.iData2; end end // synopsys fc_tcl_script_begin // set_size_only [get_cells iPort1.dout_reg*] // synopsys fc_tcl_script_end endmodule"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Nondefault Routing Rules"}, {"role": "assistant", "content": "spacing_to_shield false option when you define the nondefault spacing rule with the create_routing_rule command To ignore nondefault spacing rules between signal nets and PG nets For all signal nets, set the route.common.ignore_var_spacing_to_pg application option to true For specific signal nets, use the -ignore_spacing_to_pg true option when you define the nondefault spacing rule with the create_routing_rule command Note: When you ignore nondefault spacing rules between signal nets and PG nets, the rules are also ignored between the signal nets and the shield wires regardless of the setting of the route.common.ignore_var_spacing_to_shield and create_routing_rule -ignore_spacing_to_shield options.\n To ignore nondefault spacing rules between signal nets and blockages For all signal nets, set the route.common.ignore_var_spacing_to_blockage application option to true For specific signal nets, use the -ignore_spacing_to_blockage true option when you define the nondefault spacing rule with the create_routing_rule command 499 Routing Constraints Feedback You can relax the nondefault spacing checks for specific nondefault routing rules by ignoring violations for short parallel distances, as shown in Figure 106.\n This technique increases the flexibility of DRC convergence without adversely affecting crosstalk.\n Figure 106 Ignoring Nondefault Spacing Rule Violations To define the length thresholds within which to ignore the nondefault spacing violations, use the -spacing_length_thresholds option when you create the nondefault routing rule with the create_routing_rule command.\n The length threshold values are in microns and must have a one-to-one correspondence with the spacing entries specified in the -spacings option.\n For example, fc_shell> create_routing_rule new_rule \\ -spacings { M1 {0.09 0.15 0.2} M2 {0.09 0.15 0.2} M3 {0.09 0.15 0.2} } \\ -spacing_weight_levels { M1 {hard medium low} M2 {hard medium low} M3 {hard medium low} } \\ -spacing_length_thresholds { M1 {0.01 0 0} M2 {0.01 0 0} M3 {0.01 0 0} } Specifying the Routing Effort for Soft Spacing Violations By default, Zroute does not fix soft spacing violations.\n To fix soft spacing violations, you must assign a routing effort to each of the soft weight levels.\n These assignments apply to all soft spacing rules.\n 500 Routing Constraints Feedback To assign a routing effort for each weight level, use the following syntax to set the route.common.soft_rule_weight_to_effort_level_map application option: set_app_options -name route.common.soft_rule_weight_to_effort_level_map -value { { weight effort }...\n } Each weight argument can be one of low medium, or high.\n You should specify each weight level only one time; if you specify a weight level multiple times, the router uses the last specification.\n Each effort argument can be one of the following values: off (the default) Zroute does not fix the soft spacing rule violations.\n low Zroute uses a small number of rip-up and reroute passes to resolve soft spacing rule violations.\n medium Zroute uses a medium number of rip-up and reroute passes to resolve soft spacing rule violations.\n Note that you cannot specify this effort level for the low weight level.\n high Zroute treats soft spacing rule violations the same as regular design rule violations during rip up and reroute.\n Note that you cannot specify this effort level for the low weight level.\n For example, to assign low routing effort to low-weight soft spacing rules, medium routing effort to medium-weight soft spacing rules, and high routing effort to high-weight soft spacing, use the following command: fc_shell> set_app_options \\ -name route.common.soft_rule_weight_to_effort_level_map \\ -value { {low low} {medium medium} {high high} } Defining Minimum Via Spacing Rules You can define nondefault minimum via spacing rules that are stricter than the rules defined in the technology file.\n Nondefault via spacing rules are hard constraints that must be met.\n To define a minimum via spacing rule, use the -via_spacings option with the create_routing_rule command using the following syntax: create_routing_rule rule_name -via_spacings { { layer1 layer2 spacing }...\n } 501 Routing Constraints Feedback Specify the routing layers by using the layer names from the technology file.\n You can define a single width value per layer pair.\n The minimum via spacing for vias between any unspecified layer combinations is determined from the technology file.\n For vias on the same layer, the router uses the minimum spacing defined in the Layer section for the via layer.\n For vias on different layers, the router uses the minimum spacing defined in the DesignRule section for the via layer combination.\n For example, to define a nondefault routing rule named via_spacing_rule that defines nondefault spacing rules between vias on the V1 layer and between vias on the V1 and V2 layers, and uses the minimum spacing rules defined in the technology file between vias on all other layer combinations, use the following command: fc_shell> create_routing_rule via_spacing_rule \\ -via_spacings {{V1 V1 2.3} {V1 V2 3.2}} Specifying Nondefault Vias By default, when routing nets with nondefault routing rules, Zroute selects vias based on the design rules.\n To specify the vias to use when routing nets with nondefault routing rules, use the create_routing_rule command.\n You can define the nondefault vias by using either the -cuts option or the -vias option.\n When you use the -cuts option, the tool determines the suitable via definitions from the technology file based on the specification in the -cuts option and the rules defined in the technology file.\n When you use the -vias option, you explicitly specify the nondefault via definitions, including the allowed cut numbers and rotation for each via definition.\n Specifying Nondefault Vias Using the -cuts Option The syntax for specifying nondefault vias using the -cuts option is create_routing_rule rule_name -cuts { { cut_layer1 cut_name1 ncuts } { cut_name2 ncuts } \u2026} cut_layer2 cut_name1 ncuts } { cut_name2 ncuts } \u2026}...\n cut_layern cut_name1 ncuts } { cut_name2 ncuts } \u2026} The cut_layer arguments refer to the via layer names in the technology file and the cut_name arguments refer to the cut names defined in the cutNameTbl attribute in the associated Layer section in the technology file.\n You can specify multiple cut names per layer.\n For each cut name, you must specify the minimum number of cuts, which must be an integer between 1 and 255.\n 502 Routing Constraints Feedback The tool searches for the vias defined in the ContactCode section of the technology file that meet the rules defined in the technology file for the specified cut name, such as the cutWidthTbl cutHeightTbl, and fatTblFatContactNumber rules.\n In addition, the width of the via enclosure must meet the nondefault width and the xLegalWidthTbl and yLegalWidthTbl rules defined in the technology file for the adjacent metal layers.\n If the fat metal contact rule is not defined for a via layer, the tool searches for the default vias that meet the cut width, cut height, and via enclosure width requirements.\n The minimum number of cuts required is the larger of the ncuts value in the -cuts option and the value defined in the fatTblFatContactMinCuts attribute.\n For the selected vias, the tool always allows both the rotated and unrotated orientations for the via.\n For example, assume the following information is defined in the technology file: Layer \"VIA1\" { fatTblThreshold = ( 0, 0.181, 0.411 ) fatTblFatContactNumber = ( \"2,3,4,5,6 \",\"5,6,20\", \"5,6,20\" ) fatTblFatContactMinCuts = ( \"1,1,1,1,1\", \"1,1,1\", \"2,2,2\" ) cutNameTbl = ( Vsq, Vrect ) cutWidthTbl = ( 0.05, 0.05 ) cutHeightTbl = ( 0.05, 0.13 ) ContactCode \"VIA12_LH\" { contactCodeNumber = 5 cutWidth = 0.13 cutHeight = 0.05 ContactCode \"VIA12_LV\" { contactCodeNumber = 6 cutWidth = 0.05 cutHeight = 0.13 ContactCode \"VIA12_P\" { contactCodeNumber = 20 cutWidth = 0.05 cutHeight = 0.05 If you use the following command, fc_shell> create_routing_rule cut_rule -cuts {VIA1 {Vrect 1"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Antenna Rules"}, {"role": "assistant", "content": "Antenna rules define how to calculate the maximum antenna ratio for the nets in a block, as well as the antenna ratio for a pin.\n You must define a global antenna rule by using the define_antenna_rule command.\n You can also specify layer-specific antenna rules by using the define_antenna_layer_rule command.\n The tool uses the global antenna rule whenever a layer-specific antenna rule does not exist.\n The following topics describe how to define the antenna rules: Calculating the Maximum Antenna Ratio Calculating the Antenna Ratio for a Pin"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Adding Buffers on a Bus in a Specified Pattern"}, {"role": "assistant", "content": "To add buffers to the individual nets of a bus in a specific pattern, use the following steps: 1.\n Define buffer patterns for the nets of a bus by using the create_eco_bus_buffer_pattern command.\n This command allows you to define patterns for staggering buffers on bused nets, which prevent clumping and overlapping of buffers.\n Table 72 Commands Associated With Bus Patterns To do this Use this command Create bus patterns create_eco_bus_buffer_pattern 967 Adding Buffers on Routed Nets Feedback To do this Use this command Report information about bus patterns report_eco_bus_buffer_patterns Get a collection of buffer patterns get_eco_bus_buffer_patterns Remove bus patterns remove_eco_bus_buffer_patterns The following example creates the buffer pattern shown in Figure 219 for a horizontal bus, where the first buffer is placed on the topmost net.\n The buffers are staggered by a distance of 2, starting from the left, and the pattern is repeated after every three buffers.\n fc_shell> create_eco_bus_buffer_pattern -name top_left \\ -first_buffer top -measure_from left -distance 2 -repeat_after 3 Figure 219 Buffer Patterns for a Horizontal Bus First buffer The following example creates the buffer pattern shown in Figure 220 for a vertical bus, where the first buffer is placed on the rightmost net.\n Starting from the top, the second buffer is staggered by a distance of 2 from the first, the third a distance of 3 from the second, and the fourth a distance 2 from the third.\n After that, the pattern is repeated.\n fc_shell> create_eco_bus_buffer_pattern -name right_top \\ -first_buffer right -measure_from top \\ -user_specified_distance {2 3 2} 968 Adding Buffers on Routed Nets Feedback Figure 220 Buffer Patterns for a Vertical Bus First buffer 2.\n Add buffers on the nets of the bus by using the add_buffer_on_route -user_specified_bus_buffers command.\n For each group of buffers that you add on the bused nets, use the {buffer_pattern_name library_cell_name x y....\n } format with the -user_specified_bus_buffers option to specify the Name of the buffer pattern that you defined using the create_eco_bus_buffer_pattern command Library cell to use Coordinates of the location of the first buffer in the pattern The following example adds a group of buffers of type BUF2 on the bus named data_A, using a buffer pattern named BP1.\n The first buffer of the pattern is placed at location (100, 70).\n fc_shell> add_buffer_on_route [get_net data_A*] \\ -user_specified_bus_buffers {BP1 BUF2 100 70} 969 Adding Buffers on Routed Nets Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating Abstracts With Power Information"}, {"role": "assistant", "content": "To create an abstract that contains power information of the corresponding block, use the following steps at the block level: 1.\n Activate the scenarios for which you want to perform power analysis by using the -active true option of the set_scenario_status command and enable them for power analysis by using the following options: -dynamic_power true for dynamic power analysis -leakage_power true for leakage power analysis Power information is stored only for active scenarios that are enabled for dynamic or leakage power.\n 2.\n (Optional) Apply switching activity by either reading in a SAIF file with the read_saif command or annotating the switching activity information on the nets with the set_switching_activity command.\n For more information about applying switching activity, see Annotating the Switching Activity 834 Creating Abstract Views Feedback 3.\n Store the power information in the abstract by setting the abstract.annotate_power application option to true 4.\n Create the abstract for the block by using the create_abstract command.\n When you create an abstract with power information, the tool stores the power information only for the logic that is removed.\n When you instantiate such an abstract and perform power analysis at the top level, the tool Recomputes the power for the interface logic in the abstract, in context, based on the switching activity and loading seen at the top level Uses the stored power in the abstract for the logic that was removed when the abstract was created To report the power information in an abstract instantiated at the top level, use the report_power -blocks command.\n If there are multiple levels of physical hierarchy, to specify the number of level for which you want to report, use the -levels option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Enabling the Embedded Area Optimization Flow"}, {"role": "assistant", "content": "During the logic_opto stage of the compile_fusion command, as an initial step, the tool performs timing optimization and DesignWare reselection and ungrouping.\n After this initial step, the tool can perform an optional embedded area optimization flow before moving on to other optimization techniques performed during the logic_opto stage.\n The embedded area optimization flow consists of dedicated ungrouping, fast area- driven logic restructuring, and light timing optimization.\n To enable this feature, set the compile.flow.areaResynthesis application option to true This feature can reduce the area of blocks with many DesignWare hierarchies."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Configuring Checkpoints"}, {"role": "assistant", "content": "For a checkpoint to affect your flow, you must associate it with a flow change or report that you want to run before, after, or in place of the code the checkpoint enwraps.\n The process of defining flow changes and reports and associating them with individual checkpoints is described in the following topics: Defining Checkpoint Behaviors Associating Checkpoints and Checkpoint Behaviors"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Identifying the Clock Roots"}, {"role": "assistant", "content": "The Fusion Compiler tool uses the clock sources defined by the create_clock command, which can be either input ports or internal hierarchical pins, as the clock roots.\n For nested clock trees with generated clocks, which are defined by the create_generated_clock command, the tool considers the master-clock source to be the clock root, and the clock endpoints of the nested clock tree are considered endpoints of the master-clock source.\n For example, for the netlist shown in Figure 72, the tool considers the CLK port to be the clock root for the genclk1 generated clock.\n 340 Defining the Clock Trees Feedback Figure 72 Nested Clock Tree With a Generated Clock CLK QN clk1 genclk1 If the block contains generated clocks, ensure that the master-clock sources are correctly defined, as incorrect definitions can result in poor skew and timing QoR.\n In particular, If the tool cannot trace back to the master-clock source, it cannot balance the sink pins of the generated clock with the sink pins of its source.\n If the master-clock source is not a clock source defined by the create_clock or create_generated_clock command, the tool cannot synthesize a clock tree for the generated clock or its source.\n Use the check_clock_trees command to verify that your master-clock sources are correctly defined, as described in Verifying the Clock Trees Specifying the Clock Root Timing Characteristics To get realistic clock tree synthesis results, you must ensure that the timing characteristics of the clock roots are correctly modeled.\n If the clock root is an input port without an I/O pad cell, you must accurately specify the driving cell of the input port.\n If you specify a weak driving cell, the tool might insert extra buffers to try to meet the clock tree design rule constraints, such as maximum transition time and maximum capacitance.\n If you do not specify a driving cell (or drive strength), the tool assumes that the port has infinite drive strength.\n For example, if the CLK1 port is the root of the CLK1 clock tree, use the following command to set its driving cell as the CLKBUF cell in the mylib cell library: fc_shell> set_driving_cell -lib_cell mylib/CLKBUF [get_ports CLK1] If the clock root is an input port with an I/O pad cell, you must accurately specify the input transition time of the input port.\n 341 Defining the Clock Trees Feedback For example, if the CLK1 port is the root of the CLK1 clock tree and the I/O pad cell has already been inserted, use the following commands to set its input transition time to 0.3 for rising delays and 0.2 for falling delays: fc_shell> set_input_transition -rise 0.3 [get_ports CLK1] fc_shell> set_input_transition -fall 0.2 [get_ports CLK1]"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Deriving Metal Cut Routing Guides"}, {"role": "assistant", "content": "If your technology file defines metal cut allowed and forbidden preferred grid extension rules and your block already contains boundary cells, you can create routing guides for these rules by using the -add_metal_cut_allowed option with the derive_metal_cut_routing_guides command.\n When you use this option, the derive_metal_cut_routing_guides command creates the following routing guides: Metal cut allowed routing guides, which cover the area taken up by all the placeable site rows reduced by the vertical shrink factor, which is 50 percent of the smallest site row height Forbidden preferred grid extension routing guides, which cover the remaining area up to the block boundary To check the inserted routing guides, use the -check_only option with the derive_metal_cut_routing_guides command.\n By default, the checking results are stored in an error data file named block_name.err.\n To specify a different name for the error data file, use the -error_view option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Settings for Preroute Optimization"}, {"role": "assistant", "content": "Optimizing the design for performance, power, and area (PPA) is one of the primary goals of the tool.\n The following topics describe how to specify settings for performance, power, and area optimization at the preroute stage: Specifying Parasitic Estimation Settings for the Preroute Optimization Specifying Automatic Via Ladder Insertion Settings for Preroute Optimization Assigning Nondefault Routing Rules to Critical Nets 179 Specifying Settings for Preroute Optimization Feedback Enabling Area Recovery in Regions of High Utilization Enabling Advanced Logic Restructuring"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I User-Driven Enable Exclusion"}, {"role": "assistant", "content": "The set_clock_gating_enable command provides an interface to specify signals to be excluded from clock-gating enable.\n The report_clock_gating -ungated command reports a new reason for registers that are not gated due to enable exclusion.\n The options and syntax of the set_clock_gating_enable command are identical to the corresponding Design Compiler command.\n Use this command to control the signals to enable clock gating during clock-gate insertion.\n This command provides a mechanism to specify why a given signal should not be used as an enable condition for clock gating.\n The syntax of the set_clock_gating_enable command is as follows: status set_clock_gating_enable [-exclude objects_to_exclude] [-undo objects_to_remove_exclusion] 297 Setting Up Clock Gating Feedback The following figure shows a circuit before enable exclusion: In this step, a forward traversal is performed from all user-specified exclusion signals until endpoints (primary output ports, input ports of sequential cells, including clock gating cells, black boxes, and so on) are reached.\n If the endpoint is a clock-gate-enable pin, then all pins on the path are marked with a temporary design attribute for use in subsequent steps.\n 298 Setting Up Clock Gating Feedback The following figure shows a circuit after enable exclusion:"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Net-Specific Routing Layer Constraints"}, {"role": "assistant", "content": "To remove net-specific routing layer constraints, use the set_routing_rule -clear command.\n Note that when you use this command, it also removes any nondefault routing rules assigned to the specified nets."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I and Clock Routing"}, {"role": "assistant", "content": "A via ladder is a stacked via that starts from the pin layer and extends into an upper layer where the router connects to it.\n Via ladders reduce the via resistance, which can improve performance and electromigration robustness.\n The via ladder insertion flow during clock tree synthesis, optimization, and clock routing consists of the following steps: 1.\n Ensure that the via ladder rules are defined as described in Defining Via Ladder Rules 2.\n Specify the via ladders that can be used for specific library pins by using the set_via_ladder_candidate command, as described in Specifying Via Ladder Candidates for Library Pins 3.\n Define the via ladder constraints by using the set_via_ladder_rules command, as described in Defining Via Ladder Constraints 4.\n Enable high-performance and electromigration via ladder insertion for critical paths during the clock_opt command by setting the opt.common.enable_via_ladder_insertion application option to true 5.\n Perform clock tree synthesis and optimization by using the clock_opt -to build_clock command.\n 6.\n Insert the via ladders by using the insert_via_ladders command, as described in Inserting Via Ladders 7.\n Route the clock nets by using the clock_opt -from route_clock command.\n 391 Implementing Clock Trees and Performing Post-CTS Optimization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating and Specifying Rail Scenarios for Rail Analysis"}, {"role": "assistant", "content": "You can create multiple rail scenarios and associate them with a design scenario in the current design.\n The created rail scenarios are saved in the design library.\n To run rail analysis on multiple rail scenarios: 1.\n Specify the following application options to enable multi-rail-scenario rail analysis: fc_shell> set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true 897 Running Rail Analysis with Multiple Rail Scenarios Feedback 2.\n Run the set_scenario_status -ir_drop command to enable rail analysis for the specified design scenario.\n fc_shell> set_scenario_status func_cbest -ir_drop true 3.\n Create a rail scenario and associate it with an existing design scenario.\n Specify rail attributes for the created rail scenario with the set_rail_scenario command.\n You can create multiple rail scenarios for different purposes and associate them with an existing design scenario.\n fc_shell> create_rail_scenario -name T_low -scenario func_cbest fc_shell> set_rail_scenario -name T_low -voltage_drop dynamic -extra_gsr_option_file extra.gsr \\ -nets {VDD VSS} fc_shell> create_rail_scenario -name T_high -scenario func_cbest fc_shell> set_rail_scenario -name T_high -voltage_drop dynamic -extra_gsr_option_file extra2.gsr \\ -nets {VDD VSS} 4.\n Specify the multicore processing setting with the set_host_options command.\n For example, to run rail analysis on a local host, use the following command: fc_shell> set_host_options -submit_command {local} To run analysis on a grid system, use the following command: fc_shell> set_host_options -submit_protocol sge \\ -submit_command {qsub -V -b y -cwd -P bnormal -l mfree=16G} 5.\n Run rail analysis with the analyze_rail command.\n fc_shell> analyze_rail -rail_scenario {T_high T_low} \\ -submit_to_other_machines Note: To use the multi-rail-scenario rail analysis capability for IR-driven placement or IR-driven concurrent clock and data optimization, you must set the following application option before the clock_opt -from final_opto or route_opt command: fc_shell> set_app_options \\ -name opt.common.power_integrity -value true For more information about power integrity analysis, see the Enabling the Power Integrity Features section.\n 898 Running Rail Analysis with Multiple Rail Scenarios Feedback Examples The following example runs rail analysis on multiple rail scenarios.\n # Specify options for multi-rail-scenario rail analysis set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true set_host_options -submit_protocol sge \\ -submit_command {qsub -V -notify -b y -cwd -j y \\ -P bnormal -l mfree=16G} # Custom RedHawk-SC Fusion python script to specify user-defined # toggle rate for scenario T_custom create_rail_scenario -name T_custom -scenario func_cbest set_rail_scenario -name T_custom -custom_script_file custom_sc.py # Default RedHawk-SC Fusion toggle rate for scenario T_def create_rail_scenario -name T_def -scenario func_cbest set_rail_scenario -name T_def -voltage_drop dynamic -nets {VDD VSS} # Run RedHawk-SC Fusion rail analysis on the specified rail scenario analyze_rail -rail_scenario {T_custom T_def} -submit_to_other_machines # (Optional) Open and examine the generated rail results open_rail_result {T_custom T_def} The following example runs multi-rail-scenario rail analysis in the power integrity flow.\n ## Specify RedHawk/RedHawk-SC based options set_app_options -name rail.enable_redhawk -value true set_app_options -name rail.enable_redhawk_sc -value false set_app_options -name rail.redhawk_path -value /test/bin set_app_options -name rail.tech_file -value design_data/tech/rh.tech set_app_options -name rail.lib_files -value { inputs/test/CCSP_test.lib set_host_options -submit_protocol sge -submit_command {qsub -V \\ -notify -b y -cwd -j y -P bnormal -l mfree=16G} ## Specify options for running optimization on multiple rail scenarios set_app_options -list { rail.enable_new_rail_scenario true rail.enable_parallel_run_rail_scenario true ## Enable IR drop flag for a given scenario set_scenario_status [current_scenario] -ir_drop true ## Create a rail scenario and specify associated options create_rail_scenario -name T_low -scenario func_cbest set_rail_scenario -name T_low -voltage_drop dynamic \\ 899 Performing Voltage Drop Analysis Feedback -extra_gsr_option_file extra.gsr -nets {VDD VSS} create_rail_scenario -name T_high -scenario func_cbest set_rail_scenario -name T_high -voltage_drop dynamic \\ -extra_gsr_option_file extra2.gsr -nets {VDD VSS} ## Enable power integrity flow set_app_options -name opt.common.power_integrity -value true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Reporting Clock Tree Power"}, {"role": "assistant", "content": "To report the power of a clock tree, use the report_clock_power command.\n By default, it reports the power for all clock trees in all modes and corners of all active scenarios.\n To report the power Only for specific clocks, use the -clocks option Only for specific modes, use the -modes option Only for specific corners, use the -corners option Only for specific scenarios, use the -scenario option On a per-segment or per-subtree basis, use the -type per_segment or -type per_subtree option A segment is the clock buffer tree from one integrated-clock-gating (ICG) cell to the next ICG cells or sinks in its fanout For example, in the following figure, the buffer tree from the output of the ICG1 cell to the inputs of the ICG2, ICG3, and ff2 cells is considered a segment.\n A subtree is a clock tree from an ICG cell all the way to the sinks in its fanout.\n For example, in the following figure, the clock tree from the output of the ICG1 cell to the inputs of the ff1, ff2, and ff3 cells is considered a subtree.\n Figure 98 Segments and Subtrees of a Clock Tree 435 Analyzing the Clock Tree Results Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Verifying the Secondary Power and Ground Pin Attributes"}, {"role": "assistant", "content": "Before you use Zroute to perform secondary power and ground pin routing, you must verify that the cell libraries have the correct attributes on the secondary power and ground pins of the standard cell frame views.\n The following attributes are required for secondary power and ground pins: is_secondary_pg This attribute must have a setting of true port_type This attribute must have a setting of power or ground To verify that these attributes are correctly set on the library pins in the standard cell frame view, use the following command: fc_shell> report_attributes -application \\ [get_lib_pins -of_objects reflib cell /frame -all \\ -filter \"name == attr_name \"] where reflib is the cell library name, cell is the name of the library cell you want to check (or * if you want to check all library cells), and attr_name is either is_secondary_pg or port_type 522 Routing Secondary Power and Ground Pins Feedback See Also Identifying Secondary PG Pins"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a Name Prefix for Clock Cells"}, {"role": "assistant", "content": "You can specify a name prefix for the cells added on the clock network during clock tree synthesis by using the cts.common.user_instance_name_prefix application option.\n The following example specifies CTS_ as the name prefix for the cells added on the clock network during clock tree synthesis: fc_shell> set_app_options \\ -name cts.common.user_instance_name_prefix -value \"CTS_\" To specify a name prefix for the cells added on the data nets during optimization, including during the clock_opt command, use the opt.common.user_instance_name_prefix application option, as described in Specifying a Cell Name Prefix for Optimization"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Creating ETMs in the PrimeTime Tool"}, {"role": "assistant", "content": "You can create an ETM for design by using the extract_model command in the PrimeTime tool.\n For multicorner-multimode designs, you must create an ETM for each scenario by applying the appropriate corner and mode constraints for each scenario.\n The following PrimeTime script creates an ETM for the S3 scenario, which consists of the m1 mode and c3 corner, of the AMS_BLK design: #Read in the design read_verilog./AMS_BLK.v link # Apply parasitics read_parasitics./AMS_BLK.spef 856 Creating ETMs and ETM Cell Libraries Feedback #For multivoltage designs, apply UPF data and settings load_upf./AMD_BLK.upf set extract_model_include_upf_data true # Apply the mode (m1) and corner (c3) constraints for the scenario (S3) source m1_constraints.tcl source c3_constraints.tcl # Enable clock latencies for designs with synthesized clock trees set extract_model_with_clock_latency_arcs true set extract_model_clock_latency_arcs_include_all_registers false # Create the ETM extract_model -library_cell -format db -output AMS_BLK_m1_c3 For more information about creating ETMs in the PrimeTime tool, see the Extracted Timing Models chapter in the PrimeTime User Guide 857 Creating ETMs and ETM Cell Libraries Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Special Naming and Querying for DFT Wrapper Clock Gates"}, {"role": "assistant", "content": "DFT wrapper clock gates refer to those clock gates that drive only DFT wrapper cells.\n The clock gating engine prefixes dft_wrapper_ to the names of all DFT wrapper clock gates 334 Special Naming and Querying for DFT Wrapper Clock Gates Feedback clock gates irrespective of their origin.\n This helps to identify specific clock gates driving wrapper cells during automatic test pattern generation (ATPG).\n Table 24 Commands and their expected return values Command Expected Return Value get_clock_gates -gating_wrapper_cells_only (Returns all clock gates that drive wrapper cells only) dft_wrapper_ICG and dft_wrapper_clock_gate_reg get_clock_gates -gating_wrapper_cells_only -origin tool_inserted (Returns only tool inserted clock gates that drive wrapper cells only) dft_wrapper_clock_gate_reg only get_clock_gates -gating_wrapper_cells_only -origin pre_existing (Returns only pre-existing clock gates that drive wrapper cells only) dft_wrapper_ICG only get_clock_gates {ICG clock_gate_reg} -gating_wrapper_cells_only empty string denoting that both the clock gates are not gating the wrapper cells get_clock_gates {ICG dft_wrapper_clock_gate_reg} -gating_wrapper_cells_only (Returns clock gates that only drive wrapper cells from given cells within the { } brackets) dft_wrapper_clock_gate_reg get_clock_gates {*clock_gate_reg} -gating_wrapper_cells_only (Returns clock gates that only drive wrapper cells and match the given pattern within the { } brackets) dft_wrapper_clock_gate_reg This feature works only when you enable clock gate support for DFT wrapper cells.\n To enable clock gate support for DFT wrapper cells, set the following variable to true compile.clockgate.enable_dft_wrapper_cell_support 335 Special Naming and Querying for DFT Wrapper Clock Gates Feedback The following figures show how a clock gate can be split so that different clock gates can gate internal cells and wrapper cells separately: Figure 69 Splitting a Clock Gate to Internal Cells and Wrapper Cells Figure 70 Gating Internal Cells and Wrapper Cells Separately 336 Special Naming and Querying for DFT Wrapper Clock Gates Feedback Note: The clock gates cloned to gate wrapper cells alone, inherit their names from parent clock gates and have dft_wrapper_ appended to their names.\n This is not applicable to the names of self-gates that drive wrapper cells only.\n Table 25 shows how different types of clock gates are renamed.\n Table 25 How different clock gate types are renamed Clock Gate Type Name New Name tool-inserted clock_gate_reg dft_wrapper_clock_gate_reg pre-existing icg_0 dft_wrapper_icg_0 Use the -gating_wrapper_cells_only option with the get_clock_gates command to return all clock gates (except self-gates) that drive wrapper cells only.\n This option can be used in conjunction with the already existing options.\n Use the compile.clockgate.substring_list_for_dft_wrapper_dont_rename_icgs application option to restrict the renaming of pre-existing clock gates (driving wrapper cells only).\n This option accepts a list of strings as values.\n The clock gates matching any of the substrings provided in the application option are not renamed.\n Note: The compile.clockgate.substring_list_for_dft_wrapper_dont_rename_icgs application option does not have any effect on the -gating_wrapper_cells_only querying option.\n Consider the following example: set_app_options -name compile.clockgate.substring_list_for_dft_wrapper_dont_rename_icgs -value {clk_gate_ctl clk_gate_snps} This prevents the renaming of any pre-existing clock gates that have the clk_gate_ctl or clk_gate_snps pattern in their name but can still be queried using the get_clock_gates -gating_wrapper_cells_only command.\n 337 Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining the Bus Routing Style"}, {"role": "assistant", "content": "To route a collection of nets or bundles as a single bus structure (trunk), create a constraint group that defines the bus routing style by using the create_bus_routing_style command.\n You need to specify the following information: The name of the constraint group If you do not specify a name, the command names the constraint group bus_style_ where is a unique integer.\n By default, the command returns an error if the assigned name already exists.\n To delete the existing constraint group, use the -force option.\n The nets, bundles, and topology edges to which the constraint group applies To specify the objects that constitute the constraint group, use the -for option.\n The constraints To specify the constraints that are applied per layer to the trunk and override any settings on the individual bits, use the options listed in Table 53 750 Defining Routing Constraints Feedback Table 53 Bus Routing Style Constraints Option Description -valid_layers Specifies a list of the valid layers for trunk routing.\n When specified, the tool derives the minimum and maximum layer information from the list.\n -layer_spacings Specifies the minimum spacing for each routing layer.\n For example, {M1 5.0 M2 6.0} -layer_widths Specifies the minimum width for each routing layer.\n For example, {M1 5.0 M2 6.0} -shield_placement Specifies the trunk shielding placement.\n Valid values are: default (default): Uses the value from custom.route.bus_intra_shield_placement double_interleave : Shields each wire individually.\n half_interleave : Inserts shared shielding every two wires.\n interleave : Inserts shared shielding between adjacent wires.\n outside: Places shields on the outside of the trunk or group.\n See also Intra-shield Placement -corner_type Specifies how the tool routes the bus trunks at corners.\n Valid values are: auto (default): Automatically determines the optimal corner type for the bit or pin alignment to reduce routing congestion.\n cross : Routes the bit so that they overlap at the corner.\n river : Routes the bit so that they do not overlap at the corner.\n See also Bus Routing Options -gap Specifies the spacing between the outermost bus bits and other shapes in the block.\n The default is 0.\n The following example creates a bus routing constraint group for the nets that match the pattern pr*.\n The command names the constraint group bus_style_1, because no name is assigned to the constraint group.\n The shield placement is interleave.\n The minimum spacing is 3 microns for the M2 layer and 5 microns for the M3 layer.\n fc_shell> create_bus_routing_style \\ -for [get_nets -physical_context pr*] \\ -shield_placement interleave \\ -layer_spacings {M2 3 M3 5} {bus_style_1} 751 Defining Routing Constraints Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Routing Rules of Clock Nets"}, {"role": "assistant", "content": "To improve timing and reduce crosstalk, nondefault routing rules are used extensively for routing clock nets.\n However, these nondefault routing rules require additional space, which can increase the congestion after clock routing.\n To consider the effects of the nondefault routing rules of the clock nets during placement, set the place.coarse.ndr_area_aware application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Shields on the Nets"}, {"role": "assistant", "content": "To add shielding on the selected nets to reduce crosstalk or parasitic effects, run the create_net_shielding command.\n You need to specify the following information: The name of the constraint group If you do not specify a name, the command names the constraint group shielding_ where is a unique integer.\n By default, the command returns an error if the assigned name already exists.\n To delete the existing constraint group, use the -force option.\n The nets, bundles, and topology edges to which the constraint group applies Use the -for option.\n The constraints for shielding styles and layer-specific requirements To define the net shielding constraints that are applied per layer to the trunk and override any settings on the individual bits, use the options listed in Table 55 753 Defining Routing Constraints Feedback Table 55 Net Shielding Constraints Option Description -shield_net Specifies the net you want to use as the shield.\n When routing a single signal net, the tool uses this net for the left and bottom shields.\n -shield_net_2 Specifies the secondary net you want to use as the shield.\n When routing a single signal net, the tool uses this net for the right and top shields.\n -via_defs Specifies the vias that can be used to connect to the shield.\n By default, all via definitions can be used.\n -gap Specifies the global minimum spacing between route objects and shield objects.\n The default is 0.\n -max_gap Specifies the global maximum spacing between route objects and shield objects.\n The default is 0.\n -width Specifies the global shield width.\n The default is 0.\n -layer_gaps Specifies the layer-specific minimum spacing between route objects and shield objects.\n The default is 0.\n -layer_max_gaps Specifies the layer-specific maximum spacing between route objects and shield objects.\n The default is 0.\n -layer_widths Specifies the layer-specific shield width.\n The default is 0.\n -min_segment Specifies the minimum length of wiring to shield.\n The default is 0.\n -sharing Specifies whether the shielding can be shared among the nets in the constraint group.\n Valid values are unset, true and false -group_shield Uses a single set of shield shapes to shield all nets in the constraint group.\n This option is mutually exclusive with the -enclose_pins option.\n -enclose_pins Specifies whether pins are enclosed by the shield.\n This option is mutually exclusive with the -group_shield option.\n Valid values are unset, true, and false -enclose_vias Specifies whether vias are enclosed by the shield.Valid values are unset, true, and false -disabled_layers Specifies the layers that cannot be used for shielding.\n 754 Defining Routing Constraints Feedback The following example creates a constraint group and specifies constraints for adding shields on the nets whose names start with pr.\n The minimum spacing is 3 microns for the M2 layer and 5 microns for the M3 layer.\n All constituent objects can share the shield; the M5 and M6 layers cannot be used for shielding.\n fc_shell> create_net_shielding \\ -for [get_nets -physical_context pr*] \\ -disabled_layers {M5 M6} -sharing true -layer_gaps {M2 3 M3 5} {shielding_4}"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Updating Supply Nets for ECO Cells"}, {"role": "assistant", "content": "To update the supply nets for ECO cells, use the eco_update_supply_net command.\n By default, it updates the supply nets for all cell added by using the following ECO commands: size_cell in freeze-silicon mode add_buffer add_eco_repeater split_fanout add_buffer_on_route To update the supply nets for specific cells, use the eco_update_supply_net -cells command.\n 979 Recording the Changes Made to a Layout Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining an Inner Keepout Margin"}, {"role": "assistant", "content": "You can define an inner keepout margin on a hierarchical cell, but not on a hard macro or a leaf cell.\n When you define an inner keepout margin, you must specify the keepout distance explicitly.\n To explicitly specify an inner keepout margin, use the -inner option to specify the margin distance for each side.\n You specify the left, bottom, right, and top margins using the following format: lx by rx ty.\n A value of 0 results in no keepout margin for that side.\n For example, to create a hard inner keepout margin with a margin of 10 on each side for a hierarchical cell named my_hcell, use the following command: fc_shell> create_keepout_margin -inner {10 10 10 10} my_hcell"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Optimization Targets at the Preroute Stage"}, {"role": "assistant", "content": "When performing concurrent clock and data optimization using the place_opt or clock_opt command, you can give a higher priority to the WNS optimization of Certain path groups by specifying them by using the ccd.targeted_ccd_path_groups application option, as shown in the following example: fc_shell> set_app_options -name ccd.targeted_ccd_path_groups \\ -value {PG1 PG2} 380 Implementing Clock Trees and Performing Post-CTS Optimization Feedback If a path group you specify with this application option is also specified as a path group to skip with the ccd.skip_path_groups application option, the path group is skipped during concurrent clock and data optimization.\n Certain endpoints by specifying a file containing the endpoints by using the ccd.targeted_ccd_end_points_file application option, as shown in the following example: fc_shell> set_app_options -name ccd.targeted_ccd_end_points_file \\ -value endpoint_targets.tcl If you specify both path groups and endpoints, the tool optimizes only the specified endpoints that are in the specified paths groups.\n The worst 300 timing paths by setting the ccd.enable_top_wns_optimization application option to true"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Inserting Level Shifters"}, {"role": "assistant", "content": "Level-shifter cells function as the interface between power domains that operate at different voltage levels.\n These cells ensure that the output transition of a driver can cause the receiving cell to switch even though the receiver is operating at a different voltage level.\n To insert level shifters in the current block, use the create_mv_cells command.\n The tool inserts the level shifters using the cell mapping and strategy defined in the UPF specification.\n When the tool inserts a level shifter, it sets a atributesize_onlysize_only atribute size_only attribute on the level shifter and a atributesdont_touchdont_touch atribute dont_touch attribute on the port-to-level-shifter net.\n By default, the command inserts cells only from the generic library.\n If you use the -mapped option with the create_mv_cells command, the command inserts cells only from the user-provided logic library and issues an error if a suitable cell is not available.\n If the tool does not insert a level-shifter cell, you can use the analyze_mv_design -level_shifter command to obtain more information.\n If you specify a net or pin with the -through option, the report lists the power domains and related supplies for the driver and load sides of the net or pin, along with error messages that indicate why a level-shifter cell was not inserted.\n The report includes errors about the specific insertion point as well as errors that are applicable to the entire path through the net or pin specified with the -through option."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Deriving Pin Access Routing Guides"}, {"role": "assistant", "content": "When you reuse hard macros, such as IP blocks, at a smaller technology node, it can cause routability issues to the macro pins.\n You can use routing guides and blockages to enable access to the hard macro pins.\n To create these routing guides, which are referred to as pin access routing guides, and the associated blockages, use the derive_pin_access_routing_guides command.\n You must specify the following information: The hard macros around which to create the routing guides and routing blockages (the -cells option) The metal layers for which to create the routing guides and routing blockages (the -layers option) The width of the routing guides and blockages in the x- and y-directions (the -x_width and -y_width options) For each specified hard macro, the command creates routing guides to enable routing to the pins on the specified layers.\n In addition, the command creates metal blockages that surround the macro on the specified layers, with cutouts to allow pin access, and via blockages that cover the macro on the via layers adjacent to the specified metal layers.\n Vertical routing guides and blockages have the specified x-width.\n Horizontal routing guides and blockages have the specified y-width.\n By default, the command creates pin cutouts only in the preferred routing direction.\n To also create pin cutouts in the nonpreferred direction, use the -nonpreferred_direction option.\n To extend the pin cutouts beyond the metal blockages, use the -pin_extension option to specify the extension distance in microns.\n To enable proper routing to pins of different sizes, the command sets the is_rectangle_only_rule_waived attribute on the macro pins to true to waive the rectangle-only rule.\n For example, the following command creates the routing guides and blockages shown in Figure 100 fc_shell> derive_pin_access_routing_guides -cells myMacro \\ -layers {M2 M3} -x_width 0.6 -y_width 0.7 In the figure, the two red pins are on M2 and the green pin is on M3.\n The figure shows the routing guides created on both the M2 and M3 layers, the metal blockages created on the M3 layer, and the via blockage created on the V2 and V3 layers.\n The tool also creates metal blockages on the M2 layer, which have cutouts for the M2 pins, and via blockages on the V1 and V2 layers.\n 480 Routing Constraints Feedback Figure 100 Pin Access Routing Guides and Blockages If a hard macro already has pin access routing guides and their associated blockages, the command removes these existing objects and creates new routing guides and blockages.\n If you move a hard macro after deriving the pin access routing guides, you must regenerate the pin access routing guides.\n You cannot manually modify pin access routing guides."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Deriving Clock Tree References for Preexisting Gates"}, {"role": "assistant", "content": "To ensure that the tool resize preexisting gates in the clock network during clock tree synthesis and optimization, you must specify equivalent cells as clock references.\n Not specifying a complete list of equivalent cells for preexisting gates can affect clock tree QoR.\n You can automatically derive equivalent cells for all the preexisting clock tree cells and specify them as clock references by using the derive_clock_cell_references command.\n 358 Specifying the Clock Tree Synthesis Settings Feedback When you run this command, the tool sets the valid_purpose attribute to true on equivalent library cells of the preexisting clock tree cells that are not buffers or inverters.\n This command does not derive equivalent library cells for preexisting buffers and inverters, Therefore, you must manually specify the buffers and inverters to use for clock tree synthesis, as shown in the following example: fc_shell> set_lib_cell_purpose -include cts \\ {tech_lib/clk_buf* tech_lib/clk_inv*} fc_shell> derive_clock_cell_references fc_shell> synthesize_clock_trees Instead of automatically specifying the equivalent library cells of the preexisting clock tree cells as clock tree references, you can generate a Tcl script that specifies the equivalent library cells of the preexisting clock tree cells as clock tree references.\n To do so, use the -output option.\n fc_shell> derive_clock_cell_references -output cts_leq_cells.tcl You can the output file, source it, and then run clock tree synthesis, as shown in the following example: fc_shell> set_lib_cell_purpose -include cts \\ {tech_lib/clk_buf* tech_lib/clk_inv*} fc_shell> source cts_leq_cells.tcl fc_shell> synthesize_clock_trees"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Library Requirements"}, {"role": "assistant", "content": "You need to have multiplexer cells in the logic library and also require to use multiplexing logic from the cell library.\n The following section describes library requirements to implement multiplexer cells for multiplexer optimization or to implement multiplexing logic from the cell library to control MUX mapping: Understanding Library Cell Requirements for Multiplexer Optimization Implementing Multiplexing Logic From Cell Library Understanding Library Cell Requirements for Multiplexer Optimization The multiplexer optimization requires the presence of at least a 2:1 multiplexer cell in the logic library.\n The inputs or outputs of this cell can be inverted.\n If a 2:1 multiplexer primitive cell does not exist in the library, you see the following warning message: Warning: Target library does not contain any 2-1 multiplexer.\n (OPT-853) An implementation of the MUX_OP cell from the target library is created, but it might not be the best implementation possible.\n All multiplexer cells in the target library can be used to construct the implementation of the MUX_OP cell except Enabled multiplexer cells Bused output multiplexer Multiplexers larger than 32 : 1 For Fusion Compiler to make the best use of the multiplexer cells available in your logic library, recompile the library or obtain a library compiled with version V3.4a or later from your ASIC vendor.\n Implementing Multiplexing Logic From Cell Library During logic synthesis, the tool implements multiplexing logic from the cell library using one of the following methods: AND, OR, and INV gates MUX gates The tool evaluates the area effect of both methods and selects the solution with the smallest area.\n 229 Controlling Mapping and Optimization Feedback You can specify that the tool uses MUX gates to implement specific multiplexing logic by applying the map_to_mux attribute on the corresponding SELECT_OP WVGTECH cells in the block, as shown in Example 16 Example 16 Using map_to_mux attribute to implement specific multiplexing logic # Apply the map_to_mux attribute on the SELECT_OP cell named C10 set_attribute -objects [get_cells C10] -name map_to_mux -value true # Query if the attribute is set as required on C10 get_attribute -objects [get_cells C10] -name map_to_mux #Run the compile step compile_fusion #Identify the cell created using the map_to_mux attribute get_cells -hier -filter \"map_to_mux==true &&!infer_mux_override\""}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Routing Corridors"}, {"role": "assistant", "content": "A routing corridor restricts Zroute global routing for specific nets to the region defined by a set of connected rectangles.\n In addition to specifying the region in which the routing occurs, you can also specify the minimum and maximum routing layers for each of the rectangles that comprise the routing corridor.\n Routing corridors are intended to be used to route critical nets before signal routing.\n Zroute global routing considers routing corridors as a hard constraint, while track assignment and detail routing consider routing corridors as a soft constraint and might route nets slightly outside of the routing corridor to fix DRC violations.\n Note: If a routing guide overlaps with a routing corridor and its attributes conflict with the routing corridor, the routing corridor takes precedence.\n For example, Figure 105 shows a routing corridor named corridor_1, which is made up of six rectangles.\n This routing corridor is associated with the nets shown in yellow.\n The figure on the left shows the nets before routing, while the figure on the right shows the nets routed within the routing corridor.\n Figure 105 Using a Routing Corridor Before routing After routing To define a routing corridor, use the create_routing_corridor command.\n At a minimum, you must define the boundary of the routing corridor.\n To create a rectangular routing corridor, use the -boundary option to specify the lower- left and upper-right corners of the rectangle using the following syntax: { { llx lly urx ury } } To create a rectilinear routing corridor, use the -boundary option to specify the coordinates of the polygon using the following syntax: { { x1 y1 } { x2 y2 }...\n } 491 Routing Constraints Feedback To create a path-based routing corridor, use the -path option to specify the path and the -width option to specify the width in microns.\n Specify the path using the following syntax: { { x1 y1 } { x2 y2 }...\n } By default, path-based routing corridors have flush end caps at the start and end of the path.\n To change the end cap style, use the -start_endcap and -end_endcap options.\n Valid styles are flush full_width, and half_width By default, the tool creates a routing corridor named CORRIDOR_ objId in the current block that honors the existing minimum and maximum routing layer constraints (for information about specifying routing layer constraints, see Specifying the Routing Resources ).\n Use the following options to change the default behavior.\n To specify a name for the routing corridor, use the -name option.\n To create the routing guide in a different physical cell, use the -cell option.\n When you use this option, the tool creates the routing guide in the cell's reference block using the coordinate system of the cell's top-level block.\n To specify the minimum and maximum routing layers for the routing corridor, use the -min_layer_name and -max_layer_name options.\n Specify the routing layers by using the layer names from the technology file."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Removing Cell Spacing Constraints"}, {"role": "assistant", "content": "To remove spacing rules, use the remove_al_spacing_rules comandcomandsremove_al_spacing_rules remove_placement_spacing_rules command.\n You must specify which rules to remove.\n To remove all spacing rules, use the -all option.\n To remove a specific label and all rules associated with that label, use the -label option to specify the label.\n To remove a rule between labels, use the -rule option to specify two labels associated with the rule."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Automatically Fixing Signoff DRC Violations"}, {"role": "assistant", "content": "Zroute can use the signoff DRC results generated by the signoff_check_drc command to automatically fix the detected design rule violations.\n To perform automatic fixing of the signoff DRC violations, 1.\n Set up the IC Validator environment as described in Setting Up the IC Validator Environment 2.\n Set up the physical signoff options as described in Setting Options for Signoff Design Rule Checking 3.\n (Optional) Generate a configuration file that aids in the fixing process.\n The configuration file defines the layer-to-DRC-rule mapping.\n The signoff_fix_drc command processes only those rules that are specified in the configuration file.\n By default, the signoff_fix_drc command automatically generates the configuration.\n You can manually generate a configuration file, as described in Creating an Autofix Configuration File 4.\n Set the application options for signoff DRC fixing.\n For information about the options for signoff DRC fixing, see Setting Options for Signoff Design Rule Checking 5.\n Save the block to disk.\n When you run the signoff_fix_drc command, the IC Validator tool uses the on- disk information for the block, not the information in memory.\n To ensure accurate information, use the save_block command to save the current state of the block before running the signoff_fix_drc command.\n 6.\n Run signoff DRC fixing by using the signoff_fix_drc command as described in Running the signoff_fix_drc Command If your block uses double-patterning technology, first perform signoff DRC fixing for all other routing design rules, and then perform signoff DRC fixing for only the double- patterning rules, as described in Automatically Fixing Double-Patterning Odd-Cycle Violations"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Checkpoints"}, {"role": "assistant", "content": "To define a checkpoint, insert the eval_checkpoint command in your script.\n Specify a unique name for the checkpoint and wrap the checkpoint around a block of code.\n Note the following: If you define a checkpoint with the same name as an existing checkpoint, the tool automatically adds a unique suffix to the name of the newly-defined checkpoint when it encounters the checkpoint in a run.\n For example, if you duplicate a checkpoint named placement, the tool renames the duplicate to placement2 when it encounters the checkpoint in a run.\n Do not nest checkpoints within other checkpoints.\n Although the tool does not prevent you from defining nested checkpoints, the tool ignores nested checkpoints during a run, executing only the outermost checkpoints (note that the Tcl code inside nested checkpoints still runs, but runs as though the checkpoints do not exist).\n Suppose you have a simple place_opt script: open_block./design:init_design source./scripts/pre_place_opt_settings.tcl remove_buffer_trees -all place_opt -from initial_place -to initial_drc create_placement -incremental -timing_driven -congestion place_opt -from initial_drc -to -initial_opto place_opt -from final_place -to final_opto The following example wraps a checkpoint around each major step in your golden flow.\n The checkpoints are named remove_buffers, place_opt_to_initial_drc, incr_placement, place_opt_to_initial_opto, and place_opt_to_final_opto.\n open_block./design.nlib:init_design source./scripts/pre_place_opt_settings.tcl 53 Adding Changes to a Script With Checkpoints Feedback eval_checkpoint remove_buffers { remove_buffer_trees -all eval_checkpoint place_opt_to_initial_drc { place_opt -from initial_place -to initial_drc eval_checkpoint incr_placement { create_placement -incremental -timing_driven -congestion eval_checkpoint place_opt_to_initial_opto { place_opt -from initial_drc -to initial_opto eval_checkpoint place_opt_to_final_opto { place_opt -from final_place -to final_opto By default, the checkpoints run the Tcl code they enwrap.\n That is, simply inserting checkpoints with the eval_checkpoint command does not change your flow.\n However, you can associate these checkpoints with flow changes or reports that you want to run before, after, or in place of the code the checkpoints enwrap, as described in Configuring Checkpoints See Also Configuring Checkpoints Querying Checkpoints and Checkpoint Behaviors"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying Options for Relative Placement Groups"}, {"role": "assistant", "content": "To specify properties of relative placement groups, use the set_rp_group_options command as described in Table 57 Table 57 Specifying Relative Placement Group Properties To do this Use this option Specify the anchor location.\n See Anchoring Relative Placement Groups -x_offset -y_offset Specify a corner for the anchor point set by the -x_offset and -y_offset options.\n See Anchoring Relative Placement Groups -anchor_corner Specify the type of alignment used by the cells in the group.\n See Aligning Leaf Cells Within a Column -alignment Specify the group alignment pin name, when using pin alignment.\n See Aligning by Pin Location -pin_name Specify a tiling type.\n See Controlling the Tiling Within Relative Placement Groups -tiling_type Specify the orientation.\n See Specifying the Orientation of Relative Placement Groups -group_orientation Specify the utilization (default is 100 percent).\n -utilization 792 Specifying Options for Relative Placement Groups Feedback Table 57 Specifying Relative Placement Group Properties (Continued) To do this Use this option Specify how to treat fixed cells in the floorplan during legalization.\n See Handling Fixed Cells During Relative Placement -place_around_fixed_cells Control the type of optimization that is allowed for relative placement cells See Controlling the Optimization of Relative Placement Cells -optimization_restriction Control the movement of the group during legalization.\n See Controlling Movement When Legalizing Relative Placement Groups -move_effort To remove relative placement group option settings, use the remove_rp_group_options command.\n You must specify the group name and at least one option; otherwise, this command has no effect."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Specifying UPF Constraints for Physical-Only Cells"}, {"role": "assistant", "content": "The UPF constraints for physical-only cells can cause issues when the UPF file is read into other tools that do not support physical-only cells, such as verification tools.\n Therefore, surround the UPF constraints for physical-only cells with the syntax shown in the following example: if {[info exists snps_handle_physical_only] && \\ $snps_handle_physical_only} { /* Supply net connections for filler cells */ connect_supply_net VDDS -ports [get_pins FILLER*/VDD] By default, the snps_handle_physical_only variable is set to true in the Fusion Compiler tool.\n Therefore, when you load and commit the UPF file, the constraints are applied to the physical-only cells.\n When you save a UPF file with the save_upf command, the tool uses the same syntax for the user-specified and tool-derived UPF constraints for physical-only cells.\n Therefore, these UPF constraints are ignored by any tool that does not have the snps_handle_physical_only variable set to true To create a UPF file that contains commands only for specific types of cells, use the -include or -exclude option with the save_upf command.\n These options accept arguments such as diode_cells pad_cells, and physical_only_cells.\n See the save_upf command man page for the complete list of arguments.\n Command filtering for specified cell types applies to the connect_supply_net set_related_supply_net create_power_domain, and set_isolation commands.\n You can apply command filtering to both block-level and full-chip UPF files."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Blockages That Exclude Registers"}, {"role": "assistant", "content": "To define partial blockages that exclude registers, specify the boundary, type ( -type register option), blockage percentage ( -blocked_percentage option), and optionally the name for the placement blockage.\n For example, to define a partial blockage that excludes registers, but allows a cell density of 50 percent for other cells, use the following commands: create_placement_blockage -boundary {{10 20} {100 200}} \\ -type register -blocked_percentage 50 Note: Register blockages are honored during placement, but not during legalization, optimization, or clock tree synthesis.\n 143 Specifying Physical Constraints for Placement and Legalization Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Clock-Gating Setup Condition"}, {"role": "assistant", "content": "To perform clock gating, the tool requires that the enable signal of the register bank is synchronous with its clock.\n This is the setup condition.\n For latch-based or integrated clock gating, the tool can insert clock gating irrespective of the enable signal's and the clock's clock domains.\n If the enable signal and the register bank reside in different clock domains, you must ensure that the two clock domains are synchronous and that the setup and hold times for the clock-gating cell meet the timing requirements.\n An exception exists for primary input ports that use a clock specified with the set_input_delay command.\n In this case, the input port is synchronous with the clock and the setup condition is true."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Optimizing the Fanout of a Net"}, {"role": "assistant", "content": "During the timing ECO flow, you can add buffers to a net and optimize its fanout by using the split_fanout command.\n With this command, you must specify The net to optimize by specifying its name by using the -net option or its driver by using the -driver option The library cell to use by using the -lib_cell option 971 Reporting Available Sites for Placing ECO Cells Feedback The method in which to optimize the net by specifying one of the following: A maximum fanout constraints for the net by using the -max_fanout option The load pins or ports to buffer by using the -load option When you use this option, you can specify the logical hierarchy to add the buffer by using the -hierarchy option.\n In addition, you can Add the buffers on the existing route topology of the net by using the -on_route option If you use this option with the -load option, you cannot specify the -hierarchy option.\n Split the fanout of a routed net that is not fully connected to the terminals of the driver or loads of the net by specifying a maximum distance between terminals of the driver or load pins and the incomplete route using the -max_distance_for_incomplete_route option.\n If the tool is unable to find a routed segment or finds more than one routed segment within the specified distance from the unconnected terminal, it issues an error message.\n Avoid placement blockages and macro cells when placing buffers by using the -respect_blockages option Specify a name prefix for the new cells and nets by using -cell_prefix and -net_prefix options By default, the tool uses eco_cell and eco_net as the name prefix for the new cells and nets."}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining Instance-Specific Via Ladder Constraints"}, {"role": "assistant", "content": "To define instance-specific via ladder constraints, use the set_via_ladder_constraints command.\n You must specify the instance pins and the via ladder templates that can be used for those pins.\n For example, to enable the use of the VL1, VL2, and VL3 via ladder templates for the u1/i1 and u2/i2 pins, use the following command: fc_shell> set_via_ladder_constraints -pins {u1/i1 u2/i2} \\ {VL1 VL2 VL3} To report the via ladder constraints, use the report_via_ladder_constraints command.\n To remove via ladder constraints, use the remove_via_ladder_constraints command.\n 456 Inserting Via Ladders Feedback"}]}
{"messages": [{"role": "system", "content": "You are a chip design assistant. You should help the user to answer their question."}, {"role": "user", "content": "How do I Defining a Hard Macro Placement Blockage"}, {"role": "assistant", "content": "To define a hard macro blockage, specify the boundary, type ( -type hard_macro option), and optionally the name for the placement blockage.\n For example, to define a hard macro blockage enclosed by a rectangle with corners at (120, 75) and (230, 200), use the following command: create_placement_blockage -boundary {120 75 230 200} \\ -type hard_macro Note: Hard macro placement blockages are honored during placement, legalization, and optimization.\n This is the only type of placement blockage that is honored by hard macro placement."}]}
